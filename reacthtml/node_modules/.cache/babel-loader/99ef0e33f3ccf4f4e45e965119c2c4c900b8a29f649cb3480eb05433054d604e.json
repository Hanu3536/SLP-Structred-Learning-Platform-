{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { Credentials } from '@aws-amplify/core';\nimport { AbstractInterpretPredictionsProvider } from '../types/Providers';\nimport { InterpretTextCategories } from '../types';\nimport { Comprehend } from 'aws-sdk';\nvar AmazonAIInterpretPredictionsProvider = /** @class */function (_super) {\n  __extends(AmazonAIInterpretPredictionsProvider, _super);\n  function AmazonAIInterpretPredictionsProvider() {\n    return _super.call(this) || this;\n  }\n  AmazonAIInterpretPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIInterpretPredictionsProvider';\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.interpretText = function (input) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, region, _d, _e, interpretTypeConfig, _f, _g, _h, _j, text, _k, interpretType, _l, _m, _o, language, comprehend, doAll, languagePromise, languageDetectionParams, entitiesPromise, LanguageCode, _p, entitiesDetectionParams, sentimentPromise, LanguageCode, _q, sentimentParams, syntaxPromise, LanguageCode, _r, syntaxParams, keyPhrasesPromise, LanguageCode, _s, keyPhrasesParams, results, err_1;\n        return __generator(this, function (_t) {\n          switch (_t.label) {\n            case 0:\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _t.sent();\n              if (!credentials) return [2 /*return*/, rej('No credentials')];\n              _a = this._config.interpretText, _b = _a === void 0 ? {} : _a, _c = _b.region, region = _c === void 0 ? '' : _c, _d = _b.defaults, _e = (_d === void 0 ? {} : _d).type, interpretTypeConfig = _e === void 0 ? '' : _e;\n              _f = input.text, _g = _f === void 0 ? {} : _f, _h = _g.source, _j = (_h === void 0 ? {} : _h).text, text = _j === void 0 ? '' : _j, _k = _g.type, interpretType = _k === void 0 ? interpretTypeConfig : _k;\n              _l = input.text, _m = (_l === void 0 ? {} : _l).source, _o = (_m === void 0 ? {} : _m).language, language = _o === void 0 ? undefined : _o;\n              comprehend = new Comprehend({\n                credentials: credentials,\n                region: region\n              });\n              doAll = interpretType === InterpretTextCategories.ALL;\n              if (doAll || interpretType === InterpretTextCategories.LANGUAGE) {\n                languageDetectionParams = {\n                  Text: text\n                };\n                languagePromise = this.detectLanguage(languageDetectionParams, comprehend);\n              }\n              if (!(doAll || interpretType === InterpretTextCategories.ENTITIES)) return [3 /*break*/, 4];\n              _p = language;\n              if (_p) return [3 /*break*/, 3];\n              return [4 /*yield*/, languagePromise];\n            case 2:\n              _p = _t.sent();\n              _t.label = 3;\n            case 3:\n              LanguageCode = _p;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              entitiesDetectionParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              entitiesPromise = this.detectEntities(entitiesDetectionParams, comprehend);\n              _t.label = 4;\n            case 4:\n              if (!(doAll || interpretType === InterpretTextCategories.SENTIMENT)) return [3 /*break*/, 7];\n              _q = language;\n              if (_q) return [3 /*break*/, 6];\n              return [4 /*yield*/, languagePromise];\n            case 5:\n              _q = _t.sent();\n              _t.label = 6;\n            case 6:\n              LanguageCode = _q;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              sentimentParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              sentimentPromise = this.detectSentiment(sentimentParams, comprehend);\n              _t.label = 7;\n            case 7:\n              if (!(doAll || interpretType === InterpretTextCategories.SYNTAX)) return [3 /*break*/, 10];\n              _r = language;\n              if (_r) return [3 /*break*/, 9];\n              return [4 /*yield*/, languagePromise];\n            case 8:\n              _r = _t.sent();\n              _t.label = 9;\n            case 9:\n              LanguageCode = _r;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              syntaxParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              syntaxPromise = this.detectSyntax(syntaxParams, comprehend);\n              _t.label = 10;\n            case 10:\n              if (!(doAll || interpretType === InterpretTextCategories.KEY_PHRASES)) return [3 /*break*/, 13];\n              _s = language;\n              if (_s) return [3 /*break*/, 12];\n              return [4 /*yield*/, languagePromise];\n            case 11:\n              _s = _t.sent();\n              _t.label = 12;\n            case 12:\n              LanguageCode = _s;\n              if (!LanguageCode) {\n                return [2 /*return*/, rej('language code is required on source for this selection')];\n              }\n              keyPhrasesParams = {\n                Text: text,\n                LanguageCode: LanguageCode\n              };\n              keyPhrasesPromise = this.detectKeyPhrases(keyPhrasesParams, comprehend);\n              _t.label = 13;\n            case 13:\n              _t.trys.push([13, 15,, 16]);\n              return [4 /*yield*/, Promise.all([languagePromise, entitiesPromise, sentimentPromise, syntaxPromise, keyPhrasesPromise])];\n            case 14:\n              results = _t.sent();\n              res({\n                textInterpretation: {\n                  keyPhrases: results[4] || [],\n                  language: results[0] || '',\n                  sentiment: results[2],\n                  syntax: results[3] || [],\n                  textEntities: results[1] || []\n                }\n              });\n              return [3 /*break*/, 16];\n            case 15:\n              err_1 = _t.sent();\n              rej(err_1);\n              return [3 /*break*/, 16];\n            case 16:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIInterpretPredictionsProvider.prototype.detectKeyPhrases = function (params, comprehend) {\n    return new Promise(function (res, rej) {\n      comprehend.detectKeyPhrases(params, function (err, data) {\n        var _a = (data || {}).KeyPhrases,\n          KeyPhrases = _a === void 0 ? [] : _a;\n        if (err) {\n          if (err.code === 'AccessDeniedException') {\n            rej('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n          } else {\n            rej(err.message);\n          }\n        } else {\n          res(KeyPhrases.map(function (_a) {\n            var text = _a.Text;\n            return {\n              text: text\n            };\n          }));\n        }\n      });\n    });\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectSyntax = function (params, comprehend) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      comprehend.detectSyntax(params, function (err, data) {\n        var _a = (data || {}).SyntaxTokens,\n          SyntaxTokens = _a === void 0 ? [] : _a;\n        if (err) {\n          if (err.code === 'AccessDeniedException') {\n            rej('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n          } else {\n            rej(err.message);\n          }\n        } else {\n          res(_this.serializeSyntaxFromComprehend(SyntaxTokens));\n        }\n      });\n    });\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.serializeSyntaxFromComprehend = function (tokens) {\n    var response = [];\n    if (tokens && Array.isArray(tokens)) {\n      response = tokens.map(function (_a) {\n        var _b = _a.Text,\n          text = _b === void 0 ? '' : _b,\n          _c = _a.PartOfSpeech,\n          _d = (_c === void 0 ? {} : _c).Tag,\n          syntax = _d === void 0 ? '' : _d;\n        return {\n          text: text,\n          syntax: syntax\n        };\n      });\n    }\n    return response;\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectSentiment = function (params, comprehend) {\n    return new Promise(function (res, rej) {\n      comprehend.detectSentiment(params, function (err, data) {\n        if (err) {\n          if (err.code === 'AccessDeniedException') {\n            rej('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n          } else {\n            rej(err.message);\n          }\n        } else {\n          var _a = data,\n            _b = _a.Sentiment,\n            predominant = _b === void 0 ? '' : _b,\n            _c = _a.SentimentScore,\n            _d = _c === void 0 ? {} : _c,\n            _e = _d.Positive,\n            positive = _e === void 0 ? 0 : _e,\n            _f = _d.Negative,\n            negative = _f === void 0 ? 0 : _f,\n            _g = _d.Neutral,\n            neutral = _g === void 0 ? 0 : _g,\n            _h = _d.Mixed,\n            mixed = _h === void 0 ? 0 : _h;\n          res({\n            predominant: predominant,\n            positive: positive,\n            negative: negative,\n            neutral: neutral,\n            mixed: mixed\n          });\n        }\n      });\n    });\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectEntities = function (params, comprehend) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      comprehend.detectEntities(params, function (err, data) {\n        var _a = (data || {}).Entities,\n          Entities = _a === void 0 ? [] : _a;\n        if (err) {\n          if (err.code === 'AccessDeniedException') {\n            rej('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n          } else {\n            rej(err.message);\n          }\n        } else {\n          res(_this.serializeEntitiesFromComprehend(Entities));\n        }\n      });\n    });\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.serializeEntitiesFromComprehend = function (data) {\n    var response = [];\n    if (data && Array.isArray(data)) {\n      response = data.map(function (_a) {\n        var type = _a.Type,\n          text = _a.Text;\n        return {\n          type: type,\n          text: text\n        };\n      });\n    }\n    return response;\n  };\n  AmazonAIInterpretPredictionsProvider.prototype.detectLanguage = function (params, comprehend) {\n    return new Promise(function (res, rej) {\n      comprehend.detectDominantLanguage(params, function (err, data) {\n        if (err) {\n          if (err.code === 'AccessDeniedException') {\n            rej('Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' + 'amplify predictions add');\n          } else {\n            rej(err.message);\n          }\n        } else {\n          var _a = (data || {}).Languages,\n            LanguageCode = (_a === void 0 ? [''] : _a)[0].LanguageCode;\n          if (!LanguageCode) {\n            rej('Language not detected');\n          }\n          res(data.Languages[0].LanguageCode);\n        }\n      });\n    });\n  };\n  return AmazonAIInterpretPredictionsProvider;\n}(AbstractInterpretPredictionsProvider);\nexport default AmazonAIInterpretPredictionsProvider;","map":{"version":3,"names":["Credentials","AbstractInterpretPredictionsProvider","InterpretTextCategories","Comprehend","AmazonAIInterpretPredictionsProvider","_super","__extends","call","prototype","getProviderName","interpretText","input","_this","Promise","res","rej","__awaiter","get","credentials","_t","sent","_a","_config","_b","_c","region","_d","defaults","_e","type","interpretTypeConfig","_f","text","_g","_h","source","_j","_k","interpretType","_l","_m","_o","language","undefined","comprehend","doAll","ALL","LANGUAGE","languageDetectionParams","Text","languagePromise","detectLanguage","ENTITIES","_p","LanguageCode","entitiesDetectionParams","entitiesPromise","detectEntities","SENTIMENT","_q","sentimentParams","sentimentPromise","detectSentiment","SYNTAX","_r","syntaxParams","syntaxPromise","detectSyntax","KEY_PHRASES","_s","keyPhrasesParams","keyPhrasesPromise","detectKeyPhrases","all","results","textInterpretation","keyPhrases","sentiment","syntax","textEntities","err_1","params","err","data","KeyPhrases","code","message","map","SyntaxTokens","serializeSyntaxFromComprehend","tokens","response","Array","isArray","PartOfSpeech","Tag","Sentiment","predominant","SentimentScore","Positive","positive","Negative","negative","Neutral","neutral","Mixed","mixed","Entities","serializeEntitiesFromComprehend","Type","detectDominantLanguage","Languages"],"sources":["C:\\Study\\6805\\React\\reacthtml\\node_modules\\@aws-amplify\\predictions\\src\\Providers\\AmazonAIInterpretPredictionsProvider.ts"],"sourcesContent":["import { Credentials } from '@aws-amplify/core';\nimport { AbstractInterpretPredictionsProvider } from '../types/Providers';\n\nimport {\n\tInterpretTextInput,\n\tInterpretTextOutput,\n\tInterpretTextCategories,\n\tTextEntities,\n\tTextSentiment,\n\tTextSyntax,\n\tKeyPhrases,\n} from '../types';\nimport { Comprehend } from 'aws-sdk';\n\nexport default class AmazonAIInterpretPredictionsProvider extends AbstractInterpretPredictionsProvider {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIInterpretPredictionsProvider';\n\t}\n\n\tinterpretText(input: InterpretTextInput): Promise<InterpretTextOutput> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) return rej('No credentials');\n\t\t\tconst {\n\t\t\t\tinterpretText: {\n\t\t\t\t\tregion = '',\n\t\t\t\t\tdefaults: { type: interpretTypeConfig = '' } = {},\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\t\t\tconst {\n\t\t\t\ttext: {\n\t\t\t\t\tsource: { text = '' } = {},\n\t\t\t\t\ttype: interpretType = interpretTypeConfig,\n\t\t\t\t} = {},\n\t\t\t} = ({} = input);\n\n\t\t\tconst {\n\t\t\t\ttext: { source: { language = undefined } = {} } = {},\n\t\t\t} = ({} = input as any); // language is only required for specific interpret types\n\n\t\t\tconst comprehend = new Comprehend({\n\t\t\t\tcredentials,\n\t\t\t\tregion,\n\t\t\t});\n\n\t\t\tconst doAll = interpretType === InterpretTextCategories.ALL;\n\n\t\t\tlet languagePromise: Promise<string>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.LANGUAGE) {\n\t\t\t\tconst languageDetectionParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t};\n\t\t\t\tlanguagePromise = this.detectLanguage(\n\t\t\t\t\tlanguageDetectionParams,\n\t\t\t\t\tcomprehend\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet entitiesPromise: Promise<Array<TextEntities>>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.ENTITIES) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst entitiesDetectionParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tentitiesPromise = this.detectEntities(\n\t\t\t\t\tentitiesDetectionParams,\n\t\t\t\t\tcomprehend\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tlet sentimentPromise: Promise<TextSentiment>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.SENTIMENT) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst sentimentParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tsentimentPromise = this.detectSentiment(sentimentParams, comprehend);\n\t\t\t}\n\n\t\t\tlet syntaxPromise: Promise<Array<TextSyntax>>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.SYNTAX) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst syntaxParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tsyntaxPromise = this.detectSyntax(syntaxParams, comprehend);\n\t\t\t}\n\n\t\t\tlet keyPhrasesPromise: Promise<Array<KeyPhrases>>;\n\t\t\tif (doAll || interpretType === InterpretTextCategories.KEY_PHRASES) {\n\t\t\t\tconst LanguageCode = language || (await languagePromise);\n\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\treturn rej('language code is required on source for this selection');\n\t\t\t\t}\n\t\t\t\tconst keyPhrasesParams = {\n\t\t\t\t\tText: text,\n\t\t\t\t\tLanguageCode,\n\t\t\t\t};\n\t\t\t\tkeyPhrasesPromise = this.detectKeyPhrases(keyPhrasesParams, comprehend);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tconst results = await Promise.all([\n\t\t\t\t\tlanguagePromise,\n\t\t\t\t\tentitiesPromise,\n\t\t\t\t\tsentimentPromise,\n\t\t\t\t\tsyntaxPromise,\n\t\t\t\t\tkeyPhrasesPromise,\n\t\t\t\t]);\n\t\t\t\tres({\n\t\t\t\t\ttextInterpretation: {\n\t\t\t\t\t\tkeyPhrases: results[4] || [],\n\t\t\t\t\t\tlanguage: results[0] || '',\n\t\t\t\t\t\tsentiment: results[2],\n\t\t\t\t\t\tsyntax: results[3] || [],\n\t\t\t\t\t\ttextEntities: results[1] || [],\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t} catch (err) {\n\t\t\t\trej(err);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate detectKeyPhrases(params, comprehend): Promise<Array<KeyPhrases>> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tcomprehend.detectKeyPhrases(params, (err, data) => {\n\t\t\t\tconst { KeyPhrases = [] } = data || {};\n\t\t\t\tif (err) {\n\t\t\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err.message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres(\n\t\t\t\t\t\tKeyPhrases.map(({ Text: text }) => {\n\t\t\t\t\t\t\treturn { text };\n\t\t\t\t\t\t})\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate detectSyntax(params, comprehend): Promise<Array<TextSyntax>> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tcomprehend.detectSyntax(params, (err, data) => {\n\t\t\t\tconst { SyntaxTokens = [] } = data || {};\n\t\t\t\tif (err) {\n\t\t\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err.message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres(this.serializeSyntaxFromComprehend(SyntaxTokens));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate serializeSyntaxFromComprehend(tokens): Array<TextSyntax> {\n\t\tlet response = [];\n\t\tif (tokens && Array.isArray(tokens)) {\n\t\t\tresponse = tokens.map(\n\t\t\t\t({ Text: text = '', PartOfSpeech: { Tag: syntax = '' } = {} }) => {\n\t\t\t\t\treturn { text, syntax };\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate detectSentiment(params, comprehend): Promise<TextSentiment> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tcomprehend.detectSentiment(params, (err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err.message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst {\n\t\t\t\t\t\tSentiment: predominant = '',\n\t\t\t\t\t\tSentimentScore: {\n\t\t\t\t\t\t\tPositive: positive = 0,\n\t\t\t\t\t\t\tNegative: negative = 0,\n\t\t\t\t\t\t\tNeutral: neutral = 0,\n\t\t\t\t\t\t\tMixed: mixed = 0,\n\t\t\t\t\t\t} = {},\n\t\t\t\t\t} = ({} = data);\n\t\t\t\t\tres({ predominant, positive, negative, neutral, mixed });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate detectEntities(params, comprehend): Promise<Array<TextEntities>> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tcomprehend.detectEntities(params, (err, data) => {\n\t\t\t\tconst { Entities = [] } = data || {};\n\t\t\t\tif (err) {\n\t\t\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err.message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tres(this.serializeEntitiesFromComprehend(Entities));\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\tprivate serializeEntitiesFromComprehend(data): Array<TextEntities> {\n\t\tlet response = [];\n\t\tif (data && Array.isArray(data)) {\n\t\t\tresponse = data.map(({ Type: type, Text: text }) => {\n\t\t\t\treturn { type, text };\n\t\t\t});\n\t\t}\n\t\treturn response;\n\t}\n\n\tprivate detectLanguage(params, comprehend): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tcomprehend.detectDominantLanguage(params, (err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tif (err.code === 'AccessDeniedException') {\n\t\t\t\t\t\trej(\n\t\t\t\t\t\t\t'Not authorized, did you enable Interpret Text on predictions category Amplify CLI? try: ' +\n\t\t\t\t\t\t\t\t'amplify predictions add'\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\trej(err.message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst { Languages: [{ LanguageCode }] = [''] } = ({} = data || {});\n\t\t\t\t\tif (!LanguageCode) {\n\t\t\t\t\t\trej('Language not detected');\n\t\t\t\t\t}\n\t\t\t\t\tres(data.Languages[0].LanguageCode);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}