{"ast":null,"code":"/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\nvar logger = new Logger('AWSLexProvider');\nvar AWSLexProvider = /** @class */function (_super) {\n  __extends(AWSLexProvider, _super);\n  function AWSLexProvider(options) {\n    if (options === void 0) {\n      options = {};\n    }\n    var _this = _super.call(this, options) || this;\n    _this.aws_lex = new LexRuntime({\n      region: _this._config.region\n    });\n    _this._botsCompleteCallback = {};\n    return _this;\n  }\n  AWSLexProvider.prototype.getProviderName = function () {\n    return 'AWSLexProvider';\n  };\n  AWSLexProvider.prototype.responseCallback = function (err, data, res, rej, botname) {\n    var _this = this;\n    if (err) {\n      rej(err);\n      return;\n    } else {\n      // Check if state is fulfilled to resolve onFullfilment promise\n      logger.debug('postContent state', data.dialogState);\n      if (data.dialogState === 'ReadyForFulfillment' || data.dialogState === 'Fulfilled') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname](null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete(null, {\n              slots: data.slots\n            });\n          }, 0);\n        }\n      }\n      res(data);\n      if (data.dialogState === 'Failed') {\n        if (typeof this._botsCompleteCallback[botname] === 'function') {\n          setTimeout(function () {\n            return _this._botsCompleteCallback[botname]('Bot conversation failed');\n          }, 0);\n        }\n        if (this._config && typeof this._config[botname].onComplete === 'function') {\n          setTimeout(function () {\n            return _this._config[botname].onComplete('Bot conversation failed');\n          }, 0);\n        }\n      }\n    }\n  };\n  AWSLexProvider.prototype.sendMessage = function (botname, message) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, params;\n        var _this = this;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!this._config[botname]) {\n                return [2 /*return*/, rej('Bot ' + botname + ' does not exist')];\n              }\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _a.sent();\n              if (!credentials) {\n                return [2 /*return*/, rej('No credentials')];\n              }\n              AWS.config.update({\n                credentials: credentials\n              });\n              this.aws_lex = new LexRuntime({\n                region: this._config[botname].region,\n                credentials: credentials\n              });\n              if (typeof message === 'string') {\n                params = {\n                  botAlias: this._config[botname].alias,\n                  botName: botname,\n                  inputText: message,\n                  userId: credentials.identityId\n                };\n                logger.debug('postText to lex', message);\n                this.aws_lex.postText(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              } else {\n                if (message.options['messageType'] === 'voice') {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'audio/x-l16; sample-rate=16000',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                } else {\n                  params = {\n                    botAlias: this._config[botname].alias,\n                    botName: botname,\n                    contentType: 'text/plain; charset=utf-8',\n                    inputStream: message.content,\n                    userId: credentials.identityId,\n                    accept: 'audio/mpeg'\n                  };\n                }\n                logger.debug('postContent to lex', message);\n                this.aws_lex.postContent(params, function (err, data) {\n                  _this.responseCallback(err, data, res, rej, botname);\n                });\n              }\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AWSLexProvider.prototype.onComplete = function (botname, callback) {\n    if (!this._config[botname]) {\n      throw new ErrorEvent('Bot ' + botname + ' does not exist');\n    }\n    this._botsCompleteCallback[botname] = callback;\n  };\n  return AWSLexProvider;\n}(AbstractInteractionsProvider);\nexport { AWSLexProvider };","map":{"version":3,"names":["AbstractInteractionsProvider","LexRuntime","ConsoleLogger","Logger","AWS","Credentials","logger","AWSLexProvider","_super","__extends","options","_this","call","aws_lex","region","_config","_botsCompleteCallback","prototype","getProviderName","responseCallback","err","data","res","rej","botname","debug","dialogState","setTimeout","slots","onComplete","sendMessage","message","Promise","__awaiter","get","credentials","_a","sent","config","update","params","botAlias","alias","botName","inputText","userId","identityId","postText","contentType","inputStream","content","accept","postContent","callback","ErrorEvent"],"sources":["C:\\Study\\6805\\React\\reacthtml\\node_modules\\@aws-amplify\\interactions\\src\\Providers\\AWSLexProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { AbstractInteractionsProvider } from './InteractionsProvider';\nimport {\n\tInteractionsOptions,\n\tInteractionsMessage,\n\tInteractionsResponse,\n} from '../types';\nimport * as LexRuntime from 'aws-sdk/clients/lexruntime';\nimport { ConsoleLogger as Logger, AWS, Credentials } from '@aws-amplify/core';\nimport { registerHelper } from 'handlebars';\n\nconst logger = new Logger('AWSLexProvider');\n\nexport class AWSLexProvider extends AbstractInteractionsProvider {\n\tprivate aws_lex: LexRuntime;\n\tprivate _botsCompleteCallback: object;\n\n\tconstructor(options: InteractionsOptions = {}) {\n\t\tsuper(options);\n\t\tthis.aws_lex = new LexRuntime({ region: this._config.region });\n\t\tthis._botsCompleteCallback = {};\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSLexProvider';\n\t}\n\n\tresponseCallback(err, data, res, rej, botname) {\n\t\tif (err) {\n\t\t\trej(err);\n\t\t\treturn;\n\t\t} else {\n\t\t\t// Check if state is fulfilled to resolve onFullfilment promise\n\t\t\tlogger.debug('postContent state', data.dialogState);\n\t\t\tif (\n\t\t\t\tdata.dialogState === 'ReadyForFulfillment' ||\n\t\t\t\tdata.dialogState === 'Fulfilled'\n\t\t\t) {\n\t\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis._botsCompleteCallback[botname](null, { slots: data.slots }),\n\t\t\t\t\t\t0\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tthis._config &&\n\t\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t\t) {\n\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t() => this._config[botname].onComplete(null, { slots: data.slots }),\n\t\t\t\t\t\t0\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tres(data);\n\t\t\tif (data.dialogState === 'Failed') {\n\t\t\t\tif (typeof this._botsCompleteCallback[botname] === 'function') {\n\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t() =>\n\t\t\t\t\t\t\tthis._botsCompleteCallback[botname]('Bot conversation failed'),\n\t\t\t\t\t\t0\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (\n\t\t\t\t\tthis._config &&\n\t\t\t\t\ttypeof this._config[botname].onComplete === 'function'\n\t\t\t\t) {\n\t\t\t\t\tsetTimeout(\n\t\t\t\t\t\t() => this._config[botname].onComplete('Bot conversation failed'),\n\t\t\t\t\t\t0\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tsendMessage(\n\t\tbotname: string,\n\t\tmessage: string | InteractionsMessage\n\t): Promise<object> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tif (!this._config[botname]) {\n\t\t\t\treturn rej('Bot ' + botname + ' does not exist');\n\t\t\t}\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) {\n\t\t\t\treturn rej('No credentials');\n\t\t\t}\n\t\t\tAWS.config.update({\n\t\t\t\tcredentials,\n\t\t\t});\n\n\t\t\tthis.aws_lex = new LexRuntime({\n\t\t\t\tregion: this._config[botname].region,\n\t\t\t\tcredentials,\n\t\t\t});\n\n\t\t\tlet params;\n\t\t\tif (typeof message === 'string') {\n\t\t\t\tparams = {\n\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\tbotName: botname,\n\t\t\t\t\tinputText: message,\n\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t};\n\n\t\t\t\tlogger.debug('postText to lex', message);\n\n\t\t\t\tthis.aws_lex.postText(params, (err, data) => {\n\t\t\t\t\tthis.responseCallback(err, data, res, rej, botname);\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tif (message.options['messageType'] === 'voice') {\n\t\t\t\t\tparams = {\n\t\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\t\tbotName: botname,\n\t\t\t\t\t\tcontentType: 'audio/x-l16; sample-rate=16000',\n\t\t\t\t\t\tinputStream: message.content,\n\t\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tparams = {\n\t\t\t\t\t\tbotAlias: this._config[botname].alias,\n\t\t\t\t\t\tbotName: botname,\n\t\t\t\t\t\tcontentType: 'text/plain; charset=utf-8',\n\t\t\t\t\t\tinputStream: message.content,\n\t\t\t\t\t\tuserId: credentials.identityId,\n\t\t\t\t\t\taccept: 'audio/mpeg',\n\t\t\t\t\t};\n\t\t\t\t}\n\n\t\t\t\tlogger.debug('postContent to lex', message);\n\n\t\t\t\tthis.aws_lex.postContent(params, (err, data) => {\n\t\t\t\t\tthis.responseCallback(err, data, res, rej, botname);\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tonComplete(botname: string, callback) {\n\t\tif (!this._config[botname]) {\n\t\t\tthrow new ErrorEvent('Bot ' + botname + ' does not exist');\n\t\t}\n\t\tthis._botsCompleteCallback[botname] = callback;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}