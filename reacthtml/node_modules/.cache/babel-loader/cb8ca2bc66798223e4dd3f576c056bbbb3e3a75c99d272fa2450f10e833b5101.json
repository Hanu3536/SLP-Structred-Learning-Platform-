{"ast":null,"code":"var AWS = require('../core');\nAWS.util.update(AWS.STS.prototype, {\n  /**\n   * @overload credentialsFrom(data, credentials = null)\n   *   Creates a credentials object from STS response data containing\n   *   credentials information. Useful for quickly setting AWS credentials.\n   *\n   *   @note This is a low-level utility function. If you want to load temporary\n   *     credentials into your process for subsequent requests to AWS resources,\n   *     you should use {AWS.TemporaryCredentials} instead.\n   *   @param data [map] data retrieved from a call to {getFederatedToken},\n   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\n   *   @param credentials [AWS.Credentials] an optional credentials object to\n   *     fill instead of creating a new object. Useful when modifying an\n   *     existing credentials object from a refresh call.\n   *   @return [AWS.TemporaryCredentials] the set of temporary credentials\n   *     loaded from a raw STS operation response.\n   *   @example Using credentialsFrom to load global AWS credentials\n   *     var sts = new AWS.STS();\n   *     sts.getSessionToken(function (err, data) {\n   *       if (err) console.log(\"Error getting credentials\");\n   *       else {\n   *         AWS.config.credentials = sts.credentialsFrom(data);\n   *       }\n   *     });\n   *   @see AWS.TemporaryCredentials\n   */\n  credentialsFrom: function credentialsFrom(data, credentials) {\n    if (!data) return null;\n    if (!credentials) credentials = new AWS.TemporaryCredentials();\n    credentials.expired = false;\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;\n    credentials.sessionToken = data.Credentials.SessionToken;\n    credentials.expireTime = data.Credentials.Expiration;\n    return credentials;\n  },\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\n  },\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\n  }\n});","map":{"version":3,"names":["AWS","require","util","update","STS","prototype","credentialsFrom","data","credentials","TemporaryCredentials","expired","accessKeyId","Credentials","AccessKeyId","secretAccessKey","SecretAccessKey","sessionToken","SessionToken","expireTime","Expiration","assumeRoleWithWebIdentity","params","callback","makeUnauthenticatedRequest","assumeRoleWithSAML"],"sources":["C:/Study/6805/React/reacthtml/node_modules/aws-sdk/lib/services/sts.js"],"sourcesContent":["var AWS = require('../core');\n\nAWS.util.update(AWS.STS.prototype, {\n  /**\n   * @overload credentialsFrom(data, credentials = null)\n   *   Creates a credentials object from STS response data containing\n   *   credentials information. Useful for quickly setting AWS credentials.\n   *\n   *   @note This is a low-level utility function. If you want to load temporary\n   *     credentials into your process for subsequent requests to AWS resources,\n   *     you should use {AWS.TemporaryCredentials} instead.\n   *   @param data [map] data retrieved from a call to {getFederatedToken},\n   *     {getSessionToken}, {assumeRole}, or {assumeRoleWithWebIdentity}.\n   *   @param credentials [AWS.Credentials] an optional credentials object to\n   *     fill instead of creating a new object. Useful when modifying an\n   *     existing credentials object from a refresh call.\n   *   @return [AWS.TemporaryCredentials] the set of temporary credentials\n   *     loaded from a raw STS operation response.\n   *   @example Using credentialsFrom to load global AWS credentials\n   *     var sts = new AWS.STS();\n   *     sts.getSessionToken(function (err, data) {\n   *       if (err) console.log(\"Error getting credentials\");\n   *       else {\n   *         AWS.config.credentials = sts.credentialsFrom(data);\n   *       }\n   *     });\n   *   @see AWS.TemporaryCredentials\n   */\n  credentialsFrom: function credentialsFrom(data, credentials) {\n    if (!data) return null;\n    if (!credentials) credentials = new AWS.TemporaryCredentials();\n    credentials.expired = false;\n    credentials.accessKeyId = data.Credentials.AccessKeyId;\n    credentials.secretAccessKey = data.Credentials.SecretAccessKey;\n    credentials.sessionToken = data.Credentials.SessionToken;\n    credentials.expireTime = data.Credentials.Expiration;\n    return credentials;\n  },\n\n  assumeRoleWithWebIdentity: function assumeRoleWithWebIdentity(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithWebIdentity', params, callback);\n  },\n\n  assumeRoleWithSAML: function assumeRoleWithSAML(params, callback) {\n    return this.makeUnauthenticatedRequest('assumeRoleWithSAML', params, callback);\n  }\n});\n"],"mappings":"AAAA,IAAIA,GAAG,GAAGC,OAAO,CAAC,SAAS,CAAC;AAE5BD,GAAG,CAACE,IAAI,CAACC,MAAM,CAACH,GAAG,CAACI,GAAG,CAACC,SAAS,EAAE;EACjC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,eAAe,EAAE,SAASA,eAAeA,CAACC,IAAI,EAAEC,WAAW,EAAE;IAC3D,IAAI,CAACD,IAAI,EAAE,OAAO,IAAI;IACtB,IAAI,CAACC,WAAW,EAAEA,WAAW,GAAG,IAAIR,GAAG,CAACS,oBAAoB,CAAC,CAAC;IAC9DD,WAAW,CAACE,OAAO,GAAG,KAAK;IAC3BF,WAAW,CAACG,WAAW,GAAGJ,IAAI,CAACK,WAAW,CAACC,WAAW;IACtDL,WAAW,CAACM,eAAe,GAAGP,IAAI,CAACK,WAAW,CAACG,eAAe;IAC9DP,WAAW,CAACQ,YAAY,GAAGT,IAAI,CAACK,WAAW,CAACK,YAAY;IACxDT,WAAW,CAACU,UAAU,GAAGX,IAAI,CAACK,WAAW,CAACO,UAAU;IACpD,OAAOX,WAAW;EACpB,CAAC;EAEDY,yBAAyB,EAAE,SAASA,yBAAyBA,CAACC,MAAM,EAAEC,QAAQ,EAAE;IAC9E,OAAO,IAAI,CAACC,0BAA0B,CAAC,2BAA2B,EAAEF,MAAM,EAAEC,QAAQ,CAAC;EACvF,CAAC;EAEDE,kBAAkB,EAAE,SAASA,kBAAkBA,CAACH,MAAM,EAAEC,QAAQ,EAAE;IAChE,OAAO,IAAI,CAACC,0BAA0B,CAAC,oBAAoB,EAAEF,MAAM,EAAEC,QAAQ,CAAC;EAChF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}