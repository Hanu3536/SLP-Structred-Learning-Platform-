{"ast":null,"code":"var AWS = require('../core');\nvar v4Credentials = require('../signers/v4_credentials');\n\n// Pull in managed upload extension\nrequire('../s3/managed_upload');\n\n/**\n * @api private\n */\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n\n/**\n * @api private\n */\nvar regionRedirectErrorCodes = ['AuthorizationHeaderMalformed',\n// non-head operations on virtual-hosted global bucket endpoints\n'BadRequest',\n// head operations on virtual-hosted global bucket endpoints\n'PermanentRedirect',\n// non-head operations on path-style or regional endpoints\n301 // head operations on path-style or regional endpoints\n];\n\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) default to lowest version the region supports\n        b) If using presigned urls, default to lowest version the region supports\n    */\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n    return defaultApiVersion;\n  },\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = [];\n\n    // default to us-east-1 when no region is provided\n    if (!this.config.region) this.config.region = 'us-east-1';\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' + '`s3BucketEndpoint` to true.');\n    }\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n    if (msg) {\n      throw AWS.util.error(new Error(), {\n        name: 'InvalidEndpoint',\n        message: msg\n      });\n    }\n  },\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4 && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n    return false;\n  },\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.addListener('validate', this.validateBucketName, prependListener);\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.populateURI);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('extractError', this.extractError);\n    request.onAsync('extractError', this.requestBucketRegion);\n    request.addListener('extractData', this.extractData);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n    if (this.shouldDisableBodySigning(request)) {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    }\n  },\n  /**\n   * @api private\n   */\n  validateScheme: function (req) {\n    var params = req.params,\n      scheme = req.httpRequest.endpoint.protocol,\n      sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' + 'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function (req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(), {\n        code: 'ConfigError',\n        message: msg\n      });\n    }\n  },\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params);\n        // Need to include trailing slash to match sigv2 behavior\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(), {\n          code: 'InvalidBucket',\n          message: msg\n        });\n      }\n    }\n  },\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = ['createBucket', 'deleteBucket', 'listBuckets'];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstack) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname = b + '.' + endpoint.hostname;\n        }\n        var port = endpoint.port;\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' + endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n    if (!httpRequest.headers['Content-Type']) {\n      // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n    var contentType = httpRequest.headers['Content-Type'];\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function (_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n        httpRequest.headers['Content-Type'] = contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n  /**\n   * @api private\n   */\n  computableChecksumOperations: {\n    putBucketCors: true,\n    putBucketLifecycle: true,\n    putBucketLifecycleConfiguration: true,\n    putBucketTagging: true,\n    deleteObjects: true,\n    putBucketReplication: true,\n    putObjectLegalHold: true,\n    putObjectRetention: true,\n    putObjectLockConfiguration: true\n  },\n  /**\n   * Checks whether checksums should be computed for the request.\n   * If the request requires checksums to be computed, this will always\n   * return true, otherwise it depends on whether {AWS.Config.computeChecksums}\n   * is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    if (this.computableChecksumOperations[req.operation]) return true;\n    if (!this.config.computeChecksums) return false;\n\n    // TODO: compute checksums for Stream objects\n    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) && typeof req.httpRequest.body !== 'string') {\n      return false;\n    }\n    var rules = req.service.api.operations[req.operation].input.members;\n\n    // Sha256 signing disabled, and not a presigned url\n    if (req.service.shouldDisableBodySigning(req) && !Object.prototype.hasOwnProperty.call(req.httpRequest.headers, 'presigned-expires')) {\n      if (rules.ContentMD5 && !req.params.ContentMD5) {\n        return true;\n      }\n    }\n\n    // V4 signer uses SHA256 signatures so only compute MD5 if it is required\n    if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;\n    }\n    if (rules.ContentMD5 && !req.params.ContentMD5) return true;\n  },\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * @see AWS.S3.willComputeChecksums\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function (key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n    if (this.dnsCompatibleBucketName(bucketName)) {\n      return this.config.sslEnabled && bucketName.match(/\\./) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return b.match(domain) && !b.match(ipAddress) && !b.match(dots) ? true : false;\n  },\n  /**\n   * @return [Boolean] whether response contains an error\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    var req = resp.request;\n    var httpResponse = resp.httpResponse;\n    if (operationsWith200StatusCodeError[req.operation] && httpResponse.body.toString().match('<Error>')) {\n      return false;\n    } else {\n      return httpResponse.statusCode < 300;\n    }\n  },\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] && error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket && request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error && regionRedirectErrorCodes.indexOf(error.code) != -1 && error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n    httpRequest.endpoint = new AWS.S3(newConfig).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n    var bucket = req.params.Bucket || null;\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n      if (region) {\n        if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n          req.service.bucketRegionCache[bucket] = region;\n        }\n      }\n    }\n    req.service.extractRequestIds(resp);\n  },\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n    var cachedRegion;\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n      if (data.Region && !region) {\n        region = data.Region;\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n    req.service.extractRequestIds(resp);\n  },\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n    if (!error || !bucket || error.region || req.operation === 'listObjects' || AWS.util.isNode() && req.operation === 'headBucket' || error.statusCode === 400 && req.operation !== 'headObject' || regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {\n      Bucket: bucket\n    };\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function () {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n  /**\n  * For browser only. If NetworkingError received, will attempt to obtain\n  * the bucket region.\n  *\n  * @api private\n  */\n  reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n    if (!error || error.code !== 'NetworkingError' || !bucket || request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!service.dnsCompatibleBucketName(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({\n        Bucket: bucket,\n        MaxKeys: 0\n      });\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n      getRegionReq.send(function () {\n        var region = service.bucketRegionCache[bucket] || null;\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n  },\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n  bucketRegionCache: {},\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n  clearBucketRegionCache: function (buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n    return bucketRegionCache;\n  },\n  /**\n   * Corrects request region if bucket's cached region is different\n   *\n   * @api private\n   */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(), {\n        code: 'InvalidParameterException',\n        message: 'The expiration must be a number, received ' + typeof expires\n      });\n    }\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n    if (callback) {\n      AWS.util.defer(function () {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n      self = this,\n      config = this.config,\n      endpoint = AWS.util.copy(this.endpoint);\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(config.credentials, config.region, bucket, params.Fields, params.Conditions, params.Expires)\n      };\n    }\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        }\n        callback(null, finalizePost());\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(credentials, region, bucket, fields, conditions, expiresInSeconds) {\n    var now = this.getSkewCorrectedDate();\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,' + ' region, and credentials');\n    }\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n    fields.Policy = this.preparePostPolicy(new Date(now.valueOf() + expiresInSeconds * 1000), conditions);\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true), fields.Policy, 'hex');\n    return fields;\n  },\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers;\n    // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {\n        code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'\n      });\n    }\n  },\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n    var hostname = this.endpoint.hostname;\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      params.CreateBucketConfiguration = {\n        LocationConstraint: this.config.region\n      };\n    }\n    return this.makeRequest('createBucket', params, callback);\n  },\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n    options = options || {};\n    options = AWS.util.merge(options || {}, {\n      service: this,\n      params: params\n    });\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  }\n});","map":{"version":3,"names":["AWS","require","v4Credentials","operationsWith200StatusCodeError","regionRedirectErrorCodes","util","update","S3","prototype","getSignatureVersion","request","defaultApiVersion","api","signatureVersion","userDefinedVersion","_originalConfig","regionDefinedVersion","config","isPresigned","getSignerClass","Signers","RequestSigner","getVersion","validateService","msg","messages","region","endpoint","s3BucketEndpoint","push","length","join","error","Error","name","message","shouldDisableBodySigning","signerClass","s3DisableBodySigning","V4","httpRequest","protocol","setupRequestListeners","prependListener","addListener","validateScheme","validateBucketEndpoint","correctBucketRegionFromCache","validateBucketName","addContentType","populateURI","computeContentMd5","computeSseCustomerKeyMd5","addExpect100Continue","removeListener","EventListeners","Core","VALIDATE_REGION","extractError","onAsync","requestBucketRegion","extractData","hoistPayloadMember","prepareSignedUrl","isBrowser","reqRegionForNetworkingError","COMPUTE_SHA256","disableBodySigning","req","params","scheme","sensitive","SSECustomerKey","CopySourceSSECustomerKey","code","Bucket","service","bucket","key","Key","slashIndex","indexOf","copy","prefix","substr","isValidAccelerateOperation","operation","invalidOperations","b","pathStyleBucketName","useAccelerateEndpoint","useDualstack","hostname","port","host","virtualHostedBucket","removeVirtualHostedBucketFromPath","path","encodedS3Key","uriEscapePath","replace","RegExp","len","headers","isNode","Body","stream","Stream","method","contentType","body","match","charset","replaceFn","_","charsetName","toUpperCase","computableChecksumOperations","putBucketCors","putBucketLifecycle","putBucketLifecycleConfiguration","putBucketTagging","deleteObjects","putBucketReplication","putObjectLegalHold","putObjectRetention","putObjectLockConfiguration","willComputeChecksums","computeChecksums","Buffer","isBuffer","rules","operations","input","members","Object","hasOwnProperty","call","ContentMD5","required","md5","crypto","keys","each","header","value","bucketName","s3ForcePathStyle","dnsCompatibleBucketName","sslEnabled","domain","ipAddress","dots","successfulResponse","resp","httpResponse","toString","statusCode","retryableError","_requestRegionForBucket","bucketRegionCache","updateReqBucketRegion","_super","Service","s3Config","newConfig","Host","_asm","currentState","data","LocationConstraint","clearBucketRegionCache","createBucketConfiguration","CreateBucketConfiguration","extractRequestIds","codes","cachedRegion","XML","Parser","parse","Region","Code","Message","done","reqOperation","reqParams","MaxKeys","regionReq","send","getRegionReq","listObjects","buckets","i","requestRegion","extendedRequestId","cfId","requestId","getSignedUrl","callback","expires","Expires","makeRequest","defer","presign","createPresignedPost","undefined","boundParams","self","pathname","finalizePost","url","urlFormat","fields","preparePostFields","credentials","Fields","Conditions","getCredentials","err","conditions","expiresInSeconds","now","getSkewCorrectedDate","slice","signingDate","date","iso8601","shortDate","scope","createScope","credential","accessKeyId","sessionToken","field","condition","Policy","preparePostPolicy","Date","valueOf","hmac","getSigningKey","expiration","base64","encode","JSON","stringify","noPresignedContentLength","ContentLength","createBucket","globalEndpoint","upload","options","merge","uploader","ManagedUpload"],"sources":["C:/Study/6805/React/reacthtml/node_modules/aws-sdk/lib/services/s3.js"],"sourcesContent":["var AWS = require('../core');\nvar v4Credentials = require('../signers/v4_credentials');\n\n// Pull in managed upload extension\nrequire('../s3/managed_upload');\n\n/**\n * @api private\n */\nvar operationsWith200StatusCodeError = {\n  'completeMultipartUpload': true,\n  'copyObject': true,\n  'uploadPartCopy': true\n};\n\n/**\n * @api private\n */\n var regionRedirectErrorCodes = [\n  'AuthorizationHeaderMalformed', // non-head operations on virtual-hosted global bucket endpoints\n  'BadRequest', // head operations on virtual-hosted global bucket endpoints\n  'PermanentRedirect', // non-head operations on path-style or regional endpoints\n  301 // head operations on path-style or regional endpoints\n ];\n\nAWS.util.update(AWS.S3.prototype, {\n  /**\n   * @api private\n   */\n  getSignatureVersion: function getSignatureVersion(request) {\n    var defaultApiVersion = this.api.signatureVersion;\n    var userDefinedVersion = this._originalConfig ? this._originalConfig.signatureVersion : null;\n    var regionDefinedVersion = this.config.signatureVersion;\n    var isPresigned = request ? request.isPresigned() : false;\n    /*\n      1) User defined version specified:\n        a) always return user defined version\n      2) No user defined version specified:\n        a) default to lowest version the region supports\n        b) If using presigned urls, default to lowest version the region supports\n    */\n    if (userDefinedVersion) {\n      userDefinedVersion = userDefinedVersion === 'v2' ? 's3' : userDefinedVersion;\n      return userDefinedVersion;\n    }\n    if (isPresigned !== true) {\n      defaultApiVersion = 'v4';\n    } else if (regionDefinedVersion) {\n      defaultApiVersion = regionDefinedVersion;\n    }\n    return defaultApiVersion;\n  },\n\n  /**\n   * @api private\n   */\n  getSignerClass: function getSignerClass(request) {\n    var signatureVersion = this.getSignatureVersion(request);\n    return AWS.Signers.RequestSigner.getVersion(signatureVersion);\n  },\n\n  /**\n   * @api private\n   */\n  validateService: function validateService() {\n    var msg;\n    var messages = [];\n\n    // default to us-east-1 when no region is provided\n    if (!this.config.region) this.config.region = 'us-east-1';\n\n    if (!this.config.endpoint && this.config.s3BucketEndpoint) {\n      messages.push('An endpoint must be provided when configuring ' +\n                    '`s3BucketEndpoint` to true.');\n    }\n    if (messages.length === 1) {\n      msg = messages[0];\n    } else if (messages.length > 1) {\n      msg = 'Multiple configuration errors:\\n' + messages.join('\\n');\n    }\n    if (msg) {\n      throw AWS.util.error(new Error(),\n        {name: 'InvalidEndpoint', message: msg});\n    }\n  },\n\n  /**\n   * @api private\n   */\n  shouldDisableBodySigning: function shouldDisableBodySigning(request) {\n    var signerClass = this.getSignerClass();\n    if (this.config.s3DisableBodySigning === true && signerClass === AWS.Signers.V4\n        && request.httpRequest.endpoint.protocol === 'https:') {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    var prependListener = true;\n    request.addListener('validate', this.validateScheme);\n    request.addListener('validate', this.validateBucketEndpoint);\n    request.addListener('validate', this.correctBucketRegionFromCache);\n    request.addListener('validate', this.validateBucketName, prependListener);\n\n    request.addListener('build', this.addContentType);\n    request.addListener('build', this.populateURI);\n    request.addListener('build', this.computeContentMd5);\n    request.addListener('build', this.computeSseCustomerKeyMd5);\n    request.addListener('afterBuild', this.addExpect100Continue);\n    request.removeListener('validate',\n      AWS.EventListeners.Core.VALIDATE_REGION);\n    request.addListener('extractError', this.extractError);\n    request.onAsync('extractError', this.requestBucketRegion);\n    request.addListener('extractData', this.extractData);\n    request.addListener('extractData', AWS.util.hoistPayloadMember);\n    request.addListener('beforePresign', this.prepareSignedUrl);\n    if (AWS.util.isBrowser()) {\n      request.onAsync('retry', this.reqRegionForNetworkingError);\n    }\n    if (this.shouldDisableBodySigning(request))  {\n      request.removeListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n      request.addListener('afterBuild', this.disableBodySigning);\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateScheme: function(req) {\n    var params = req.params,\n        scheme = req.httpRequest.endpoint.protocol,\n        sensitive = params.SSECustomerKey || params.CopySourceSSECustomerKey;\n    if (sensitive && scheme !== 'https:') {\n      var msg = 'Cannot send SSE keys over HTTP. Set \\'sslEnabled\\'' +\n        'to \\'true\\' in your configuration';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketEndpoint: function(req) {\n    if (!req.params.Bucket && req.service.config.s3BucketEndpoint) {\n      var msg = 'Cannot send requests to root API with `s3BucketEndpoint` set.';\n      throw AWS.util.error(new Error(),\n        { code: 'ConfigError', message: msg });\n    }\n  },\n\n  /**\n   * @api private\n   */\n  validateBucketName: function validateBucketName(req) {\n    var service = req.service;\n    var signatureVersion = service.getSignatureVersion(req);\n    var bucket = req.params && req.params.Bucket;\n    var key = req.params && req.params.Key;\n    var slashIndex = bucket && bucket.indexOf('/');\n    if (bucket && slashIndex >= 0) {\n      if (typeof key === 'string' && slashIndex > 0) {\n        req.params = AWS.util.copy(req.params);\n        // Need to include trailing slash to match sigv2 behavior\n        var prefix = bucket.substr(slashIndex + 1) || '';\n        req.params.Key = prefix + '/' + key;\n        req.params.Bucket = bucket.substr(0, slashIndex);\n      } else if (signatureVersion === 'v4') {\n        var msg = 'Bucket names cannot contain forward slashes. Bucket: ' + bucket;\n        throw AWS.util.error(new Error(),\n          { code: 'InvalidBucket', message: msg });\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  isValidAccelerateOperation: function isValidAccelerateOperation(operation) {\n    var invalidOperations = [\n      'createBucket',\n      'deleteBucket',\n      'listBuckets'\n    ];\n    return invalidOperations.indexOf(operation) === -1;\n  },\n\n\n  /**\n   * S3 prefers dns-compatible bucket names to be moved from the uri path\n   * to the hostname as a sub-domain.  This is not possible, even for dns-compat\n   * buckets when using SSL and the bucket name contains a dot ('.').  The\n   * ssl wildcard certificate is only 1-level deep.\n   *\n   * @api private\n   */\n  populateURI: function populateURI(req) {\n    var httpRequest = req.httpRequest;\n    var b = req.params.Bucket;\n    var service = req.service;\n    var endpoint = httpRequest.endpoint;\n    if (b) {\n      if (!service.pathStyleBucketName(b)) {\n        if (service.config.useAccelerateEndpoint && service.isValidAccelerateOperation(req.operation)) {\n          if (service.config.useDualstack) {\n            endpoint.hostname = b + '.s3-accelerate.dualstack.amazonaws.com';\n          } else {\n            endpoint.hostname = b + '.s3-accelerate.amazonaws.com';\n          }\n        } else if (!service.config.s3BucketEndpoint) {\n          endpoint.hostname =\n            b + '.' + endpoint.hostname;\n        }\n\n        var port = endpoint.port;\n        if (port !== 80 && port !== 443) {\n          endpoint.host = endpoint.hostname + ':' +\n            endpoint.port;\n        } else {\n          endpoint.host = endpoint.hostname;\n        }\n\n        httpRequest.virtualHostedBucket = b; // needed for signing the request\n        service.removeVirtualHostedBucketFromPath(req);\n      }\n    }\n  },\n\n  /**\n   * Takes the bucket name out of the path if bucket is virtual-hosted\n   *\n   * @api private\n   */\n  removeVirtualHostedBucketFromPath: function removeVirtualHostedBucketFromPath(req) {\n    var httpRequest = req.httpRequest;\n    var bucket = httpRequest.virtualHostedBucket;\n    if (bucket && httpRequest.path) {\n      if (req.params && req.params.Key) {\n        var encodedS3Key = '/' + AWS.util.uriEscapePath(req.params.Key);\n        if (httpRequest.path.indexOf(encodedS3Key) === 0 && (httpRequest.path.length === encodedS3Key.length || httpRequest.path[encodedS3Key.length] === '?')) {\n          //path only contains key or path contains only key and querystring\n          return;\n        }\n      }\n      httpRequest.path = httpRequest.path.replace(new RegExp('/' + bucket), '');\n      if (httpRequest.path[0] !== '/') {\n        httpRequest.path = '/' + httpRequest.path;\n      }\n    }\n  },\n\n  /**\n   * Adds Expect: 100-continue header if payload is greater-or-equal 1MB\n   * @api private\n   */\n  addExpect100Continue: function addExpect100Continue(req) {\n    var len = req.httpRequest.headers['Content-Length'];\n    if (AWS.util.isNode() && (len >= 1024 * 1024 || req.params.Body instanceof AWS.util.stream.Stream)) {\n      req.httpRequest.headers['Expect'] = '100-continue';\n    }\n  },\n\n  /**\n   * Adds a default content type if none is supplied.\n   *\n   * @api private\n   */\n  addContentType: function addContentType(req) {\n    var httpRequest = req.httpRequest;\n    if (httpRequest.method === 'GET' || httpRequest.method === 'HEAD') {\n      // Content-Type is not set in GET/HEAD requests\n      delete httpRequest.headers['Content-Type'];\n      return;\n    }\n\n    if (!httpRequest.headers['Content-Type']) { // always have a Content-Type\n      httpRequest.headers['Content-Type'] = 'application/octet-stream';\n    }\n\n    var contentType = httpRequest.headers['Content-Type'];\n    if (AWS.util.isBrowser()) {\n      if (typeof httpRequest.body === 'string' && !contentType.match(/;\\s*charset=/)) {\n        var charset = '; charset=UTF-8';\n        httpRequest.headers['Content-Type'] += charset;\n      } else {\n        var replaceFn = function(_, prefix, charsetName) {\n          return prefix + charsetName.toUpperCase();\n        };\n\n        httpRequest.headers['Content-Type'] =\n          contentType.replace(/(;\\s*charset=)(.+)$/, replaceFn);\n      }\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computableChecksumOperations: {\n    putBucketCors: true,\n    putBucketLifecycle: true,\n    putBucketLifecycleConfiguration: true,\n    putBucketTagging: true,\n    deleteObjects: true,\n    putBucketReplication: true,\n    putObjectLegalHold: true,\n    putObjectRetention: true,\n    putObjectLockConfiguration: true\n  },\n\n  /**\n   * Checks whether checksums should be computed for the request.\n   * If the request requires checksums to be computed, this will always\n   * return true, otherwise it depends on whether {AWS.Config.computeChecksums}\n   * is set.\n   *\n   * @param req [AWS.Request] the request to check against\n   * @return [Boolean] whether to compute checksums for a request.\n   * @api private\n   */\n  willComputeChecksums: function willComputeChecksums(req) {\n    if (this.computableChecksumOperations[req.operation]) return true;\n    if (!this.config.computeChecksums) return false;\n\n    // TODO: compute checksums for Stream objects\n    if (!AWS.util.Buffer.isBuffer(req.httpRequest.body) &&\n        typeof req.httpRequest.body !== 'string') {\n      return false;\n    }\n\n    var rules = req.service.api.operations[req.operation].input.members;\n\n    // Sha256 signing disabled, and not a presigned url\n    if (req.service.shouldDisableBodySigning(req) && !Object.prototype.hasOwnProperty.call(req.httpRequest.headers, 'presigned-expires')) {\n      if (rules.ContentMD5 && !req.params.ContentMD5) {\n        return true;\n      }\n    }\n\n    // V4 signer uses SHA256 signatures so only compute MD5 if it is required\n    if (req.service.getSignerClass(req) === AWS.Signers.V4) {\n      if (rules.ContentMD5 && !rules.ContentMD5.required) return false;\n    }\n\n    if (rules.ContentMD5 && !req.params.ContentMD5) return true;\n  },\n\n  /**\n   * A listener that computes the Content-MD5 and sets it in the header.\n   * @see AWS.S3.willComputeChecksums\n   * @api private\n   */\n  computeContentMd5: function computeContentMd5(req) {\n    if (req.service.willComputeChecksums(req)) {\n      var md5 = AWS.util.crypto.md5(req.httpRequest.body, 'base64');\n      req.httpRequest.headers['Content-MD5'] = md5;\n    }\n  },\n\n  /**\n   * @api private\n   */\n  computeSseCustomerKeyMd5: function computeSseCustomerKeyMd5(req) {\n    var keys = {\n      SSECustomerKey: 'x-amz-server-side-encryption-customer-key-MD5',\n      CopySourceSSECustomerKey: 'x-amz-copy-source-server-side-encryption-customer-key-MD5'\n    };\n    AWS.util.each(keys, function(key, header) {\n      if (req.params[key]) {\n        var value = AWS.util.crypto.md5(req.params[key], 'base64');\n        req.httpRequest.headers[header] = value;\n      }\n    });\n  },\n\n  /**\n   * Returns true if the bucket name should be left in the URI path for\n   * a request to S3.  This function takes into account the current\n   * endpoint protocol (e.g. http or https).\n   *\n   * @api private\n   */\n  pathStyleBucketName: function pathStyleBucketName(bucketName) {\n    // user can force path style requests via the configuration\n    if (this.config.s3ForcePathStyle) return true;\n    if (this.config.s3BucketEndpoint) return false;\n\n    if (this.dnsCompatibleBucketName(bucketName)) {\n      return (this.config.sslEnabled && bucketName.match(/\\./)) ? true : false;\n    } else {\n      return true; // not dns compatible names must always use path style\n    }\n  },\n\n  /**\n   * Returns true if the bucket name is DNS compatible.  Buckets created\n   * outside of the classic region MUST be DNS compatible.\n   *\n   * @api private\n   */\n  dnsCompatibleBucketName: function dnsCompatibleBucketName(bucketName) {\n    var b = bucketName;\n    var domain = new RegExp(/^[a-z0-9][a-z0-9\\.\\-]{1,61}[a-z0-9]$/);\n    var ipAddress = new RegExp(/(\\d+\\.){3}\\d+/);\n    var dots = new RegExp(/\\.\\./);\n    return (b.match(domain) && !b.match(ipAddress) && !b.match(dots)) ? true : false;\n  },\n\n  /**\n   * @return [Boolean] whether response contains an error\n   * @api private\n   */\n  successfulResponse: function successfulResponse(resp) {\n    var req = resp.request;\n    var httpResponse = resp.httpResponse;\n    if (operationsWith200StatusCodeError[req.operation] &&\n        httpResponse.body.toString().match('<Error>')) {\n      return false;\n    } else {\n      return httpResponse.statusCode < 300;\n    }\n  },\n\n  /**\n   * @return [Boolean] whether the error can be retried\n   * @api private\n   */\n  retryableError: function retryableError(error, request) {\n    if (operationsWith200StatusCodeError[request.operation] &&\n        error.statusCode === 200) {\n      return true;\n    } else if (request._requestRegionForBucket &&\n        request.service.bucketRegionCache[request._requestRegionForBucket]) {\n      return false;\n    } else if (error && error.code === 'RequestTimeout') {\n      return true;\n    } else if (error &&\n        regionRedirectErrorCodes.indexOf(error.code) != -1 &&\n        error.region && error.region != request.httpRequest.region) {\n      request.httpRequest.region = error.region;\n      if (error.statusCode === 301) {\n        request.service.updateReqBucketRegion(request);\n      }\n      return true;\n    } else {\n      var _super = AWS.Service.prototype.retryableError;\n      return _super.call(this, error, request);\n    }\n  },\n\n  /**\n   * Updates httpRequest with region. If region is not provided, then\n   * the httpRequest will be updated based on httpRequest.region\n   *\n   * @api private\n   */\n  updateReqBucketRegion: function updateReqBucketRegion(request, region) {\n    var httpRequest = request.httpRequest;\n    if (typeof region === 'string' && region.length) {\n      httpRequest.region = region;\n    }\n    if (!httpRequest.endpoint.host.match(/s3(?!-accelerate).*\\.amazonaws\\.com$/)) {\n      return;\n    }\n    var service = request.service;\n    var s3Config = service.config;\n    var s3BucketEndpoint = s3Config.s3BucketEndpoint;\n    if (s3BucketEndpoint) {\n      delete s3Config.s3BucketEndpoint;\n    }\n    var newConfig = AWS.util.copy(s3Config);\n    delete newConfig.endpoint;\n    newConfig.region = httpRequest.region;\n\n    httpRequest.endpoint = (new AWS.S3(newConfig)).endpoint;\n    service.populateURI(request);\n    s3Config.s3BucketEndpoint = s3BucketEndpoint;\n    httpRequest.headers.Host = httpRequest.endpoint.host;\n\n    if (request._asm.currentState === 'validate') {\n      request.removeListener('build', service.populateURI);\n      request.addListener('build', service.removeVirtualHostedBucketFromPath);\n    }\n  },\n\n  /**\n   * Provides a specialized parser for getBucketLocation -- all other\n   * operations are parsed by the super class.\n   *\n   * @api private\n   */\n  extractData: function extractData(resp) {\n    var req = resp.request;\n    if (req.operation === 'getBucketLocation') {\n      var match = resp.httpResponse.body.toString().match(/>(.+)<\\/Location/);\n      delete resp.data['_'];\n      if (match) {\n        resp.data.LocationConstraint = match[1];\n      } else {\n        resp.data.LocationConstraint = '';\n      }\n    }\n    var bucket = req.params.Bucket || null;\n    if (req.operation === 'deleteBucket' && typeof bucket === 'string' && !resp.error) {\n      req.service.clearBucketRegionCache(bucket);\n    } else {\n      var headers = resp.httpResponse.headers || {};\n      var region = headers['x-amz-bucket-region'] || null;\n      if (!region && req.operation === 'createBucket' && !resp.error) {\n        var createBucketConfiguration = req.params.CreateBucketConfiguration;\n        if (!createBucketConfiguration) {\n          region = 'us-east-1';\n        } else if (createBucketConfiguration.LocationConstraint === 'EU') {\n          region = 'eu-west-1';\n        } else {\n          region = createBucketConfiguration.LocationConstraint;\n        }\n      }\n      if (region) {\n          if (bucket && region !== req.service.bucketRegionCache[bucket]) {\n            req.service.bucketRegionCache[bucket] = region;\n          }\n      }\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * Extracts an error object from the http response.\n   *\n   * @api private\n   */\n  extractError: function extractError(resp) {\n    var codes = {\n      304: 'NotModified',\n      403: 'Forbidden',\n      400: 'BadRequest',\n      404: 'NotFound'\n    };\n\n    var req = resp.request;\n    var code = resp.httpResponse.statusCode;\n    var body = resp.httpResponse.body || '';\n\n    var headers = resp.httpResponse.headers || {};\n    var region = headers['x-amz-bucket-region'] || null;\n    var bucket = req.params.Bucket || null;\n    var bucketRegionCache = req.service.bucketRegionCache;\n    if (region && bucket && region !== bucketRegionCache[bucket]) {\n      bucketRegionCache[bucket] = region;\n    }\n\n    var cachedRegion;\n    if (codes[code] && body.length === 0) {\n      if (bucket && !region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n      resp.error = AWS.util.error(new Error(), {\n        code: codes[code],\n        message: null,\n        region: region\n      });\n    } else {\n      var data = new AWS.XML.Parser().parse(body.toString());\n\n      if (data.Region && !region) {\n        region = data.Region;\n        if (bucket && region !== bucketRegionCache[bucket]) {\n          bucketRegionCache[bucket] = region;\n        }\n      } else if (bucket && !region && !data.Region) {\n        cachedRegion = bucketRegionCache[bucket] || null;\n        if (cachedRegion !== req.httpRequest.region) {\n          region = cachedRegion;\n        }\n      }\n\n      resp.error = AWS.util.error(new Error(), {\n        code: data.Code || code,\n        message: data.Message || null,\n        region: region\n      });\n    }\n    req.service.extractRequestIds(resp);\n  },\n\n  /**\n   * If region was not obtained synchronously, then send async request\n   * to get bucket region for errors resulting from wrong region.\n   *\n   * @api private\n   */\n  requestBucketRegion: function requestBucketRegion(resp, done) {\n    var error = resp.error;\n    var req = resp.request;\n    var bucket = req.params.Bucket || null;\n\n    if (!error || !bucket || error.region || req.operation === 'listObjects' ||\n        (AWS.util.isNode() && req.operation === 'headBucket') ||\n        (error.statusCode === 400 && req.operation !== 'headObject') ||\n        regionRedirectErrorCodes.indexOf(error.code) === -1) {\n      return done();\n    }\n    var reqOperation = AWS.util.isNode() ? 'headBucket' : 'listObjects';\n    var reqParams = {Bucket: bucket};\n    if (reqOperation === 'listObjects') reqParams.MaxKeys = 0;\n    var regionReq = req.service[reqOperation](reqParams);\n    regionReq._requestRegionForBucket = bucket;\n    regionReq.send(function() {\n      var region = req.service.bucketRegionCache[bucket] || null;\n      error.region = region;\n      done();\n    });\n  },\n\n   /**\n   * For browser only. If NetworkingError received, will attempt to obtain\n   * the bucket region.\n   *\n   * @api private\n   */\n   reqRegionForNetworkingError: function reqRegionForNetworkingError(resp, done) {\n    if (!AWS.util.isBrowser()) {\n      return done();\n    }\n    var error = resp.error;\n    var request = resp.request;\n    var bucket = request.params.Bucket;\n    if (!error || error.code !== 'NetworkingError' || !bucket ||\n        request.httpRequest.region === 'us-east-1') {\n      return done();\n    }\n    var service = request.service;\n    var bucketRegionCache = service.bucketRegionCache;\n    var cachedRegion = bucketRegionCache[bucket] || null;\n\n    if (cachedRegion && cachedRegion !== request.httpRequest.region) {\n      service.updateReqBucketRegion(request, cachedRegion);\n      done();\n    } else if (!service.dnsCompatibleBucketName(bucket)) {\n      service.updateReqBucketRegion(request, 'us-east-1');\n      if (bucketRegionCache[bucket] !== 'us-east-1') {\n        bucketRegionCache[bucket] = 'us-east-1';\n      }\n      done();\n    } else if (request.httpRequest.virtualHostedBucket) {\n      var getRegionReq = service.listObjects({Bucket: bucket, MaxKeys: 0});\n      service.updateReqBucketRegion(getRegionReq, 'us-east-1');\n      getRegionReq._requestRegionForBucket = bucket;\n\n      getRegionReq.send(function() {\n        var region = service.bucketRegionCache[bucket] || null;\n        if (region && region !== request.httpRequest.region) {\n          service.updateReqBucketRegion(request, region);\n        }\n        done();\n      });\n    } else {\n      // DNS-compatible path-style\n      // (s3ForcePathStyle or bucket name with dot over https)\n      // Cannot obtain region information for this case\n      done();\n    }\n   },\n\n  /**\n   * Cache for bucket region.\n   *\n   * @api private\n   */\n   bucketRegionCache: {},\n\n  /**\n   * Clears bucket region cache.\n   *\n   * @api private\n   */\n   clearBucketRegionCache: function(buckets) {\n    var bucketRegionCache = this.bucketRegionCache;\n    if (!buckets) {\n      buckets = Object.keys(bucketRegionCache);\n    } else if (typeof buckets === 'string') {\n      buckets = [buckets];\n    }\n    for (var i = 0; i < buckets.length; i++) {\n      delete bucketRegionCache[buckets[i]];\n    }\n    return bucketRegionCache;\n   },\n\n   /**\n    * Corrects request region if bucket's cached region is different\n    *\n    * @api private\n    */\n  correctBucketRegionFromCache: function correctBucketRegionFromCache(req) {\n    var bucket = req.params.Bucket || null;\n    if (bucket) {\n      var service = req.service;\n      var requestRegion = req.httpRequest.region;\n      var cachedRegion = service.bucketRegionCache[bucket];\n      if (cachedRegion && cachedRegion !== requestRegion) {\n        service.updateReqBucketRegion(req, cachedRegion);\n      }\n    }\n  },\n\n  /**\n   * Extracts S3 specific request ids from the http response.\n   *\n   * @api private\n   */\n  extractRequestIds: function extractRequestIds(resp) {\n    var extendedRequestId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-id-2'] : null;\n    var cfId = resp.httpResponse.headers ? resp.httpResponse.headers['x-amz-cf-id'] : null;\n    resp.extendedRequestId = extendedRequestId;\n    resp.cfId = cfId;\n\n    if (resp.error) {\n      resp.error.requestId = resp.requestId || null;\n      resp.error.extendedRequestId = extendedRequestId;\n      resp.error.cfId = cfId;\n    }\n  },\n\n  /**\n   * Get a pre-signed URL for a given operation name.\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   * @note Not all operation parameters are supported when using pre-signed\n   *   URLs. Certain parameters, such as `SSECustomerKey`, `ACL`, `Expires`,\n   *   `ContentLength`, or `Tagging` must be provided as headers when sending a\n   *   request. If you are using pre-signed URLs to upload from a browser and\n   *   need to use these fields, see {createPresignedPost}.\n   * @note The default signer allows altering the request by adding corresponding\n   *   headers to set some parameters (e.g. Range) and these added parameters\n   *   won't be signed. You must use signatureVersion v4 to to include these\n   *   parameters in the signed portion of the URL and enforce exact matching\n   *   between headers and signed params in the URL.\n   * @note This operation cannot be used with a promise. See note above regarding\n   *   asynchronous credentials and use with a callback.\n   * @param operation [String] the name of the operation to call\n   * @param params [map] parameters to pass to the operation. See the given\n   *   operation for the expected operation parameters. In addition, you can\n   *   also pass the \"Expires\" parameter to inform S3 how long the URL should\n   *   work for.\n   * @option params Expires [Integer] (900) the number of seconds to expire\n   *   the pre-signed URL operation in. Defaults to 15 minutes.\n   * @param callback [Function] if a callback is provided, this function will\n   *   pass the URL as the second parameter (after the error parameter) to\n   *   the callback function.\n   * @return [String] if called synchronously (with no callback), returns the\n   *   signed URL.\n   * @return [null] nothing is returned if a callback is provided.\n   * @example Pre-signing a getObject operation (synchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url);\n   * @example Pre-signing a putObject (asynchronously)\n   *   var params = {Bucket: 'bucket', Key: 'key'};\n   *   s3.getSignedUrl('putObject', params, function (err, url) {\n   *     console.log('The URL is', url);\n   *   });\n   * @example Pre-signing a putObject operation with a specific payload\n   *   var params = {Bucket: 'bucket', Key: 'key', Body: 'body'};\n   *   var url = s3.getSignedUrl('putObject', params);\n   *   console.log('The URL is', url);\n   * @example Passing in a 1-minute expiry time for a pre-signed URL\n   *   var params = {Bucket: 'bucket', Key: 'key', Expires: 60};\n   *   var url = s3.getSignedUrl('getObject', params);\n   *   console.log('The URL is', url); // expires in 60 seconds\n   */\n  getSignedUrl: function getSignedUrl(operation, params, callback) {\n    params = AWS.util.copy(params || {});\n    var expires = params.Expires || 900;\n\n    if (typeof expires !== 'number') {\n      throw AWS.util.error(new Error(),\n        { code: 'InvalidParameterException', message: 'The expiration must be a number, received ' + typeof expires });\n    }\n\n    delete params.Expires; // we can't validate this\n    var request = this.makeRequest(operation, params);\n\n    if (callback) {\n      AWS.util.defer(function() {\n        request.presign(expires, callback);\n      });\n    } else {\n      return request.presign(expires, callback);\n    }\n  },\n\n\n  /**\n   * Get a pre-signed POST policy to support uploading to S3 directly from an\n   * HTML form.\n   *\n   * @param params [map]\n   * @option params Bucket [String]     The bucket to which the post should be\n   *                                    uploaded\n   * @option params Expires [Integer]   (3600) The number of seconds for which\n   *                                    the presigned policy should be valid.\n   * @option params Conditions [Array]  An array of conditions that must be met\n   *                                    for the presigned policy to allow the\n   *                                    upload. This can include required tags,\n   *                                    the accepted range for content lengths,\n   *                                    etc.\n   * @see http://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-HTTPPOSTConstructPolicy.html\n   * @option params Fields [map]        Fields to include in the form. All\n   *                                    values passed in as fields will be\n   *                                    signed as exact match conditions.\n   * @param callback [Function]\n   *\n   * @note All fields passed in when creating presigned post data will be signed\n   *   as exact match conditions. Any fields that will be interpolated by S3\n   *   must be added to the fields hash after signing, and an appropriate\n   *   condition for such fields must be explicitly added to the Conditions\n   *   array passed to this function before signing.\n   *\n   * @example Presiging post data with a known key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Fields: {\n   *       key: 'key'\n   *     }\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @example Presigning post data with an interpolated key\n   *   var params = {\n   *     Bucket: 'bucket',\n   *     Conditions: [\n   *       ['starts-with', '$key', 'path/to/uploads/']\n   *     ]\n   *   };\n   *   s3.createPresignedPost(params, function(err, data) {\n   *     if (err) {\n   *       console.error('Presigning post data encountered an error', err);\n   *     } else {\n   *       data.Fields.key = 'path/to/uploads/${filename}';\n   *       console.log('The post data is', data);\n   *     }\n   *   });\n   *\n   * @note You must ensure that you have static or previously resolved\n   *   credentials if you call this method synchronously (with no callback),\n   *   otherwise it may not properly sign the request. If you cannot guarantee\n   *   this (you are using an asynchronous credential provider, i.e., EC2\n   *   IAM roles), you should always call this method with an asynchronous\n   *   callback.\n   *\n   * @return [map]  If called synchronously (with no callback), returns a hash\n   *                with the url to set as the form action and a hash of fields\n   *                to include in the form.\n   * @return [null] Nothing is returned if a callback is provided.\n   *\n   * @callback callback function (err, data)\n   *  @param err [Error] the error object returned from the policy signer\n   *  @param data [map] The data necessary to construct an HTML form\n   *  @param data.url [String] The URL to use as the action of the form\n   *  @param data.fields [map] A hash of fields that must be included in the\n   *                           form for the upload to succeed. This hash will\n   *                           include the signed POST policy, your access key\n   *                           ID and security token (if present), etc. These\n   *                           may be safely included as input elements of type\n   *                           'hidden.'\n   */\n  createPresignedPost: function createPresignedPost(params, callback) {\n    if (typeof params === 'function' && callback === undefined) {\n      callback = params;\n      params = null;\n    }\n\n    params = AWS.util.copy(params || {});\n    var boundParams = this.config.params || {};\n    var bucket = params.Bucket || boundParams.Bucket,\n      self = this,\n      config = this.config,\n      endpoint = AWS.util.copy(this.endpoint);\n    if (!config.s3BucketEndpoint) {\n      endpoint.pathname = '/' + bucket;\n    }\n\n    function finalizePost() {\n      return {\n        url: AWS.util.urlFormat(endpoint),\n        fields: self.preparePostFields(\n          config.credentials,\n          config.region,\n          bucket,\n          params.Fields,\n          params.Conditions,\n          params.Expires\n        )\n      };\n    }\n\n    if (callback) {\n      config.getCredentials(function (err) {\n        if (err) {\n          callback(err);\n        }\n\n        callback(null, finalizePost());\n      });\n    } else {\n      return finalizePost();\n    }\n  },\n\n  /**\n   * @api private\n   */\n  preparePostFields: function preparePostFields(\n    credentials,\n    region,\n    bucket,\n    fields,\n    conditions,\n    expiresInSeconds\n  ) {\n    var now = this.getSkewCorrectedDate();\n    if (!credentials || !region || !bucket) {\n      throw new Error('Unable to create a POST object policy without a bucket,'\n        + ' region, and credentials');\n    }\n    fields = AWS.util.copy(fields || {});\n    conditions = (conditions || []).slice(0);\n    expiresInSeconds = expiresInSeconds || 3600;\n\n    var signingDate = AWS.util.date.iso8601(now).replace(/[:\\-]|\\.\\d{3}/g, '');\n    var shortDate = signingDate.substr(0, 8);\n    var scope = v4Credentials.createScope(shortDate, region, 's3');\n    var credential = credentials.accessKeyId + '/' + scope;\n\n    fields['bucket'] = bucket;\n    fields['X-Amz-Algorithm'] = 'AWS4-HMAC-SHA256';\n    fields['X-Amz-Credential'] = credential;\n    fields['X-Amz-Date'] = signingDate;\n    if (credentials.sessionToken) {\n      fields['X-Amz-Security-Token'] = credentials.sessionToken;\n    }\n    for (var field in fields) {\n      if (fields.hasOwnProperty(field)) {\n        var condition = {};\n        condition[field] = fields[field];\n        conditions.push(condition);\n      }\n    }\n\n    fields.Policy = this.preparePostPolicy(\n      new Date(now.valueOf() + expiresInSeconds * 1000),\n      conditions\n    );\n    fields['X-Amz-Signature'] = AWS.util.crypto.hmac(\n      v4Credentials.getSigningKey(credentials, shortDate, region, 's3', true),\n      fields.Policy,\n      'hex'\n    );\n\n    return fields;\n  },\n\n  /**\n   * @api private\n   */\n  preparePostPolicy: function preparePostPolicy(expiration, conditions) {\n    return AWS.util.base64.encode(JSON.stringify({\n      expiration: AWS.util.date.iso8601(expiration),\n      conditions: conditions\n    }));\n  },\n\n  /**\n   * @api private\n   */\n  prepareSignedUrl: function prepareSignedUrl(request) {\n    request.addListener('validate', request.service.noPresignedContentLength);\n    request.removeListener('build', request.service.addContentType);\n    if (!request.params.Body) {\n      // no Content-MD5/SHA-256 if body is not provided\n      request.removeListener('build', request.service.computeContentMd5);\n    } else {\n      request.addListener('afterBuild', AWS.EventListeners.Core.COMPUTE_SHA256);\n    }\n  },\n\n  /**\n   * @api private\n   * @param request\n   */\n  disableBodySigning: function disableBodySigning(request) {\n    var headers = request.httpRequest.headers;\n    // Add the header to anything that isn't a presigned url, unless that presigned url had a body defined\n    if (!Object.prototype.hasOwnProperty.call(headers, 'presigned-expires')) {\n      headers['X-Amz-Content-Sha256'] = 'UNSIGNED-PAYLOAD';\n    }\n  },\n\n  /**\n   * @api private\n   */\n  noPresignedContentLength: function noPresignedContentLength(request) {\n    if (request.params.ContentLength !== undefined) {\n      throw AWS.util.error(new Error(), {code: 'UnexpectedParameter',\n        message: 'ContentLength is not supported in pre-signed URLs.'});\n    }\n  },\n\n  createBucket: function createBucket(params, callback) {\n    // When creating a bucket *outside* the classic region, the location\n    // constraint must be set for the bucket and it must match the endpoint.\n    // This chunk of code will set the location constraint param based\n    // on the region (when possible), but it will not override a passed-in\n    // location constraint.\n    if (typeof params === 'function' || !params) {\n      callback = callback || params;\n      params = {};\n    }\n    var hostname = this.endpoint.hostname;\n    if (hostname !== this.api.globalEndpoint && !params.CreateBucketConfiguration) {\n      params.CreateBucketConfiguration = { LocationConstraint: this.config.region };\n    }\n    return this.makeRequest('createBucket', params, callback);\n  },\n\n  /**\n   * @see AWS.S3.ManagedUpload\n   * @overload upload(params = {}, [options], [callback])\n   *   Uploads an arbitrarily sized buffer, blob, or stream, using intelligent\n   *   concurrent handling of parts if the payload is large enough. You can\n   *   configure the concurrent queue size by setting `options`. Note that this\n   *   is the only operation for which the SDK can retry requests with stream\n   *   bodies.\n   *\n   *   @param (see AWS.S3.putObject)\n   *   @option (see AWS.S3.ManagedUpload.constructor)\n   *   @return [AWS.S3.ManagedUpload] the managed upload object that can call\n   *     `send()` or track progress.\n   *   @example Uploading a stream object\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     s3.upload(params, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   *   @example Uploading a stream with concurrency of 1 and partSize of 10mb\n   *     var params = {Bucket: 'bucket', Key: 'key', Body: stream};\n   *     var options = {partSize: 10 * 1024 * 1024, queueSize: 1};\n   *     s3.upload(params, options, function(err, data) {\n   *       console.log(err, data);\n   *     });\n   * @callback callback function(err, data)\n   *   @param err [Error] an error or null if no error occurred.\n   *   @param data [map] The response data from the successful upload:\n   *   @param data.Location [String] the URL of the uploaded object\n   *   @param data.ETag [String] the ETag of the uploaded object\n   *   @param data.Bucket [String]  the bucket to which the object was uploaded\n   *   @param data.Key [String] the key to which the object was uploaded\n   */\n  upload: function upload(params, options, callback) {\n    if (typeof options === 'function' && callback === undefined) {\n      callback = options;\n      options = null;\n    }\n\n    options = options || {};\n    options = AWS.util.merge(options || {}, {service: this, params: params});\n\n    var uploader = new AWS.S3.ManagedUpload(options);\n    if (typeof callback === 'function') uploader.send(callback);\n    return uploader;\n  }\n});\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}