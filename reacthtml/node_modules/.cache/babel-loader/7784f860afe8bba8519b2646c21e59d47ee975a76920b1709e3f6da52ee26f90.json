{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { ConsoleLogger as Logger } from './Logger';\nimport { AWS } from './Facet';\nvar logger = new Logger('Signer'),\n  url = require('url'),\n  crypto = AWS['util'].crypto;\nvar DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nvar IOT_SERVICE_NAME = 'iotdevicegateway';\nvar encrypt = function (key, src, encoding) {\n  return crypto.lib.createHmac('sha256', key).update(src, 'utf8').digest(encoding);\n};\nvar hash = function (src) {\n  var arg = src || '';\n  return crypto.createHash('sha256').update(arg, 'utf8').digest('hex');\n};\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\nvar escape_RFC3986 = function (component) {\n  return component.replace(/[!'()*]/g, function (c) {\n    return '%' + c.charCodeAt(0).toString(16).toUpperCase();\n  });\n};\n/**\n * @private\n * Create canonical query string\n *\n */\nvar canonical_query = function (query) {\n  if (!query || query.length === 0) {\n    return '';\n  }\n  return query.split('&').map(function (e) {\n    var key_val = e.split('=');\n    if (key_val.length === 1) {\n      return e;\n    } else {\n      var reencoded_val = escape_RFC3986(key_val[1]);\n      return key_val[0] + '=' + reencoded_val;\n    }\n  }).sort(function (a, b) {\n    var key_a = a.split('=')[0];\n    var key_b = b.split('=')[0];\n    if (key_a === key_b) {\n      return a < b ? -1 : 1;\n    } else {\n      return key_a < key_b ? -1 : 1;\n    }\n  }).join('&');\n};\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\nvar canonical_headers = function (headers) {\n  if (!headers || Object.keys(headers).length === 0) {\n    return '';\n  }\n  return Object.keys(headers).map(function (key) {\n    return {\n      key: key.toLowerCase(),\n      value: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : ''\n    };\n  }).sort(function (a, b) {\n    return a.key < b.key ? -1 : 1;\n  }).map(function (item) {\n    return item.key + ':' + item.value;\n  }).join('\\n') + '\\n';\n};\n/**\n * List of header keys included in the canonical headers.\n * @access private\n */\nvar signed_headers = function (headers) {\n  return Object.keys(headers).map(function (key) {\n    return key.toLowerCase();\n  }).sort().join(';');\n};\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\nvar canonical_request = function (request) {\n  var url_info = url.parse(request.url);\n  return [request.method || '/', encodeURIComponent(url_info.pathname).replace(/%2F/gi, '/'), canonical_query(url_info.query), canonical_headers(request.headers), signed_headers(request.headers), hash(request.data)].join('\\n');\n};\nvar parse_service_info = function (request) {\n  var url_info = url.parse(request.url),\n    host = url_info.host;\n  var matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n  var parsed = (matched || []).slice(1, 3);\n  if (parsed[1] === 'es') {\n    // Elastic Search\n    parsed = parsed.reverse();\n  }\n  return {\n    service: request.service || parsed[0],\n    region: request.region || parsed[1]\n  };\n};\nvar credential_scope = function (d_str, region, service) {\n  return [d_str, region, service, 'aws4_request'].join('/');\n};\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\nvar string_to_sign = function (algorithm, canonical_request, dt_str, scope) {\n  return [algorithm, dt_str, scope, hash(canonical_request)].join('\\n');\n};\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\nvar get_signing_key = function (secret_key, d_str, service_info) {\n  logger.debug(service_info);\n  var k = 'AWS4' + secret_key,\n    k_date = encrypt(k, d_str),\n    k_region = encrypt(k_date, service_info.region),\n    k_service = encrypt(k_region, service_info.service),\n    k_signing = encrypt(k_service, 'aws4_request');\n  return k_signing;\n};\nvar get_signature = function (signing_key, str_to_sign) {\n  return encrypt(signing_key, str_to_sign, 'hex');\n};\n/**\n * @private\n * Create authorization header\n * Refer to\n * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n */\nvar get_authorization_header = function (algorithm, access_key, scope, signed_headers, signature) {\n  return [algorithm + ' ' + 'Credential=' + access_key + '/' + scope, 'SignedHeaders=' + signed_headers, 'Signature=' + signature].join(', ');\n};\n/**\n * AWS request signer.\n * Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html|Signature Version 4}\n *\n * @class Signer\n */\nvar Signer = /** @class */function () {\n  function Signer() {}\n  /**\n  * Sign a HTTP request, add 'Authorization' header to request param\n  * @method sign\n  * @memberof Signer\n  * @static\n  *\n  * @param {object} request - HTTP request object\n  <pre>\n  request: {\n      method: GET | POST | PUT ...\n      url: ...,\n      headers: {\n          header1: ...\n      },\n      data: data\n  }\n  </pre>\n  * @param {object} access_info - AWS access credential info\n  <pre>\n  access_info: {\n      access_key: ...,\n      secret_key: ...,\n      session_token: ...\n  }\n  </pre>\n  * @param {object} [service_info] - AWS service type and region, optional,\n  *                                  if not provided then parse out from url\n  <pre>\n  service_info: {\n      service: ...,\n      region: ...\n  }\n  </pre>\n  *\n  * @returns {object} Signed HTTP request\n  */\n  Signer.sign = function (request, access_info, service_info) {\n    if (service_info === void 0) {\n      service_info = null;\n    }\n    request.headers = request.headers || {};\n    // datetime string and date string\n    var dt = new Date(),\n      dt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''),\n      d_str = dt_str.substr(0, 8);\n    var url_info = url.parse(request.url);\n    request.headers['host'] = url_info.host;\n    request.headers['x-amz-date'] = dt_str;\n    if (access_info.session_token) {\n      request.headers['X-Amz-Security-Token'] = access_info.session_token;\n    }\n    // Task 1: Create a Canonical Request\n    var request_str = canonical_request(request);\n    logger.debug(request_str);\n    // Task 2: Create a String to Sign\n    var serviceInfo = service_info || parse_service_info(request),\n      scope = credential_scope(d_str, serviceInfo.region, serviceInfo.service),\n      str_to_sign = string_to_sign(DEFAULT_ALGORITHM, request_str, dt_str, scope);\n    // Task 3: Calculate the Signature\n    var signing_key = get_signing_key(access_info.secret_key, d_str, serviceInfo),\n      signature = get_signature(signing_key, str_to_sign);\n    // Task 4: Adding the Signing information to the Request\n    var authorization_header = get_authorization_header(DEFAULT_ALGORITHM, access_info.access_key, scope, signed_headers(request.headers), signature);\n    request.headers['Authorization'] = authorization_header;\n    return request;\n  };\n  Signer.signUrl = function (urlOrRequest, accessInfo, serviceInfo, expiration) {\n    var urlToSign = typeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n    var method = typeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n    var body = typeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n    var now = new Date().toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n    var today = now.substr(0, 8);\n    // Intentionally discarding search\n    var _a = url.parse(urlToSign, true, true),\n      search = _a.search,\n      parsedUrl = __rest(_a, [\"search\"]);\n    var host = parsedUrl.host;\n    var signedHeaders = {\n      host: host\n    };\n    var _b = serviceInfo || parse_service_info({\n        url: url.format(parsedUrl)\n      }),\n      region = _b.region,\n      service = _b.service;\n    var credentialScope = credential_scope(today, region, service);\n    // IoT service does not allow the session token in the canonical request\n    // https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n    var sessionTokenRequired = accessInfo.session_token && service !== IOT_SERVICE_NAME;\n    var queryParams = __assign(__assign(__assign({\n      'X-Amz-Algorithm': DEFAULT_ALGORITHM,\n      'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'),\n      'X-Amz-Date': now.substr(0, 16)\n    }, sessionTokenRequired ? {\n      'X-Amz-Security-Token': \"\" + accessInfo.session_token\n    } : {}), expiration ? {\n      'X-Amz-Expires': \"\" + expiration\n    } : {}), {\n      'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(',')\n    });\n    var canonicalRequest = canonical_request({\n      method: method,\n      url: url.format(__assign(__assign({}, parsedUrl), {\n        query: __assign(__assign({}, parsedUrl.query), queryParams)\n      })),\n      headers: signedHeaders,\n      data: body\n    });\n    var stringToSign = string_to_sign(DEFAULT_ALGORITHM, canonicalRequest, now, credentialScope);\n    var signing_key = get_signing_key(accessInfo.secret_key, today, {\n      region: region,\n      service: service\n    });\n    var signature = get_signature(signing_key, stringToSign);\n    var additionalQueryParams = __assign({\n      'X-Amz-Signature': signature\n    }, accessInfo.session_token && {\n      'X-Amz-Security-Token': accessInfo.session_token\n    });\n    var result = url.format({\n      protocol: parsedUrl.protocol,\n      slashes: true,\n      hostname: parsedUrl.hostname,\n      port: parsedUrl.port,\n      pathname: parsedUrl.pathname,\n      query: __assign(__assign(__assign({}, parsedUrl.query), queryParams), additionalQueryParams)\n    });\n    return result;\n  };\n  return Signer;\n}();\nexport default Signer;","map":{"version":3,"names":["ConsoleLogger","Logger","AWS","logger","url","require","crypto","DEFAULT_ALGORITHM","IOT_SERVICE_NAME","encrypt","key","src","encoding","lib","createHmac","update","digest","hash","arg","createHash","escape_RFC3986","component","replace","c","charCodeAt","toString","toUpperCase","canonical_query","query","length","split","map","e","key_val","reencoded_val","sort","a","b","key_a","key_b","join","canonical_headers","headers","Object","keys","toLowerCase","value","trim","item","signed_headers","canonical_request","request","url_info","parse","method","encodeURIComponent","pathname","data","parse_service_info","host","matched","match","parsed","slice","reverse","service","region","credential_scope","d_str","string_to_sign","algorithm","dt_str","scope","get_signing_key","secret_key","service_info","debug","k","k_date","k_region","k_service","k_signing","get_signature","signing_key","str_to_sign","get_authorization_header","access_key","signature","Signer","sign","access_info","dt","Date","toISOString","substr","session_token","request_str","serviceInfo","authorization_header","signUrl","urlOrRequest","accessInfo","expiration","urlToSign","body","undefined","now","today","_a","search","parsedUrl","__rest","signedHeaders","_b","format","credentialScope","sessionTokenRequired","queryParams","__assign","canonicalRequest","stringToSign","additionalQueryParams","result","protocol","slashes","hostname","port"],"sources":["C:\\Study\\6805\\React\\reacthtml\\node_modules\\@aws-amplify\\core\\src\\Signer.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport { ConsoleLogger as Logger } from './Logger';\nimport { AWS } from './Facet';\n\nconst logger = new Logger('Signer'),\n\turl = require('url'),\n\tcrypto = AWS['util'].crypto;\n\nconst DEFAULT_ALGORITHM = 'AWS4-HMAC-SHA256';\nconst IOT_SERVICE_NAME = 'iotdevicegateway';\n\nconst encrypt = function(key, src, encoding?) {\n\treturn crypto.lib\n\t\t.createHmac('sha256', key)\n\t\t.update(src, 'utf8')\n\t\t.digest(encoding);\n};\n\nconst hash = function(src) {\n\tconst arg = src || '';\n\treturn crypto\n\t\t.createHash('sha256')\n\t\t.update(arg, 'utf8')\n\t\t.digest('hex');\n};\n\n/**\n * @private\n * RFC 3986 compliant version of encodeURIComponent\n */\nconst escape_RFC3986 = function(component) {\n\treturn component.replace(/[!'()*]/g, function(c) {\n\t\treturn (\n\t\t\t'%' +\n\t\t\tc\n\t\t\t\t.charCodeAt(0)\n\t\t\t\t.toString(16)\n\t\t\t\t.toUpperCase()\n\t\t);\n\t});\n};\n\n/**\n * @private\n * Create canonical query string\n *\n */\nconst canonical_query = function(query) {\n\tif (!query || query.length === 0) {\n\t\treturn '';\n\t}\n\n\treturn query\n\t\t.split('&')\n\t\t.map(e => {\n\t\t\tconst key_val = e.split('=');\n\n\t\t\tif (key_val.length === 1) {\n\t\t\t\treturn e;\n\t\t\t} else {\n\t\t\t\tconst reencoded_val = escape_RFC3986(key_val[1]);\n\t\t\t\treturn key_val[0] + '=' + reencoded_val;\n\t\t\t}\n\t\t})\n\t\t.sort((a, b) => {\n\t\t\tconst key_a = a.split('=')[0];\n\t\t\tconst key_b = b.split('=')[0];\n\t\t\tif (key_a === key_b) {\n\t\t\t\treturn a < b ? -1 : 1;\n\t\t\t} else {\n\t\t\t\treturn key_a < key_b ? -1 : 1;\n\t\t\t}\n\t\t})\n\t\t.join('&');\n};\n\n/**\n* @private\n* Create canonical headers\n*\n<pre>\nCanonicalHeaders =\n    CanonicalHeadersEntry0 + CanonicalHeadersEntry1 + ... + CanonicalHeadersEntryN\nCanonicalHeadersEntry =\n    Lowercase(HeaderName) + ':' + Trimall(HeaderValue) + '\\n'\n</pre>\n*/\nconst canonical_headers = function(headers) {\n\tif (!headers || Object.keys(headers).length === 0) {\n\t\treturn '';\n\t}\n\n\treturn (\n\t\tObject.keys(headers)\n\t\t\t.map(function(key) {\n\t\t\t\treturn {\n\t\t\t\t\tkey: key.toLowerCase(),\n\t\t\t\t\tvalue: headers[key] ? headers[key].trim().replace(/\\s+/g, ' ') : '',\n\t\t\t\t};\n\t\t\t})\n\t\t\t.sort(function(a, b) {\n\t\t\t\treturn a.key < b.key ? -1 : 1;\n\t\t\t})\n\t\t\t.map(function(item) {\n\t\t\t\treturn item.key + ':' + item.value;\n\t\t\t})\n\t\t\t.join('\\n') + '\\n'\n\t);\n};\n\n/**\n * List of header keys included in the canonical headers.\n * @access private\n */\nconst signed_headers = function(headers) {\n\treturn Object.keys(headers)\n\t\t.map(function(key) {\n\t\t\treturn key.toLowerCase();\n\t\t})\n\t\t.sort()\n\t\t.join(';');\n};\n\n/**\n* @private\n* Create canonical request\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-canonical-request.html|Create a Canonical Request}\n*\n<pre>\nCanonicalRequest =\n    HTTPRequestMethod + '\\n' +\n    CanonicalURI + '\\n' +\n    CanonicalQueryString + '\\n' +\n    CanonicalHeaders + '\\n' +\n    SignedHeaders + '\\n' +\n    HexEncode(Hash(RequestPayload))\n</pre>\n*/\nconst canonical_request = function(request) {\n\tconst url_info = url.parse(request.url);\n\n\treturn [\n\t\trequest.method || '/',\n\t\tencodeURIComponent(url_info.pathname).replace(/%2F/gi, '/'),\n\t\tcanonical_query(url_info.query),\n\t\tcanonical_headers(request.headers),\n\t\tsigned_headers(request.headers),\n\t\thash(request.data),\n\t].join('\\n');\n};\n\nconst parse_service_info = function(request) {\n\tconst url_info = url.parse(request.url),\n\t\thost = url_info.host;\n\n\tconst matched = host.match(/([^\\.]+)\\.(?:([^\\.]*)\\.)?amazonaws\\.com$/);\n\tlet parsed = (matched || []).slice(1, 3);\n\n\tif (parsed[1] === 'es') {\n\t\t// Elastic Search\n\t\tparsed = parsed.reverse();\n\t}\n\n\treturn {\n\t\tservice: request.service || parsed[0],\n\t\tregion: request.region || parsed[1],\n\t};\n};\n\nconst credential_scope = function(d_str, region, service) {\n\treturn [d_str, region, service, 'aws4_request'].join('/');\n};\n\n/**\n* @private\n* Create a string to sign\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-create-string-to-sign.html|Create String to Sign}\n*\n<pre>\nStringToSign =\n    Algorithm + \\n +\n    RequestDateTime + \\n +\n    CredentialScope + \\n +\n    HashedCanonicalRequest\n</pre>\n*/\nconst string_to_sign = function(algorithm, canonical_request, dt_str, scope) {\n\treturn [algorithm, dt_str, scope, hash(canonical_request)].join('\\n');\n};\n\n/**\n* @private\n* Create signing key\n* Refer to\n* {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-calculate-signature.html|Calculate Signature}\n*\n<pre>\nkSecret = your secret access key\nkDate = HMAC(\"AWS4\" + kSecret, Date)\nkRegion = HMAC(kDate, Region)\nkService = HMAC(kRegion, Service)\nkSigning = HMAC(kService, \"aws4_request\")\n</pre>\n*/\nconst get_signing_key = function(secret_key, d_str, service_info) {\n\tlogger.debug(service_info);\n\tconst k = 'AWS4' + secret_key,\n\t\tk_date = encrypt(k, d_str),\n\t\tk_region = encrypt(k_date, service_info.region),\n\t\tk_service = encrypt(k_region, service_info.service),\n\t\tk_signing = encrypt(k_service, 'aws4_request');\n\n\treturn k_signing;\n};\n\nconst get_signature = function(signing_key, str_to_sign) {\n\treturn encrypt(signing_key, str_to_sign, 'hex');\n};\n\n/**\n * @private\n * Create authorization header\n * Refer to\n * {@link http://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html|Add the Signing Information}\n */\nconst get_authorization_header = function(\n\talgorithm,\n\taccess_key,\n\tscope,\n\tsigned_headers,\n\tsignature\n) {\n\treturn [\n\t\talgorithm + ' ' + 'Credential=' + access_key + '/' + scope,\n\t\t'SignedHeaders=' + signed_headers,\n\t\t'Signature=' + signature,\n\t].join(', ');\n};\n\n/**\n * AWS request signer.\n * Refer to {@link http://docs.aws.amazon.com/general/latest/gr/sigv4_signing.html|Signature Version 4}\n *\n * @class Signer\n */\n\nexport default class Signer {\n\t/**\n    * Sign a HTTP request, add 'Authorization' header to request param\n    * @method sign\n    * @memberof Signer\n    * @static\n    *\n    * @param {object} request - HTTP request object\n    <pre>\n    request: {\n        method: GET | POST | PUT ...\n        url: ...,\n        headers: {\n            header1: ...\n        },\n        data: data\n    }\n    </pre>\n    * @param {object} access_info - AWS access credential info\n    <pre>\n    access_info: {\n        access_key: ...,\n        secret_key: ...,\n        session_token: ...\n    }\n    </pre>\n    * @param {object} [service_info] - AWS service type and region, optional,\n    *                                  if not provided then parse out from url\n    <pre>\n    service_info: {\n        service: ...,\n        region: ...\n    }\n    </pre>\n    *\n    * @returns {object} Signed HTTP request\n    */\n\tstatic sign(request, access_info, service_info = null) {\n\t\trequest.headers = request.headers || {};\n\n\t\t// datetime string and date string\n\t\tconst dt = new Date(),\n\t\t\tdt_str = dt.toISOString().replace(/[:\\-]|\\.\\d{3}/g, ''),\n\t\t\td_str = dt_str.substr(0, 8);\n\n\t\tconst url_info = url.parse(request.url);\n\t\trequest.headers['host'] = url_info.host;\n\t\trequest.headers['x-amz-date'] = dt_str;\n\t\tif (access_info.session_token) {\n\t\t\trequest.headers['X-Amz-Security-Token'] = access_info.session_token;\n\t\t}\n\n\t\t// Task 1: Create a Canonical Request\n\t\tconst request_str = canonical_request(request);\n\t\tlogger.debug(request_str);\n\n\t\t// Task 2: Create a String to Sign\n\t\tconst serviceInfo = service_info || parse_service_info(request),\n\t\t\tscope = credential_scope(d_str, serviceInfo.region, serviceInfo.service),\n\t\t\tstr_to_sign = string_to_sign(\n\t\t\t\tDEFAULT_ALGORITHM,\n\t\t\t\trequest_str,\n\t\t\t\tdt_str,\n\t\t\t\tscope\n\t\t\t);\n\n\t\t// Task 3: Calculate the Signature\n\t\tconst signing_key = get_signing_key(\n\t\t\t\taccess_info.secret_key,\n\t\t\t\td_str,\n\t\t\t\tserviceInfo\n\t\t\t),\n\t\t\tsignature = get_signature(signing_key, str_to_sign);\n\n\t\t// Task 4: Adding the Signing information to the Request\n\t\tconst authorization_header = get_authorization_header(\n\t\t\tDEFAULT_ALGORITHM,\n\t\t\taccess_info.access_key,\n\t\t\tscope,\n\t\t\tsigned_headers(request.headers),\n\t\t\tsignature\n\t\t);\n\t\trequest.headers['Authorization'] = authorization_header;\n\n\t\treturn request;\n\t}\n\n\tstatic signUrl(\n\t\turlToSign: string,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string;\n\tstatic signUrl(\n\t\trequest: any,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string;\n\tstatic signUrl(\n\t\turlOrRequest: string | any,\n\t\taccessInfo: any,\n\t\tserviceInfo?: any,\n\t\texpiration?: number\n\t): string {\n\t\tconst urlToSign: string =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.url : urlOrRequest;\n\t\tconst method: string =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.method : 'GET';\n\t\tconst body: any =\n\t\t\ttypeof urlOrRequest === 'object' ? urlOrRequest.body : undefined;\n\n\t\tconst now = new Date().toISOString().replace(/[:\\-]|\\.\\d{3}/g, '');\n\t\tconst today = now.substr(0, 8);\n\t\t// Intentionally discarding search\n\t\tconst { search, ...parsedUrl } = url.parse(urlToSign, true, true);\n\t\tconst { host } = parsedUrl;\n\t\tconst signedHeaders = { host };\n\n\t\tconst { region, service } =\n\t\t\tserviceInfo || parse_service_info({ url: url.format(parsedUrl) });\n\t\tconst credentialScope = credential_scope(today, region, service);\n\n\t\t// IoT service does not allow the session token in the canonical request\n\t\t// https://docs.aws.amazon.com/general/latest/gr/sigv4-add-signature-to-request.html\n\t\tconst sessionTokenRequired =\n\t\t\taccessInfo.session_token && service !== IOT_SERVICE_NAME;\n\t\tconst queryParams = {\n\t\t\t'X-Amz-Algorithm': DEFAULT_ALGORITHM,\n\t\t\t'X-Amz-Credential': [accessInfo.access_key, credentialScope].join('/'),\n\t\t\t'X-Amz-Date': now.substr(0, 16),\n\t\t\t...(sessionTokenRequired\n\t\t\t\t? { 'X-Amz-Security-Token': `${accessInfo.session_token}` }\n\t\t\t\t: {}),\n\t\t\t...(expiration ? { 'X-Amz-Expires': `${expiration}` } : {}),\n\t\t\t'X-Amz-SignedHeaders': Object.keys(signedHeaders).join(','),\n\t\t};\n\n\t\tconst canonicalRequest = canonical_request({\n\t\t\tmethod,\n\t\t\turl: url.format({\n\t\t\t\t...parsedUrl,\n\t\t\t\tquery: {\n\t\t\t\t\t...parsedUrl.query,\n\t\t\t\t\t...queryParams,\n\t\t\t\t},\n\t\t\t}),\n\t\t\theaders: signedHeaders,\n\t\t\tdata: body,\n\t\t});\n\n\t\tconst stringToSign = string_to_sign(\n\t\t\tDEFAULT_ALGORITHM,\n\t\t\tcanonicalRequest,\n\t\t\tnow,\n\t\t\tcredentialScope\n\t\t);\n\n\t\tconst signing_key = get_signing_key(accessInfo.secret_key, today, {\n\t\t\tregion,\n\t\t\tservice,\n\t\t});\n\t\tconst signature = get_signature(signing_key, stringToSign);\n\n\t\tconst additionalQueryParams = {\n\t\t\t'X-Amz-Signature': signature,\n\t\t\t...(accessInfo.session_token && {\n\t\t\t\t'X-Amz-Security-Token': accessInfo.session_token,\n\t\t\t}),\n\t\t};\n\n\t\tconst result = url.format({\n\t\t\tprotocol: parsedUrl.protocol,\n\t\t\tslashes: true,\n\t\t\thostname: parsedUrl.hostname,\n\t\t\tport: parsedUrl.port,\n\t\t\tpathname: parsedUrl.pathname,\n\t\t\tquery: {\n\t\t\t\t...parsedUrl.query,\n\t\t\t\t...queryParams,\n\t\t\t\t...additionalQueryParams,\n\t\t\t},\n\t\t});\n\n\t\treturn result;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}