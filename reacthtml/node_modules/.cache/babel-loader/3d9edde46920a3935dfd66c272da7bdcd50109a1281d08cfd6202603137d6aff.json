{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar util_hex_encoding_1 = require(\"@aws-sdk/util-hex-encoding\");\n/**\n * A lossless representation of a signed, 64-bit integer. Instances of this\n * class may be used in arithmetic expressions as if they were numeric\n * primitives, but the binary representation will be preserved unchanged as the\n * `bytes` property of the object. The bytes should be encoded as big-endian,\n * two's complement integers.\n */\nvar Int64 = /** @class */function () {\n  function Int64(bytes) {\n    this.bytes = bytes;\n    if (bytes.byteLength !== 8) {\n      throw new Error('Int64 buffers must be exactly 8 bytes');\n    }\n  }\n  Int64.fromNumber = function (number) {\n    if (number > 9223372036854775807 || number < -9223372036854775808) {\n      throw new Error(number + \" is too large (or, if negative, too small) to represent as an Int64\");\n    }\n    var bytes = new Uint8Array(8);\n    for (var i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {\n      bytes[i] = remaining;\n    }\n    if (number < 0) {\n      negate(bytes);\n    }\n    return new Int64(bytes);\n  };\n  /**\n   * Called implicitly by infix arithmetic operators.\n   */\n  Int64.prototype.valueOf = function () {\n    var bytes = this.bytes.slice(0);\n    var negative = bytes[0] & 128;\n    if (negative) {\n      negate(bytes);\n    }\n    return parseInt(util_hex_encoding_1.toHex(bytes), 16) * (negative ? -1 : 1);\n  };\n  Int64.prototype.toString = function () {\n    return String(this.valueOf());\n  };\n  return Int64;\n}();\nexports.Int64 = Int64;\nfunction negate(bytes) {\n  for (var i = 0; i < 8; i++) {\n    bytes[i] ^= 0xFF;\n  }\n  for (var i = 7; i > -1; i--) {\n    bytes[i]++;\n    if (bytes[i] !== 0) break;\n  }\n}","map":{"version":3,"names":["util_hex_encoding_1","require","Int64","bytes","byteLength","Error","fromNumber","number","Uint8Array","i","remaining","Math","abs","round","negate","prototype","valueOf","slice","negative","parseInt","toHex","toString","String","exports"],"sources":["../src/Int64.ts"],"sourcesContent":[null],"mappings":";;;;;AAAA,IAAAA,mBAAA,GAAAC,OAAA;AAEA;;;;;;;AAOA,IAAAC,KAAA;EACI,SAAAA,MAAqBC,KAAiB;IAAjB,KAAAA,KAAK,GAALA,KAAK;IACtB,IAAIA,KAAK,CAACC,UAAU,KAAK,CAAC,EAAE;MACxB,MAAM,IAAIC,KAAK,CAAC,uCAAuC,CAAC;;EAEhE;EAEOH,KAAA,CAAAI,UAAU,GAAjB,UAAkBC,MAAc;IAC5B,IAAIA,MAAM,GAAG,mBAAmB,IAAIA,MAAM,GAAG,CAAC,mBAAmB,EAAE;MAC/D,MAAM,IAAIF,KAAK,CACRE,MAAM,wEAAqE,CACjF;;IAGL,IAAMJ,KAAK,GAAG,IAAIK,UAAU,CAAC,CAAC,CAAC;IAC/B,KACI,IAAIC,CAAC,GAAG,CAAC,EAAEC,SAAS,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,KAAK,CAACN,MAAM,CAAC,CAAC,EACnDE,CAAC,GAAG,CAAC,CAAC,IAAIC,SAAS,GAAG,CAAC,EACvBD,CAAC,EAAE,EAAEC,SAAS,IAAI,GAAG,EACvB;MACEP,KAAK,CAACM,CAAC,CAAC,GAAGC,SAAS;;IAGxB,IAAIH,MAAM,GAAG,CAAC,EAAE;MACZO,MAAM,CAACX,KAAK,CAAC;;IAGjB,OAAO,IAAID,KAAK,CAACC,KAAK,CAAC;EAC3B,CAAC;EAED;;;EAGAD,KAAA,CAAAa,SAAA,CAAAC,OAAO,GAAP;IACI,IAAMb,KAAK,GAAG,IAAI,CAACA,KAAK,CAACc,KAAK,CAAC,CAAC,CAAC;IACjC,IAAMC,QAAQ,GAAGf,KAAK,CAAC,CAAC,CAAC,GAAG,GAAU;IACtC,IAAIe,QAAQ,EAAE;MACVJ,MAAM,CAACX,KAAK,CAAC;;IAGjB,OAAOgB,QAAQ,CAACnB,mBAAA,CAAAoB,KAAK,CAACjB,KAAK,CAAC,EAAE,EAAE,CAAC,IAAIe,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC;EAC3D,CAAC;EAEDhB,KAAA,CAAAa,SAAA,CAAAM,QAAQ,GAAR;IACI,OAAOC,MAAM,CAAC,IAAI,CAACN,OAAO,EAAE,CAAC;EACjC,CAAC;EACL,OAAAd,KAAC;AAAD,CAAC,CA9CD;AAAaqB,OAAA,CAAArB,KAAA,GAAAA,KAAA;AAgDb,SAASY,MAAMA,CAACX,KAAiB;EAC7B,KAAK,IAAIM,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACxBN,KAAK,CAACM,CAAC,CAAC,IAAI,IAAI;;EAGpB,KAAK,IAAIA,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,CAAC,EAAEA,CAAC,EAAE,EAAE;IACzBN,KAAK,CAACM,CAAC,CAAC,EAAE;IACV,IAAIN,KAAK,CAACM,CAAC,CAAC,KAAK,CAAC,EAAE;;AAE5B"},"metadata":{},"sourceType":"script","externalDependencies":[]}