{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nimport UserAgent from './UserAgent';\n/** @class */\n\nvar Client = function () {\n  /**\n   * Constructs a new AWS Cognito Identity Provider client object\n   * @param {string} region AWS region\n   * @param {string} endpoint endpoint\n   */\n  function Client(region, endpoint) {\n    _classCallCheck(this, Client);\n    this.endpoint = endpoint || 'https://cognito-idp.' + region + '.amazonaws.com/';\n    this.userAgent = UserAgent.prototype.userAgent || 'aws-amplify/0.1.x js';\n  }\n\n  /**\n   * Makes an unauthenticated request on AWS Cognito Identity Provider API\n   * using fetch\n   * @param {string} operation API operation\n   * @param {object} params Input parameters\n   * @param {function} callback Callback called when a response is returned\n   * @returns {void}\n   */\n\n  Client.prototype.request = function request(operation, params, callback) {\n    var headers = {\n      'Content-Type': 'application/x-amz-json-1.1',\n      'X-Amz-Target': 'AWSCognitoIdentityProviderService.' + operation,\n      'X-Amz-User-Agent': this.userAgent\n    };\n    var options = {\n      headers: headers,\n      method: 'POST',\n      mode: 'cors',\n      cache: 'no-cache',\n      body: JSON.stringify(params)\n    };\n    var response = void 0;\n    var responseJsonData = void 0;\n    fetch(this.endpoint, options).then(function (resp) {\n      response = resp;\n      return resp;\n    }, function (err) {\n      // If error happens here, the request failed\n      // if it is TypeError throw network error\n      if (err instanceof TypeError) {\n        throw new Error('Network error');\n      }\n      throw err;\n    }).then(function (resp) {\n      return resp.json().catch(function () {\n        return {};\n      });\n    }).then(function (data) {\n      // return parsed body stream\n      if (response.ok) return callback(null, data);\n      responseJsonData = data;\n\n      // Taken from aws-sdk-js/lib/protocol/json.js\n      // eslint-disable-next-line no-underscore-dangle\n      var code = (data.__type || data.code).split('#').pop();\n      var error = {\n        code: code,\n        name: code,\n        message: data.message || data.Message || null\n      };\n      return callback(error);\n    }).catch(function (err) {\n      // first check if we have a service error\n      if (response && response.headers && response.headers.get('x-amzn-errortype')) {\n        try {\n          var code = response.headers.get('x-amzn-errortype').split(':')[0];\n          var error = {\n            code: code,\n            name: code,\n            statusCode: response.status,\n            message: response.status ? response.status.toString() : null\n          };\n          return callback(error);\n        } catch (ex) {\n          return callback(err);\n        }\n        // otherwise check if error is Network error\n      } else if (err instanceof Error && err.message === 'Network error') {\n        var _error = {\n          code: 'NetworkError',\n          name: err.name,\n          message: err.message\n        };\n        return callback(_error);\n      } else {\n        return callback(err);\n      }\n    });\n  };\n  return Client;\n}();\nexport default Client;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","UserAgent","Client","region","endpoint","userAgent","prototype","request","operation","params","callback","headers","options","method","mode","cache","body","JSON","stringify","response","responseJsonData","fetch","then","resp","err","Error","json","catch","data","ok","code","__type","split","pop","error","name","message","Message","get","statusCode","status","toString","ex","_error"],"sources":["C:/Study/6805/React/reacthtml/node_modules/amazon-cognito-identity-js/es/Client.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nimport UserAgent from './UserAgent';\n/** @class */\n\nvar Client = function () {\n\t/**\n  * Constructs a new AWS Cognito Identity Provider client object\n  * @param {string} region AWS region\n  * @param {string} endpoint endpoint\n  */\n\tfunction Client(region, endpoint) {\n\t\t_classCallCheck(this, Client);\n\n\t\tthis.endpoint = endpoint || 'https://cognito-idp.' + region + '.amazonaws.com/';\n\t\tthis.userAgent = UserAgent.prototype.userAgent || 'aws-amplify/0.1.x js';\n\t}\n\n\t/**\n  * Makes an unauthenticated request on AWS Cognito Identity Provider API\n  * using fetch\n  * @param {string} operation API operation\n  * @param {object} params Input parameters\n  * @param {function} callback Callback called when a response is returned\n  * @returns {void}\n  */\n\n\n\tClient.prototype.request = function request(operation, params, callback) {\n\t\tvar headers = {\n\t\t\t'Content-Type': 'application/x-amz-json-1.1',\n\t\t\t'X-Amz-Target': 'AWSCognitoIdentityProviderService.' + operation,\n\t\t\t'X-Amz-User-Agent': this.userAgent\n\t\t};\n\n\t\tvar options = {\n\t\t\theaders: headers,\n\t\t\tmethod: 'POST',\n\t\t\tmode: 'cors',\n\t\t\tcache: 'no-cache',\n\t\t\tbody: JSON.stringify(params)\n\t\t};\n\n\t\tvar response = void 0;\n\t\tvar responseJsonData = void 0;\n\n\t\tfetch(this.endpoint, options).then(function (resp) {\n\t\t\tresponse = resp;\n\t\t\treturn resp;\n\t\t}, function (err) {\n\t\t\t// If error happens here, the request failed\n\t\t\t// if it is TypeError throw network error\n\t\t\tif (err instanceof TypeError) {\n\t\t\t\tthrow new Error('Network error');\n\t\t\t}\n\t\t\tthrow err;\n\t\t}).then(function (resp) {\n\t\t\treturn resp.json().catch(function () {\n\t\t\t\treturn {};\n\t\t\t});\n\t\t}).then(function (data) {\n\t\t\t// return parsed body stream\n\t\t\tif (response.ok) return callback(null, data);\n\t\t\tresponseJsonData = data;\n\n\t\t\t// Taken from aws-sdk-js/lib/protocol/json.js\n\t\t\t// eslint-disable-next-line no-underscore-dangle\n\t\t\tvar code = (data.__type || data.code).split('#').pop();\n\t\t\tvar error = {\n\t\t\t\tcode: code,\n\t\t\t\tname: code,\n\t\t\t\tmessage: data.message || data.Message || null\n\t\t\t};\n\t\t\treturn callback(error);\n\t\t}).catch(function (err) {\n\t\t\t// first check if we have a service error\n\t\t\tif (response && response.headers && response.headers.get('x-amzn-errortype')) {\n\t\t\t\ttry {\n\t\t\t\t\tvar code = response.headers.get('x-amzn-errortype').split(':')[0];\n\t\t\t\t\tvar error = {\n\t\t\t\t\t\tcode: code,\n\t\t\t\t\t\tname: code,\n\t\t\t\t\t\tstatusCode: response.status,\n\t\t\t\t\t\tmessage: response.status ? response.status.toString() : null\n\t\t\t\t\t};\n\t\t\t\t\treturn callback(error);\n\t\t\t\t} catch (ex) {\n\t\t\t\t\treturn callback(err);\n\t\t\t\t}\n\t\t\t\t// otherwise check if error is Network error\n\t\t\t} else if (err instanceof Error && err.message === 'Network error') {\n\t\t\t\tvar _error = {\n\t\t\t\t\tcode: 'NetworkError',\n\t\t\t\t\tname: err.name,\n\t\t\t\t\tmessage: err.message\n\t\t\t\t};\n\t\t\t\treturn callback(_error);\n\t\t\t} else {\n\t\t\t\treturn callback(err);\n\t\t\t}\n\t\t});\n\t};\n\n\treturn Client;\n}();\n\nexport default Client;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}