{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nvar CognitoUserSession = function () {\n  /**\n   * Constructs a new CognitoUserSession object\n   * @param {CognitoIdToken} IdToken The session's Id token.\n   * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\n   * @param {CognitoAccessToken} AccessToken The session's access token.\n   * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\n   */\n  function CognitoUserSession() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      IdToken = _ref.IdToken,\n      RefreshToken = _ref.RefreshToken,\n      AccessToken = _ref.AccessToken,\n      ClockDrift = _ref.ClockDrift;\n    _classCallCheck(this, CognitoUserSession);\n    if (AccessToken == null || IdToken == null) {\n      throw new Error('Id token and Access Token must be present.');\n    }\n    this.idToken = IdToken;\n    this.refreshToken = RefreshToken;\n    this.accessToken = AccessToken;\n    this.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\n  }\n\n  /**\n   * @returns {CognitoIdToken} the session's Id token\n   */\n\n  CognitoUserSession.prototype.getIdToken = function getIdToken() {\n    return this.idToken;\n  };\n\n  /**\n   * @returns {CognitoRefreshToken} the session's refresh token\n   */\n\n  CognitoUserSession.prototype.getRefreshToken = function getRefreshToken() {\n    return this.refreshToken;\n  };\n\n  /**\n   * @returns {CognitoAccessToken} the session's access token\n   */\n\n  CognitoUserSession.prototype.getAccessToken = function getAccessToken() {\n    return this.accessToken;\n  };\n\n  /**\n   * @returns {int} the session's clock drift\n   */\n\n  CognitoUserSession.prototype.getClockDrift = function getClockDrift() {\n    return this.clockDrift;\n  };\n\n  /**\n   * @returns {int} the computer's clock drift\n   */\n\n  CognitoUserSession.prototype.calculateClockDrift = function calculateClockDrift() {\n    var now = Math.floor(new Date() / 1000);\n    var iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\n    return now - iat;\n  };\n\n  /**\n   * Checks to see if the session is still valid based on session expiry information found\n   * in tokens and the current time (adjusted with clock drift)\n   * @returns {boolean} if the session is still valid\n   */\n\n  CognitoUserSession.prototype.isValid = function isValid() {\n    var now = Math.floor(new Date() / 1000);\n    var adjusted = now - this.clockDrift;\n    return adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\n  };\n  return CognitoUserSession;\n}();\nexport default CognitoUserSession;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","CognitoUserSession","_ref","arguments","length","undefined","IdToken","RefreshToken","AccessToken","ClockDrift","Error","idToken","refreshToken","accessToken","clockDrift","calculateClockDrift","prototype","getIdToken","getRefreshToken","getAccessToken","getClockDrift","now","Math","floor","Date","iat","min","getIssuedAt","isValid","adjusted","getExpiration"],"sources":["C:/Study/6805/React/reacthtml/node_modules/amazon-cognito-identity-js/es/CognitoUserSession.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @class */\nvar CognitoUserSession = function () {\n\t/**\n  * Constructs a new CognitoUserSession object\n  * @param {CognitoIdToken} IdToken The session's Id token.\n  * @param {CognitoRefreshToken=} RefreshToken The session's refresh token.\n  * @param {CognitoAccessToken} AccessToken The session's access token.\n  * @param {int} ClockDrift The saved computer's clock drift or undefined to force calculation.\n  */\n\tfunction CognitoUserSession() {\n\t\tvar _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n\t\t    IdToken = _ref.IdToken,\n\t\t    RefreshToken = _ref.RefreshToken,\n\t\t    AccessToken = _ref.AccessToken,\n\t\t    ClockDrift = _ref.ClockDrift;\n\n\t\t_classCallCheck(this, CognitoUserSession);\n\n\t\tif (AccessToken == null || IdToken == null) {\n\t\t\tthrow new Error('Id token and Access Token must be present.');\n\t\t}\n\n\t\tthis.idToken = IdToken;\n\t\tthis.refreshToken = RefreshToken;\n\t\tthis.accessToken = AccessToken;\n\t\tthis.clockDrift = ClockDrift === undefined ? this.calculateClockDrift() : ClockDrift;\n\t}\n\n\t/**\n  * @returns {CognitoIdToken} the session's Id token\n  */\n\n\n\tCognitoUserSession.prototype.getIdToken = function getIdToken() {\n\t\treturn this.idToken;\n\t};\n\n\t/**\n  * @returns {CognitoRefreshToken} the session's refresh token\n  */\n\n\n\tCognitoUserSession.prototype.getRefreshToken = function getRefreshToken() {\n\t\treturn this.refreshToken;\n\t};\n\n\t/**\n  * @returns {CognitoAccessToken} the session's access token\n  */\n\n\n\tCognitoUserSession.prototype.getAccessToken = function getAccessToken() {\n\t\treturn this.accessToken;\n\t};\n\n\t/**\n  * @returns {int} the session's clock drift\n  */\n\n\n\tCognitoUserSession.prototype.getClockDrift = function getClockDrift() {\n\t\treturn this.clockDrift;\n\t};\n\n\t/**\n  * @returns {int} the computer's clock drift\n  */\n\n\n\tCognitoUserSession.prototype.calculateClockDrift = function calculateClockDrift() {\n\t\tvar now = Math.floor(new Date() / 1000);\n\t\tvar iat = Math.min(this.accessToken.getIssuedAt(), this.idToken.getIssuedAt());\n\n\t\treturn now - iat;\n\t};\n\n\t/**\n  * Checks to see if the session is still valid based on session expiry information found\n  * in tokens and the current time (adjusted with clock drift)\n  * @returns {boolean} if the session is still valid\n  */\n\n\n\tCognitoUserSession.prototype.isValid = function isValid() {\n\t\tvar now = Math.floor(new Date() / 1000);\n\t\tvar adjusted = now - this.clockDrift;\n\n\t\treturn adjusted < this.accessToken.getExpiration() && adjusted < this.idToken.getExpiration();\n\t};\n\n\treturn CognitoUserSession;\n}();\n\nexport default CognitoUserSession;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}