{"ast":null,"code":"var util = require('../util');\nvar Rest = require('./rest');\nvar Json = require('./json');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\nfunction populateBody(req) {\n  var builder = new JsonBuilder();\n  var input = req.service.api.operations[req.operation].input;\n  if (input.payload) {\n    var params = {};\n    var payloadShape = input.members[input.payload];\n    params = req.params[input.payload];\n    if (params === undefined) return;\n    if (payloadShape.type === 'structure') {\n      req.httpRequest.body = builder.build(params, payloadShape);\n      applyContentTypeHeader(req);\n    } else {\n      // non-JSON payload\n      req.httpRequest.body = params;\n      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {\n        applyContentTypeHeader(req, true);\n      }\n    }\n  } else {\n    var body = builder.build(req.params, input);\n    if (body !== '{}' || req.httpRequest.method !== 'GET') {\n      //don't send empty body for GET method\n      req.httpRequest.body = body;\n    }\n    applyContentTypeHeader(req);\n  }\n}\nfunction applyContentTypeHeader(req, isBinary) {\n  var operation = req.service.api.operations[req.operation];\n  var input = operation.input;\n  if (!req.httpRequest.headers['Content-Type']) {\n    var type = isBinary ? 'binary/octet-stream' : 'application/json';\n    req.httpRequest.headers['Content-Type'] = type;\n  }\n}\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n\n  // never send body payload on HEAD/DELETE\n  if (['HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\nfunction extractError(resp) {\n  Json.extractError(resp);\n}\nfunction extractData(resp) {\n  Rest.extractData(resp);\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var rules = req.service.api.operations[req.operation].output || {};\n  var parser;\n  var hasEventOutput = operation.hasEventOutput;\n  if (rules.payload) {\n    var payloadMember = rules.members[rules.payload];\n    var body = resp.httpResponse.body;\n    if (payloadMember.isEventStream) {\n      parser = new JsonParser();\n      resp.data[payload] = util.createEventStream(AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body, parser, payloadMember);\n    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {\n      var parser = new JsonParser();\n      resp.data[rules.payload] = parser.parse(body, payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[rules.payload] = body;\n    } else {\n      resp.data[rules.payload] = payloadMember.toType(body);\n    }\n  } else {\n    var data = resp.data;\n    Json.extractData(resp);\n    resp.data = util.merge(data, resp.data);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};","map":{"version":3,"names":["util","require","Rest","Json","JsonBuilder","JsonParser","populateBody","req","builder","input","service","api","operations","operation","payload","params","payloadShape","members","undefined","type","httpRequest","body","build","applyContentTypeHeader","isStreaming","method","isBinary","headers","buildRequest","indexOf","extractError","resp","extractData","request","rules","output","parser","hasEventOutput","payloadMember","httpResponse","isEventStream","data","createEventStream","AWS","HttpClient","streamsApiVersion","stream","parse","toType","merge","module","exports"],"sources":["C:/Study/6805/React/reacthtml/node_modules/aws-sdk/lib/protocol/rest_json.js"],"sourcesContent":["var util = require('../util');\nvar Rest = require('./rest');\nvar Json = require('./json');\nvar JsonBuilder = require('../json/builder');\nvar JsonParser = require('../json/parser');\n\nfunction populateBody(req) {\n  var builder = new JsonBuilder();\n  var input = req.service.api.operations[req.operation].input;\n\n  if (input.payload) {\n    var params = {};\n    var payloadShape = input.members[input.payload];\n    params = req.params[input.payload];\n    if (params === undefined) return;\n\n    if (payloadShape.type === 'structure') {\n      req.httpRequest.body = builder.build(params, payloadShape);\n      applyContentTypeHeader(req);\n    } else { // non-JSON payload\n      req.httpRequest.body = params;\n      if (payloadShape.type === 'binary' || payloadShape.isStreaming) {\n        applyContentTypeHeader(req, true);\n      }\n    }\n  } else {\n    var body = builder.build(req.params, input);\n    if (body !== '{}' || req.httpRequest.method !== 'GET') { //don't send empty body for GET method\n      req.httpRequest.body = body;\n    }\n    applyContentTypeHeader(req);\n  }\n}\n\nfunction applyContentTypeHeader(req, isBinary) {\n  var operation = req.service.api.operations[req.operation];\n  var input = operation.input;\n\n  if (!req.httpRequest.headers['Content-Type']) {\n    var type = isBinary ? 'binary/octet-stream' : 'application/json';\n    req.httpRequest.headers['Content-Type'] = type;\n  }\n}\n\nfunction buildRequest(req) {\n  Rest.buildRequest(req);\n\n  // never send body payload on HEAD/DELETE\n  if (['HEAD', 'DELETE'].indexOf(req.httpRequest.method) < 0) {\n    populateBody(req);\n  }\n}\n\nfunction extractError(resp) {\n  Json.extractError(resp);\n}\n\nfunction extractData(resp) {\n  Rest.extractData(resp);\n\n  var req = resp.request;\n  var operation = req.service.api.operations[req.operation];\n  var rules = req.service.api.operations[req.operation].output || {};\n  var parser;\n  var hasEventOutput = operation.hasEventOutput;\n\n  if (rules.payload) {\n    var payloadMember = rules.members[rules.payload];\n    var body = resp.httpResponse.body;\n    if (payloadMember.isEventStream) {\n      parser = new JsonParser();\n      resp.data[payload] = util.createEventStream(\n        AWS.HttpClient.streamsApiVersion === 2 ? resp.httpResponse.stream : body,\n        parser,\n        payloadMember\n      );\n    } else if (payloadMember.type === 'structure' || payloadMember.type === 'list') {\n      var parser = new JsonParser();\n      resp.data[rules.payload] = parser.parse(body, payloadMember);\n    } else if (payloadMember.type === 'binary' || payloadMember.isStreaming) {\n      resp.data[rules.payload] = body;\n    } else {\n      resp.data[rules.payload] = payloadMember.toType(body);\n    }\n  } else {\n    var data = resp.data;\n    Json.extractData(resp);\n    resp.data = util.merge(data, resp.data);\n  }\n}\n\n/**\n * @api private\n */\nmodule.exports = {\n  buildRequest: buildRequest,\n  extractError: extractError,\n  extractData: extractData\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}