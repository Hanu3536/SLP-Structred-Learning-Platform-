{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport * as Translate from 'aws-sdk/clients/translate';\nimport * as TextToSpeech from 'aws-sdk/clients/polly';\nimport { isBytesSource } from '../types';\nimport { Credentials, ConsoleLogger as Logger, Signer } from '@aws-amplify/core';\nimport { EventStreamMarshaller } from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\nvar logger = new Logger('AmazonAIConvertPredictionsProvider');\nvar eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\nvar AmazonAIConvertPredictionsProvider = /** @class */function (_super) {\n  __extends(AmazonAIConvertPredictionsProvider, _super);\n  function AmazonAIConvertPredictionsProvider() {\n    var _this = _super.call(this) || this;\n    _this.inputSampleRate = 44100;\n    _this.outputSampleRate = 16000;\n    return _this;\n  }\n  AmazonAIConvertPredictionsProvider.prototype.getProviderName = function () {\n    return 'AmazonAIConvertPredictionsProvider';\n  };\n  AmazonAIConvertPredictionsProvider.prototype.translateText = function (input) {\n    var _this = this;\n    logger.debug('Starting translation');\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var _a, _b, _c, _d, _e, sourceLanguage, _f, targetLanguage, _g, region, credentials, sourceLanguageCode, targetLanguageCode;\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              _a = this._config.translateText, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = _c === void 0 ? {} : _c, _e = _d.sourceLanguage, sourceLanguage = _e === void 0 ? '' : _e, _f = _d.targetLanguage, targetLanguage = _f === void 0 ? '' : _f, _g = _b.region, region = _g === void 0 ? '' : _g;\n              if (!region) {\n                return [2 /*return*/, rej('region not configured for transcription')];\n              }\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _h.sent();\n              if (!credentials) {\n                return [2 /*return*/, rej('No credentials')];\n              }\n              sourceLanguageCode = input.translateText.source.language || sourceLanguage;\n              targetLanguageCode = input.translateText.targetLanguage || targetLanguage;\n              if (!sourceLanguageCode || !targetLanguageCode) {\n                return [2 /*return*/, rej('Please provide both source and target language')];\n              }\n              this.translate = new Translate({\n                region: region,\n                credentials: credentials\n              });\n              this.translate.translateText({\n                SourceLanguageCode: sourceLanguageCode,\n                TargetLanguageCode: targetLanguageCode,\n                Text: input.translateText.source.text\n              }, function (err, data) {\n                logger.debug({\n                  err: err,\n                  data: data\n                });\n                if (err) {\n                  return rej(err);\n                } else {\n                  return res({\n                    text: data.TranslatedText,\n                    language: data.TargetLanguageCode\n                  });\n                }\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertTextToSpeech = function (input) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, _d, VoiceId, _e, region, voiceId;\n        return __generator(this, function (_f) {\n          switch (_f.label) {\n            case 0:\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _f.sent();\n              if (!credentials) {\n                return [2 /*return*/, rej('No credentials')];\n              }\n              _a = this._config.speechGenerator, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).VoiceId, VoiceId = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n              if (!input.textToSpeech.source) {\n                return [2 /*return*/, rej('Source needs to be provided in the input')];\n              }\n              voiceId = input.textToSpeech.voiceId || VoiceId;\n              if (!region) {\n                return [2 /*return*/, rej('Region was undefined. Did you enable speech generator using amplify CLI?')];\n              }\n              if (!voiceId) {\n                return [2 /*return*/, rej('VoiceId was undefined.')];\n              }\n              this.textToSpeech = new TextToSpeech({\n                region: region,\n                credentials: credentials\n              });\n              this.textToSpeech.synthesizeSpeech({\n                OutputFormat: 'mp3',\n                Text: input.textToSpeech.source.text,\n                VoiceId: voiceId,\n                TextType: 'text',\n                SampleRate: '24000'\n              }, function (err, data) {\n                if (err) {\n                  rej(err);\n                } else {\n                  var blob = new Blob([data.AudioStream], {\n                    type: data.ContentType\n                  });\n                  var url = URL.createObjectURL(blob);\n                  res({\n                    speech: {\n                      url: url\n                    },\n                    audioStream: data.AudioStream.buffer,\n                    text: input.textToSpeech.source.text\n                  });\n                }\n              });\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.convertSpeechToText = function (input) {\n    var _this = this;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var credentials, _a, _b, _c, _d, languageCode, _e, region, _f, source, _g, language, connection, fullText, err_1, err_2;\n        return __generator(this, function (_h) {\n          switch (_h.label) {\n            case 0:\n              _h.trys.push([0, 7,, 8]);\n              logger.debug('starting transcription..');\n              return [4 /*yield*/, Credentials.get()];\n            case 1:\n              credentials = _h.sent();\n              if (!credentials) {\n                return [2 /*return*/, rej('No credentials')];\n              }\n              _a = this._config.transcription, _b = _a === void 0 ? {} : _a, _c = _b.defaults, _d = (_c === void 0 ? {} : _c).language, languageCode = _d === void 0 ? '' : _d, _e = _b.region, region = _e === void 0 ? '' : _e;\n              if (!region) {\n                return [2 /*return*/, rej('region not configured for transcription')];\n              }\n              if (!languageCode) {\n                return [2 /*return*/, rej('languageCode not configured or provided for transcription')];\n              }\n              _f = input.transcription, source = _f.source, _g = _f.language, language = _g === void 0 ? languageCode : _g;\n              if (!isBytesSource(source)) return [3 /*break*/, 6];\n              return [4 /*yield*/, this.openConnectionWithTranscribe({\n                credentials: credentials,\n                region: region,\n                languageCode: language\n              })];\n            case 2:\n              connection = _h.sent();\n              _h.label = 3;\n            case 3:\n              _h.trys.push([3, 5,, 6]);\n              return [4 /*yield*/, this.sendDataToTranscribe({\n                connection: connection,\n                raw: source.bytes\n              })];\n            case 4:\n              fullText = _h.sent();\n              return [2 /*return*/, res({\n                transcription: {\n                  fullText: fullText\n                }\n              })];\n            case 5:\n              err_1 = _h.sent();\n              rej(err_1);\n              return [3 /*break*/, 6];\n            case 6:\n              return [2 /*return*/, rej('Source types other than byte source are not supported.')];\n            case 7:\n              err_2 = _h.sent();\n              return [2 /*return*/, rej(err_2.name + ': ' + err_2.message)];\n            case 8:\n              return [2 /*return*/];\n          }\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe = function (message) {\n    var decodedMessage = '';\n    var transcribeMessage = eventBuilder.unmarshall(Buffer.from(message.data));\n    var transcribeMessageJson = JSON.parse(String.fromCharCode.apply(String, transcribeMessage.body));\n    if (transcribeMessage.headers[':message-type'].value === 'exception') {\n      logger.debug('exception', JSON.stringify(transcribeMessageJson.Message, null, 2));\n      throw new Error(transcribeMessageJson.Message);\n    } else if (transcribeMessage.headers[':message-type'].value === 'event') {\n      if (transcribeMessageJson.Transcript.Results.length > 0) {\n        if (transcribeMessageJson.Transcript.Results[0].Alternatives.length > 0) {\n          if (transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript.length > 0) {\n            if (transcribeMessageJson.Transcript.Results[0].IsPartial === false) {\n              decodedMessage = transcribeMessageJson.Transcript.Results[0].Alternatives[0].Transcript + '\\n';\n              logger.debug({\n                decodedMessage: decodedMessage\n              });\n            } else {\n              logger.debug({\n                transcript: transcribeMessageJson.Transcript.Results[0].Alternatives[0]\n              });\n            }\n          }\n        }\n      }\n    }\n    return decodedMessage;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.sendDataToTranscribe = function (_a) {\n    var _this = this;\n    var connection = _a.connection,\n      raw = _a.raw;\n    return new Promise(function (res, rej) {\n      var fullText = '';\n      connection.onmessage = function (message) {\n        try {\n          var decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(message);\n          if (decodedMessage) {\n            fullText += decodedMessage + ' ';\n          }\n        } catch (err) {\n          logger.debug(err);\n          rej(err.message);\n        }\n      };\n      connection.onerror = function (errorEvent) {\n        logger.debug({\n          errorEvent: errorEvent\n        });\n        rej('failed to transcribe, network error');\n      };\n      connection.onclose = function (closeEvent) {\n        logger.debug({\n          closeEvent: closeEvent\n        });\n        return res(fullText.trim());\n      };\n      logger.debug({\n        raw: raw\n      });\n      if (Array.isArray(raw)) {\n        for (var i = 0; i < raw.length - 1023; i += 1024) {\n          var data = raw.slice(i, i + 1024);\n          _this.sendEncodedDataToTranscribe(connection, data);\n        }\n      }\n      // sending end frame\n      var endFrameEventMessage = _this.getAudioEventMessage(Buffer.from([]));\n      var endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n      connection.send(endFrameBinary);\n    });\n  };\n  AmazonAIConvertPredictionsProvider.prototype.sendEncodedDataToTranscribe = function (connection, data) {\n    var downsampledBuffer = this.downsampleBuffer({\n      buffer: data\n    });\n    var pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n    var audioEventMessage = this.getAudioEventMessage(Buffer.from(pcmEncodedBuffer));\n    var binary = eventBuilder.marshall(audioEventMessage);\n    connection.send(binary);\n  };\n  AmazonAIConvertPredictionsProvider.prototype.getAudioEventMessage = function (buffer) {\n    var audioEventMessage = {\n      body: buffer,\n      headers: {\n        ':message-type': {\n          type: 'string',\n          value: 'event'\n        },\n        ':event-type': {\n          type: 'string',\n          value: 'AudioEvent'\n        }\n      }\n    };\n    return audioEventMessage;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.pcmEncode = function (input) {\n    var offset = 0;\n    var buffer = new ArrayBuffer(input.length * 2);\n    var view = new DataView(buffer);\n    for (var i = 0; i < input.length; i++, offset += 2) {\n      var s = Math.max(-1, Math.min(1, input[i]));\n      view.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n    }\n    return buffer;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.downsampleBuffer = function (_a) {\n    var buffer = _a.buffer;\n    if (this.outputSampleRate === this.inputSampleRate) {\n      return buffer;\n    }\n    var sampleRateRatio = this.inputSampleRate / this.outputSampleRate;\n    var newLength = Math.round(buffer.length / sampleRateRatio);\n    var result = new Float32Array(newLength);\n    var offsetResult = 0;\n    var offsetBuffer = 0;\n    while (offsetResult < result.length) {\n      var nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n      var accum = 0,\n        count = 0;\n      for (var i = offsetBuffer; i < nextOffsetBuffer && i < buffer.length; i++) {\n        accum += buffer[i];\n        count++;\n      }\n      result[offsetResult] = accum / count;\n      offsetResult++;\n      offsetBuffer = nextOffsetBuffer;\n    }\n    return result;\n  };\n  AmazonAIConvertPredictionsProvider.prototype.openConnectionWithTranscribe = function (_a) {\n    var _this = this;\n    var userCredentials = _a.credentials,\n      region = _a.region,\n      languageCode = _a.languageCode;\n    return new Promise(function (res, rej) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var access_key, secret_key, session_token, credentials, signedUrl, connection;\n        return __generator(this, function (_a) {\n          access_key = userCredentials.accessKeyId, secret_key = userCredentials.secretAccessKey, session_token = userCredentials.sessionToken;\n          credentials = {\n            access_key: access_key,\n            secret_key: secret_key,\n            session_token: session_token\n          };\n          signedUrl = this.generateTranscribeUrl({\n            credentials: credentials,\n            region: region,\n            languageCode: languageCode\n          });\n          logger.debug('connecting...');\n          connection = new WebSocket(signedUrl);\n          connection.binaryType = 'arraybuffer';\n          connection.onopen = function () {\n            logger.debug('connected');\n            res(connection);\n          };\n          return [2 /*return*/];\n        });\n      });\n    });\n  };\n\n  AmazonAIConvertPredictionsProvider.prototype.generateTranscribeUrl = function (_a) {\n    var credentials = _a.credentials,\n      region = _a.region,\n      languageCode = _a.languageCode;\n    var url = [\"wss://transcribestreaming.\" + region + \".amazonaws.com:8443\", '/stream-transcription-websocket?', \"media-encoding=pcm&\", \"sample-rate=16000&\", \"language-code=\" + languageCode].join('');\n    var signedUrl = Signer.signUrl(url, credentials, {\n      region: region,\n      service: 'transcribe'\n    }, 300);\n    return signedUrl;\n  };\n  return AmazonAIConvertPredictionsProvider;\n}(AbstractConvertPredictionsProvider);\nexport default AmazonAIConvertPredictionsProvider;","map":{"version":3,"names":["AbstractConvertPredictionsProvider","Translate","TextToSpeech","isBytesSource","Credentials","ConsoleLogger","Logger","Signer","EventStreamMarshaller","fromUtf8","toUtf8","logger","eventBuilder","AmazonAIConvertPredictionsProvider","_super","__extends","_this","call","inputSampleRate","outputSampleRate","prototype","getProviderName","translateText","input","debug","Promise","res","rej","__awaiter","_a","_config","_b","_c","defaults","_d","_e","sourceLanguage","_f","targetLanguage","_g","region","get","credentials","_h","sent","sourceLanguageCode","source","language","targetLanguageCode","translate","SourceLanguageCode","TargetLanguageCode","Text","text","err","data","TranslatedText","convertTextToSpeech","speechGenerator","VoiceId","textToSpeech","voiceId","synthesizeSpeech","OutputFormat","TextType","SampleRate","blob","Blob","AudioStream","type","ContentType","url","URL","createObjectURL","speech","audioStream","buffer","convertSpeechToText","transcription","languageCode","openConnectionWithTranscribe","connection","sendDataToTranscribe","raw","bytes","fullText","err_1","err_2","name","message","serializeDataFromTranscribe","decodedMessage","transcribeMessage","unmarshall","Buffer","from","transcribeMessageJson","JSON","parse","String","fromCharCode","apply","body","headers","value","stringify","Message","Error","Transcript","Results","length","Alternatives","IsPartial","transcript","onmessage","onerror","errorEvent","onclose","closeEvent","trim","Array","isArray","i","slice","sendEncodedDataToTranscribe","endFrameEventMessage","getAudioEventMessage","endFrameBinary","marshall","send","downsampledBuffer","downsampleBuffer","pcmEncodedBuffer","pcmEncode","audioEventMessage","binary","offset","ArrayBuffer","view","DataView","s","Math","max","min","setInt16","sampleRateRatio","newLength","round","result","Float32Array","offsetResult","offsetBuffer","nextOffsetBuffer","accum","count","userCredentials","access_key","accessKeyId","secret_key","secretAccessKey","session_token","sessionToken","signedUrl","generateTranscribeUrl","WebSocket","binaryType","onopen","join","signUrl","service"],"sources":["C:\\Study\\6805\\React\\reacthtml\\node_modules\\@aws-amplify\\predictions\\src\\Providers\\AmazonAIConvertPredictionsProvider.ts"],"sourcesContent":["import { AbstractConvertPredictionsProvider } from '../types/Providers/AbstractConvertPredictionsProvider';\nimport * as Translate from 'aws-sdk/clients/translate';\nimport * as TextToSpeech from 'aws-sdk/clients/polly';\nimport {\n\tTranslateTextInput,\n\tTextToSpeechInput,\n\tSpeechToTextInput,\n\tTranslateTextOutput,\n\tTextToSpeechOutput,\n\tSpeechToTextOutput,\n\tisBytesSource,\n} from '../types';\nimport {\n\tCredentials,\n\tConsoleLogger as Logger,\n\tSigner,\n} from '@aws-amplify/core';\nimport {\n\tEventStreamMarshaller,\n\tMessageHeaderValue,\n} from '@aws-sdk/eventstream-marshaller';\nimport { fromUtf8, toUtf8 } from '@aws-sdk/util-utf8-node';\n\nconst logger = new Logger('AmazonAIConvertPredictionsProvider');\nconst eventBuilder = new EventStreamMarshaller(toUtf8, fromUtf8);\n\nexport default class AmazonAIConvertPredictionsProvider extends AbstractConvertPredictionsProvider {\n\tprivate translate: Translate;\n\tprivate textToSpeech: TextToSpeech;\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AmazonAIConvertPredictionsProvider';\n\t}\n\n\tprotected translateText(\n\t\tinput: TranslateTextInput\n\t): Promise<TranslateTextOutput> {\n\t\tlogger.debug('Starting translation');\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst {\n\t\t\t\ttranslateText: {\n\t\t\t\t\tdefaults: { sourceLanguage = '', targetLanguage = '' } = {},\n\t\t\t\t\tregion = '',\n\t\t\t\t} = {},\n\t\t\t} = this._config;\n\n\t\t\tif (!region) {\n\t\t\t\treturn rej('region not configured for transcription');\n\t\t\t}\n\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) {\n\t\t\t\treturn rej('No credentials');\n\t\t\t}\n\t\t\tconst sourceLanguageCode =\n\t\t\t\tinput.translateText.source.language || sourceLanguage;\n\t\t\tconst targetLanguageCode =\n\t\t\t\tinput.translateText.targetLanguage || targetLanguage;\n\t\t\tif (!sourceLanguageCode || !targetLanguageCode) {\n\t\t\t\treturn rej('Please provide both source and target language');\n\t\t\t}\n\n\t\t\tthis.translate = new Translate({ region, credentials });\n\t\t\tthis.translate.translateText(\n\t\t\t\t{\n\t\t\t\t\tSourceLanguageCode: sourceLanguageCode,\n\t\t\t\t\tTargetLanguageCode: targetLanguageCode,\n\t\t\t\t\tText: input.translateText.source.text,\n\t\t\t\t\t// tslint:disable-next-line: align\n\t\t\t\t},\n\t\t\t\t(err, data) => {\n\t\t\t\t\tlogger.debug({ err, data });\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn res({\n\t\t\t\t\t\t\ttext: data.TranslatedText,\n\t\t\t\t\t\t\tlanguage: data.TargetLanguageCode,\n\t\t\t\t\t\t} as TranslateTextOutput);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\tprotected convertTextToSpeech(\n\t\tinput: TextToSpeechInput\n\t): Promise<TextToSpeechOutput> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst credentials = await Credentials.get();\n\t\t\tif (!credentials) {\n\t\t\t\treturn rej('No credentials');\n\t\t\t}\n\t\t\tconst {\n\t\t\t\tspeechGenerator: { defaults: { VoiceId = '' } = {}, region = '' } = {},\n\t\t\t} = this._config;\n\n\t\t\tif (!input.textToSpeech.source) {\n\t\t\t\treturn rej('Source needs to be provided in the input');\n\t\t\t}\n\t\t\tconst voiceId = input.textToSpeech.voiceId || VoiceId;\n\n\t\t\tif (!region) {\n\t\t\t\treturn rej(\n\t\t\t\t\t'Region was undefined. Did you enable speech generator using amplify CLI?'\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (!voiceId) {\n\t\t\t\treturn rej('VoiceId was undefined.');\n\t\t\t}\n\n\t\t\tthis.textToSpeech = new TextToSpeech({ region, credentials });\n\t\t\tthis.textToSpeech.synthesizeSpeech(\n\t\t\t\t{\n\t\t\t\t\tOutputFormat: 'mp3',\n\t\t\t\t\tText: input.textToSpeech.source.text,\n\t\t\t\t\tVoiceId: voiceId,\n\t\t\t\t\tTextType: 'text',\n\t\t\t\t\tSampleRate: '24000',\n\t\t\t\t\t// tslint:disable-next-line: align\n\t\t\t\t},\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst blob = new Blob([data.AudioStream as ArrayBuffer], {\n\t\t\t\t\t\t\ttype: data.ContentType,\n\t\t\t\t\t\t});\n\t\t\t\t\t\tconst url = URL.createObjectURL(blob);\n\t\t\t\t\t\tres({\n\t\t\t\t\t\t\tspeech: { url },\n\t\t\t\t\t\t\taudioStream: (data.AudioStream as any).buffer,\n\t\t\t\t\t\t\ttext: input.textToSpeech.source.text,\n\t\t\t\t\t\t} as TextToSpeechOutput);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\tprotected convertSpeechToText(\n\t\tinput: SpeechToTextInput\n\t): Promise<SpeechToTextOutput> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\ttry {\n\t\t\t\tlogger.debug('starting transcription..');\n\t\t\t\tconst credentials = await Credentials.get();\n\t\t\t\tif (!credentials) {\n\t\t\t\t\treturn rej('No credentials');\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\ttranscription: {\n\t\t\t\t\t\tdefaults: { language: languageCode = '' } = {},\n\t\t\t\t\t\tregion = '',\n\t\t\t\t\t} = {},\n\t\t\t\t} = this._config;\n\t\t\t\tif (!region) {\n\t\t\t\t\treturn rej('region not configured for transcription');\n\t\t\t\t}\n\t\t\t\tif (!languageCode) {\n\t\t\t\t\treturn rej(\n\t\t\t\t\t\t'languageCode not configured or provided for transcription'\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\tconst {\n\t\t\t\t\ttranscription: { source, language = languageCode },\n\t\t\t\t} = input;\n\n\t\t\t\tif (isBytesSource(source)) {\n\t\t\t\t\tconst connection = await this.openConnectionWithTranscribe({\n\t\t\t\t\t\tcredentials,\n\t\t\t\t\t\tregion,\n\t\t\t\t\t\tlanguageCode: language,\n\t\t\t\t\t});\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst fullText = await this.sendDataToTranscribe({\n\t\t\t\t\t\t\tconnection,\n\t\t\t\t\t\t\traw: source.bytes,\n\t\t\t\t\t\t});\n\t\t\t\t\t\treturn res({\n\t\t\t\t\t\t\ttranscription: {\n\t\t\t\t\t\t\t\tfullText,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t});\n\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\treturn rej('Source types other than byte source are not supported.');\n\t\t\t} catch (err) {\n\t\t\t\treturn rej(err.name + ': ' + err.message);\n\t\t\t}\n\t\t});\n\t}\n\n\tpublic static serializeDataFromTranscribe(message) {\n\t\tlet decodedMessage = '';\n\t\tconst transcribeMessage = eventBuilder.unmarshall(\n\t\t\tBuffer.from(message.data)\n\t\t);\n\t\tconst transcribeMessageJson = JSON.parse(\n\t\t\tString.fromCharCode.apply(String, transcribeMessage.body)\n\t\t);\n\t\tif (transcribeMessage.headers[':message-type'].value === 'exception') {\n\t\t\tlogger.debug(\n\t\t\t\t'exception',\n\t\t\t\tJSON.stringify(transcribeMessageJson.Message, null, 2)\n\t\t\t);\n\t\t\tthrow new Error(transcribeMessageJson.Message);\n\t\t} else if (transcribeMessage.headers[':message-type'].value === 'event') {\n\t\t\tif (transcribeMessageJson.Transcript.Results.length > 0) {\n\t\t\t\tif (\n\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives.length > 0\n\t\t\t\t) {\n\t\t\t\t\tif (\n\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t.Transcript.length > 0\n\t\t\t\t\t) {\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].IsPartial === false\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tdecodedMessage =\n\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0]\n\t\t\t\t\t\t\t\t\t.Transcript + '\\n';\n\t\t\t\t\t\t\tlogger.debug({ decodedMessage });\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tlogger.debug({\n\t\t\t\t\t\t\t\ttranscript:\n\t\t\t\t\t\t\t\t\ttranscribeMessageJson.Transcript.Results[0].Alternatives[0],\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn decodedMessage;\n\t}\n\n\tprivate sendDataToTranscribe({ connection, raw }): Promise<string> {\n\t\treturn new Promise((res, rej) => {\n\t\t\tlet fullText = '';\n\t\t\tconnection.onmessage = message => {\n\t\t\t\ttry {\n\t\t\t\t\tconst decodedMessage = AmazonAIConvertPredictionsProvider.serializeDataFromTranscribe(\n\t\t\t\t\t\tmessage\n\t\t\t\t\t);\n\t\t\t\t\tif (decodedMessage) {\n\t\t\t\t\t\tfullText += decodedMessage + ' ';\n\t\t\t\t\t}\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.debug(err);\n\t\t\t\t\trej(err.message);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tconnection.onerror = errorEvent => {\n\t\t\t\tlogger.debug({ errorEvent });\n\t\t\t\trej('failed to transcribe, network error');\n\t\t\t};\n\n\t\t\tconnection.onclose = closeEvent => {\n\t\t\t\tlogger.debug({ closeEvent });\n\t\t\t\treturn res(fullText.trim());\n\t\t\t};\n\n\t\t\tlogger.debug({ raw });\n\n\t\t\tif (Array.isArray(raw)) {\n\t\t\t\tfor (let i = 0; i < raw.length - 1023; i += 1024) {\n\t\t\t\t\tconst data = raw.slice(i, i + 1024);\n\t\t\t\t\tthis.sendEncodedDataToTranscribe(connection, data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// sending end frame\n\t\t\tconst endFrameEventMessage = this.getAudioEventMessage(Buffer.from([]));\n\t\t\tconst endFrameBinary = eventBuilder.marshall(endFrameEventMessage);\n\t\t\tconnection.send(endFrameBinary);\n\t\t});\n\t}\n\n\tprivate sendEncodedDataToTranscribe(connection, data) {\n\t\tconst downsampledBuffer = this.downsampleBuffer({ buffer: data });\n\t\tconst pcmEncodedBuffer = this.pcmEncode(downsampledBuffer);\n\t\tconst audioEventMessage = this.getAudioEventMessage(\n\t\t\tBuffer.from(pcmEncodedBuffer)\n\t\t);\n\t\tconst binary = eventBuilder.marshall(audioEventMessage);\n\t\tconnection.send(binary);\n\t}\n\n\tprivate getAudioEventMessage(buffer) {\n\t\tconst audioEventMessage = {\n\t\t\tbody: buffer as Uint8Array,\n\t\t\theaders: {\n\t\t\t\t':message-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'event',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t\t':event-type': {\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tvalue: 'AudioEvent',\n\t\t\t\t} as MessageHeaderValue,\n\t\t\t},\n\t\t};\n\n\t\treturn audioEventMessage;\n\t}\n\n\tprivate pcmEncode(input) {\n\t\tlet offset = 0;\n\t\tconst buffer = new ArrayBuffer(input.length * 2);\n\t\tconst view = new DataView(buffer);\n\t\tfor (let i = 0; i < input.length; i++, offset += 2) {\n\t\t\tconst s = Math.max(-1, Math.min(1, input[i]));\n\t\t\tview.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7fff, true);\n\t\t}\n\t\treturn buffer;\n\t}\n\n\tprivate inputSampleRate = 44100;\n\tprivate outputSampleRate = 16000;\n\n\tprivate downsampleBuffer({ buffer }) {\n\t\tif (this.outputSampleRate === this.inputSampleRate) {\n\t\t\treturn buffer;\n\t\t}\n\n\t\tconst sampleRateRatio = this.inputSampleRate / this.outputSampleRate;\n\t\tconst newLength = Math.round(buffer.length / sampleRateRatio);\n\t\tconst result = new Float32Array(newLength);\n\t\tlet offsetResult = 0;\n\t\tlet offsetBuffer = 0;\n\t\twhile (offsetResult < result.length) {\n\t\t\tconst nextOffsetBuffer = Math.round((offsetResult + 1) * sampleRateRatio);\n\t\t\tlet accum = 0,\n\t\t\t\tcount = 0;\n\t\t\tfor (\n\t\t\t\tlet i = offsetBuffer;\n\t\t\t\ti < nextOffsetBuffer && i < buffer.length;\n\t\t\t\ti++\n\t\t\t) {\n\t\t\t\taccum += buffer[i];\n\t\t\t\tcount++;\n\t\t\t}\n\t\t\tresult[offsetResult] = accum / count;\n\t\t\toffsetResult++;\n\t\t\toffsetBuffer = nextOffsetBuffer;\n\t\t}\n\n\t\treturn result;\n\t}\n\n\tprivate openConnectionWithTranscribe({\n\t\tcredentials: userCredentials,\n\t\tregion,\n\t\tlanguageCode,\n\t}): Promise<WebSocket> {\n\t\treturn new Promise(async (res, rej) => {\n\t\t\tconst {\n\t\t\t\taccessKeyId: access_key,\n\t\t\t\tsecretAccessKey: secret_key,\n\t\t\t\tsessionToken: session_token,\n\t\t\t} = userCredentials;\n\n\t\t\tconst credentials = {\n\t\t\t\taccess_key,\n\t\t\t\tsecret_key,\n\t\t\t\tsession_token,\n\t\t\t};\n\n\t\t\tconst signedUrl = this.generateTranscribeUrl({\n\t\t\t\tcredentials,\n\t\t\t\tregion,\n\t\t\t\tlanguageCode,\n\t\t\t});\n\n\t\t\tlogger.debug('connecting...');\n\t\t\tconst connection = new WebSocket(signedUrl);\n\n\t\t\tconnection.binaryType = 'arraybuffer';\n\t\t\tconnection.onopen = () => {\n\t\t\t\tlogger.debug('connected');\n\t\t\t\tres(connection);\n\t\t\t};\n\t\t});\n\t}\n\n\tprivate generateTranscribeUrl({ credentials, region, languageCode }): string {\n\t\tconst url = [\n\t\t\t`wss://transcribestreaming.${region}.amazonaws.com:8443`,\n\t\t\t'/stream-transcription-websocket?',\n\t\t\t`media-encoding=pcm&`,\n\t\t\t`sample-rate=16000&`,\n\t\t\t`language-code=${languageCode}`,\n\t\t].join('');\n\n\t\tconst signedUrl = Signer.signUrl(\n\t\t\turl,\n\t\t\tcredentials,\n\t\t\t{ region, service: 'transcribe' },\n\t\t\t300\n\t\t);\n\n\t\treturn signedUrl;\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,kCAAkC,QAAQ,uDAAuD;AAC1G,OAAO,KAAKC,SAAS,MAAM,2BAA2B;AACtD,OAAO,KAAKC,YAAY,MAAM,uBAAuB;AACrD,SAOCC,aAAa,QACP,UAAU;AACjB,SACCC,WAAW,EACXC,aAAa,IAAIC,MAAM,EACvBC,MAAM,QACA,mBAAmB;AAC1B,SACCC,qBAAqB,QAEf,iCAAiC;AACxC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,yBAAyB;AAE1D,IAAMC,MAAM,GAAG,IAAIL,MAAM,CAAC,oCAAoC,CAAC;AAC/D,IAAMM,YAAY,GAAG,IAAIJ,qBAAqB,CAACE,MAAM,EAAED,QAAQ,CAAC;AAEhE,IAAAI,kCAAA,0BAAAC,MAAA;EAAgEC,SAAA,CAAAF,kCAAA,EAAAC,MAAA;EAG/D,SAAAD,mCAAA;IAAA,IAAAG,KAAA,GACCF,MAAA,CAAAG,IAAA,MAAO;IAwSAD,KAAA,CAAAE,eAAe,GAAG,KAAK;IACvBF,KAAA,CAAAG,gBAAgB,GAAG,KAAK;;EAxShC;EAEAN,kCAAA,CAAAO,SAAA,CAAAC,eAAe,GAAf;IACC,OAAO,oCAAoC;EAC5C,CAAC;EAESR,kCAAA,CAAAO,SAAA,CAAAE,aAAa,GAAvB,UACCC,KAAyB;IAD1B,IAAAP,KAAA;IAGCL,MAAM,CAACa,KAAK,CAAC,sBAAsB,CAAC;IACpC,OAAO,IAAIC,OAAO,CAAC,UAAOC,GAAG,EAAEC,GAAG;MAAA,OAAAC,SAAA,CAAAZ,KAAA;;;;;cAEhCa,EAAA,GAIG,IAAI,CAACC,OAAO,CAAAR,aADT,EAHNS,EAAA,GAAAF,EAAA,cAGI,EAAE,GAAAA,EAAA,EAFLG,EAAA,GAAAD,EAAA,CAAAE,QAA2D,EAA3DC,EAAA,GAAAF,EAAA,cAAyD,EAAE,GAAAA,EAAA,EAA/CG,EAAA,GAAAD,EAAA,CAAAE,cAAmB,EAAnBA,cAAc,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA,EAAEE,EAAA,GAAAH,EAAA,CAAAI,cAAmB,EAAnBA,cAAc,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA,EACpDE,EAAA,GAAAR,EAAA,CAAAS,MAAW,EAAXA,MAAM,GAAAD,EAAA,cAAG,EAAE,GAAAA,EAAA;cAIb,IAAI,CAACC,MAAM,EAAE;gBACZ,sBAAOb,GAAG,CAAC,yCAAyC,CAAC;;cAGlC,qBAAMvB,WAAW,CAACqC,GAAG,EAAE;;cAArCC,WAAW,GAAGC,EAAA,CAAAC,IAAA,EAAuB;cAC3C,IAAI,CAACF,WAAW,EAAE;gBACjB,sBAAOf,GAAG,CAAC,gBAAgB,CAAC;;cAEvBkB,kBAAkB,GACvBtB,KAAK,CAACD,aAAa,CAACwB,MAAM,CAACC,QAAQ,IAAIX,cAAc;cAChDY,kBAAkB,GACvBzB,KAAK,CAACD,aAAa,CAACgB,cAAc,IAAIA,cAAc;cACrD,IAAI,CAACO,kBAAkB,IAAI,CAACG,kBAAkB,EAAE;gBAC/C,sBAAOrB,GAAG,CAAC,gDAAgD,CAAC;;cAG7D,IAAI,CAACsB,SAAS,GAAG,IAAIhD,SAAS,CAAC;gBAAEuC,MAAM,EAAAA,MAAA;gBAAEE,WAAW,EAAAA;cAAA,CAAE,CAAC;cACvD,IAAI,CAACO,SAAS,CAAC3B,aAAa,CAC3B;gBACC4B,kBAAkB,EAAEL,kBAAkB;gBACtCM,kBAAkB,EAAEH,kBAAkB;gBACtCI,IAAI,EAAE7B,KAAK,CAACD,aAAa,CAACwB,MAAM,CAACO;eAEjC,EACD,UAACC,GAAG,EAAEC,IAAI;gBACT5C,MAAM,CAACa,KAAK,CAAC;kBAAE8B,GAAG,EAAAA,GAAA;kBAAEC,IAAI,EAAAA;gBAAA,CAAE,CAAC;gBAC3B,IAAID,GAAG,EAAE;kBACR,OAAO3B,GAAG,CAAC2B,GAAG,CAAC;iBACf,MAAM;kBACN,OAAO5B,GAAG,CAAC;oBACV2B,IAAI,EAAEE,IAAI,CAACC,cAAc;oBACzBT,QAAQ,EAAEQ,IAAI,CAACJ;mBACQ,CAAC;;cAE3B,CAAC,CACD;;;;;KACD,CAAC;EACH,CAAC;;EAEStC,kCAAA,CAAAO,SAAA,CAAAqC,mBAAmB,GAA7B,UACClC,KAAwB;IADzB,IAAAP,KAAA;IAGC,OAAO,IAAIS,OAAO,CAAC,UAAOC,GAAG,EAAEC,GAAG;MAAA,OAAAC,SAAA,CAAAZ,KAAA;;;;;cACb,qBAAMZ,WAAW,CAACqC,GAAG,EAAE;;cAArCC,WAAW,GAAGL,EAAA,CAAAO,IAAA,EAAuB;cAC3C,IAAI,CAACF,WAAW,EAAE;gBACjB,sBAAOf,GAAG,CAAC,gBAAgB,CAAC;;cAG5BE,EAAA,GACG,IAAI,CAACC,OAAO,CAAA4B,eADuD,EAAtE3B,EAAA,GAAAF,EAAA,cAAoE,EAAE,GAAAA,EAAA,EAAnDG,EAAA,GAAAD,EAAA,CAAAE,QAA+B,EAAnBC,EAAA,IAAAF,EAAA,cAAiB,EAAE,GAAAA,EAAA,EAAA2B,OAAP,EAAZA,OAAO,GAAAzB,EAAA,cAAG,EAAE,GAAAA,EAAA,EAASC,EAAA,GAAAJ,EAAA,CAAAS,MAAW,EAAXA,MAAM,GAAAL,EAAA,cAAG,EAAE,GAAAA,EAAA;cAGhE,IAAI,CAACZ,KAAK,CAACqC,YAAY,CAACd,MAAM,EAAE;gBAC/B,sBAAOnB,GAAG,CAAC,0CAA0C,CAAC;;cAEjDkC,OAAO,GAAGtC,KAAK,CAACqC,YAAY,CAACC,OAAO,IAAIF,OAAO;cAErD,IAAI,CAACnB,MAAM,EAAE;gBACZ,sBAAOb,GAAG,CACT,0EAA0E,CAC1E;;cAGF,IAAI,CAACkC,OAAO,EAAE;gBACb,sBAAOlC,GAAG,CAAC,wBAAwB,CAAC;;cAGrC,IAAI,CAACiC,YAAY,GAAG,IAAI1D,YAAY,CAAC;gBAAEsC,MAAM,EAAAA,MAAA;gBAAEE,WAAW,EAAAA;cAAA,CAAE,CAAC;cAC7D,IAAI,CAACkB,YAAY,CAACE,gBAAgB,CACjC;gBACCC,YAAY,EAAE,KAAK;gBACnBX,IAAI,EAAE7B,KAAK,CAACqC,YAAY,CAACd,MAAM,CAACO,IAAI;gBACpCM,OAAO,EAAEE,OAAO;gBAChBG,QAAQ,EAAE,MAAM;gBAChBC,UAAU,EAAE;eAEZ,EACD,UAACX,GAAG,EAAEC,IAAI;gBACT,IAAID,GAAG,EAAE;kBACR3B,GAAG,CAAC2B,GAAG,CAAC;iBACR,MAAM;kBACN,IAAMY,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACZ,IAAI,CAACa,WAA0B,CAAC,EAAE;oBACxDC,IAAI,EAAEd,IAAI,CAACe;mBACX,CAAC;kBACF,IAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC;kBACrCxC,GAAG,CAAC;oBACHgD,MAAM,EAAE;sBAAEH,GAAG,EAAAA;oBAAA,CAAE;oBACfI,WAAW,EAAGpB,IAAI,CAACa,WAAmB,CAACQ,MAAM;oBAC7CvB,IAAI,EAAE9B,KAAK,CAACqC,YAAY,CAACd,MAAM,CAACO;mBACV,CAAC;;cAE1B,CAAC,CACD;;;;;KACD,CAAC;EACH,CAAC;;EAESxC,kCAAA,CAAAO,SAAA,CAAAyD,mBAAmB,GAA7B,UACCtD,KAAwB;IADzB,IAAAP,KAAA;IAGC,OAAO,IAAIS,OAAO,CAAC,UAAOC,GAAG,EAAEC,GAAG;MAAA,OAAAC,SAAA,CAAAZ,KAAA;;;;;;cAEhCL,MAAM,CAACa,KAAK,CAAC,0BAA0B,CAAC;cACpB,qBAAMpB,WAAW,CAACqC,GAAG,EAAE;;cAArCC,WAAW,GAAGC,EAAA,CAAAC,IAAA,EAAuB;cAC3C,IAAI,CAACF,WAAW,EAAE;gBACjB,sBAAOf,GAAG,CAAC,gBAAgB,CAAC;;cAG5BE,EAAA,GAIG,IAAI,CAACC,OAAO,CAAAgD,aADT,EAHN/C,EAAA,GAAAF,EAAA,cAGI,EAAE,GAAAA,EAAA,EAFLG,EAAA,GAAAD,EAAA,CAAAE,QAA8C,EAAlCC,EAAA,IAAAF,EAAA,cAAgC,EAAE,GAAAA,EAAA,EAAAe,QAAP,EAAjBgC,YAAY,GAAA7C,EAAA,cAAG,EAAE,GAAAA,EAAA,EACvCC,EAAA,GAAAJ,EAAA,CAAAS,MAAW,EAAXA,MAAM,GAAAL,EAAA,cAAG,EAAE,GAAAA,EAAA;cAGb,IAAI,CAACK,MAAM,EAAE;gBACZ,sBAAOb,GAAG,CAAC,yCAAyC,CAAC;;cAEtD,IAAI,CAACoD,YAAY,EAAE;gBAClB,sBAAOpD,GAAG,CACT,2DAA2D,CAC3D;;cAGDU,EAAA,GACGd,KAAK,CAAAuD,aAD0C,EAAjChC,MAAM,GAAAT,EAAA,CAAAS,MAAA,EAAEP,EAAA,GAAAF,EAAA,CAAAU,QAAuB,EAAvBA,QAAQ,GAAAR,EAAA,cAAGwC,YAAY,GAAAxC,EAAA;mBAG7CpC,aAAa,CAAC2C,MAAM,CAAC,EAArB;cACgB,qBAAM,IAAI,CAACkC,4BAA4B,CAAC;gBAC1DtC,WAAW,EAAAA,WAAA;gBACXF,MAAM,EAAAA,MAAA;gBACNuC,YAAY,EAAEhC;eACd,CAAC;;cAJIkC,UAAU,GAAGtC,EAAA,CAAAC,IAAA,EAIjB;;;;cAGgB,qBAAM,IAAI,CAACsC,oBAAoB,CAAC;gBAChDD,UAAU,EAAAA,UAAA;gBACVE,GAAG,EAAErC,MAAM,CAACsC;eACZ,CAAC;;cAHIC,QAAQ,GAAG1C,EAAA,CAAAC,IAAA,EAGf;cACF,sBAAOlB,GAAG,CAAC;gBACVoD,aAAa,EAAE;kBACdO,QAAQ,EAAAA;;eAET,CAAC;;;cAEF1D,GAAG,CAAC2D,KAAG,CAAC;;;cAIV,sBAAO3D,GAAG,CAAC,wDAAwD,CAAC;;;cAEpE,sBAAOA,GAAG,CAAC4D,KAAG,CAACC,IAAI,GAAG,IAAI,GAAGD,KAAG,CAACE,OAAO,CAAC;;;;;;KAE1C,CAAC;EACH,CAAC;;EAEa5E,kCAAA,CAAA6E,2BAA2B,GAAzC,UAA0CD,OAAO;IAChD,IAAIE,cAAc,GAAG,EAAE;IACvB,IAAMC,iBAAiB,GAAGhF,YAAY,CAACiF,UAAU,CAChDC,MAAM,CAACC,IAAI,CAACN,OAAO,CAAClC,IAAI,CAAC,CACzB;IACD,IAAMyC,qBAAqB,GAAGC,IAAI,CAACC,KAAK,CACvCC,MAAM,CAACC,YAAY,CAACC,KAAK,CAACF,MAAM,EAAEP,iBAAiB,CAACU,IAAI,CAAC,CACzD;IACD,IAAIV,iBAAiB,CAACW,OAAO,CAAC,eAAe,CAAC,CAACC,KAAK,KAAK,WAAW,EAAE;MACrE7F,MAAM,CAACa,KAAK,CACX,WAAW,EACXyE,IAAI,CAACQ,SAAS,CAACT,qBAAqB,CAACU,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CACtD;MACD,MAAM,IAAIC,KAAK,CAACX,qBAAqB,CAACU,OAAO,CAAC;KAC9C,MAAM,IAAId,iBAAiB,CAACW,OAAO,CAAC,eAAe,CAAC,CAACC,KAAK,KAAK,OAAO,EAAE;MACxE,IAAIR,qBAAqB,CAACY,UAAU,CAACC,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QACxD,IACCd,qBAAqB,CAACY,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,YAAY,CAACD,MAAM,GAAG,CAAC,EAClE;UACD,IACCd,qBAAqB,CAACY,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC,CACzDH,UAAU,CAACE,MAAM,GAAG,CAAC,EACtB;YACD,IACCd,qBAAqB,CAACY,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,CAACG,SAAS,KAAK,KAAK,EAC9D;cACDrB,cAAc,GACbK,qBAAqB,CAACY,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC,CAAC,CACzDH,UAAU,GAAG,IAAI;cACpBjG,MAAM,CAACa,KAAK,CAAC;gBAAEmE,cAAc,EAAAA;cAAA,CAAE,CAAC;aAChC,MAAM;cACNhF,MAAM,CAACa,KAAK,CAAC;gBACZyF,UAAU,EACTjB,qBAAqB,CAACY,UAAU,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,YAAY,CAAC,CAAC;eAC3D,CAAC;;;;;;IAMP,OAAOpB,cAAc;EACtB,CAAC;EAEO9E,kCAAA,CAAAO,SAAA,CAAA8D,oBAAoB,GAA5B,UAA6BrD,EAAmB;IAAhD,IAAAb,KAAA;QAA+BiE,UAAA,GAAApD,EAAA,CAAAoD,UAAU;MAAEE,GAAA,GAAAtD,EAAA,CAAAsD,GAAG;IAC7C,OAAO,IAAI1D,OAAO,CAAC,UAACC,GAAG,EAAEC,GAAG;MAC3B,IAAI0D,QAAQ,GAAG,EAAE;MACjBJ,UAAU,CAACiC,SAAS,GAAG,UAAAzB,OAAO;QAC7B,IAAI;UACH,IAAME,cAAc,GAAG9E,kCAAkC,CAAC6E,2BAA2B,CACpFD,OAAO,CACP;UACD,IAAIE,cAAc,EAAE;YACnBN,QAAQ,IAAIM,cAAc,GAAG,GAAG;;SAEjC,CAAC,OAAOrC,GAAG,EAAE;UACb3C,MAAM,CAACa,KAAK,CAAC8B,GAAG,CAAC;UACjB3B,GAAG,CAAC2B,GAAG,CAACmC,OAAO,CAAC;;MAElB,CAAC;MAEDR,UAAU,CAACkC,OAAO,GAAG,UAAAC,UAAU;QAC9BzG,MAAM,CAACa,KAAK,CAAC;UAAE4F,UAAU,EAAAA;QAAA,CAAE,CAAC;QAC5BzF,GAAG,CAAC,qCAAqC,CAAC;MAC3C,CAAC;MAEDsD,UAAU,CAACoC,OAAO,GAAG,UAAAC,UAAU;QAC9B3G,MAAM,CAACa,KAAK,CAAC;UAAE8F,UAAU,EAAAA;QAAA,CAAE,CAAC;QAC5B,OAAO5F,GAAG,CAAC2D,QAAQ,CAACkC,IAAI,EAAE,CAAC;MAC5B,CAAC;MAED5G,MAAM,CAACa,KAAK,CAAC;QAAE2D,GAAG,EAAAA;MAAA,CAAE,CAAC;MAErB,IAAIqC,KAAK,CAACC,OAAO,CAACtC,GAAG,CAAC,EAAE;QACvB,KAAK,IAAIuC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvC,GAAG,CAAC2B,MAAM,GAAG,IAAI,EAAEY,CAAC,IAAI,IAAI,EAAE;UACjD,IAAMnE,IAAI,GAAG4B,GAAG,CAACwC,KAAK,CAACD,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAC;UACnC1G,KAAI,CAAC4G,2BAA2B,CAAC3C,UAAU,EAAE1B,IAAI,CAAC;;;MAIpD;MACA,IAAMsE,oBAAoB,GAAG7G,KAAI,CAAC8G,oBAAoB,CAAChC,MAAM,CAACC,IAAI,CAAC,EAAE,CAAC,CAAC;MACvE,IAAMgC,cAAc,GAAGnH,YAAY,CAACoH,QAAQ,CAACH,oBAAoB,CAAC;MAClE5C,UAAU,CAACgD,IAAI,CAACF,cAAc,CAAC;IAChC,CAAC,CAAC;EACH,CAAC;EAEOlH,kCAAA,CAAAO,SAAA,CAAAwG,2BAA2B,GAAnC,UAAoC3C,UAAU,EAAE1B,IAAI;IACnD,IAAM2E,iBAAiB,GAAG,IAAI,CAACC,gBAAgB,CAAC;MAAEvD,MAAM,EAAErB;IAAI,CAAE,CAAC;IACjE,IAAM6E,gBAAgB,GAAG,IAAI,CAACC,SAAS,CAACH,iBAAiB,CAAC;IAC1D,IAAMI,iBAAiB,GAAG,IAAI,CAACR,oBAAoB,CAClDhC,MAAM,CAACC,IAAI,CAACqC,gBAAgB,CAAC,CAC7B;IACD,IAAMG,MAAM,GAAG3H,YAAY,CAACoH,QAAQ,CAACM,iBAAiB,CAAC;IACvDrD,UAAU,CAACgD,IAAI,CAACM,MAAM,CAAC;EACxB,CAAC;EAEO1H,kCAAA,CAAAO,SAAA,CAAA0G,oBAAoB,GAA5B,UAA6BlD,MAAM;IAClC,IAAM0D,iBAAiB,GAAG;MACzBhC,IAAI,EAAE1B,MAAoB;MAC1B2B,OAAO,EAAE;QACR,eAAe,EAAE;UAChBlC,IAAI,EAAE,QAAQ;UACdmC,KAAK,EAAE;SACe;QACvB,aAAa,EAAE;UACdnC,IAAI,EAAE,QAAQ;UACdmC,KAAK,EAAE;;;KAGT;IAED,OAAO8B,iBAAiB;EACzB,CAAC;EAEOzH,kCAAA,CAAAO,SAAA,CAAAiH,SAAS,GAAjB,UAAkB9G,KAAK;IACtB,IAAIiH,MAAM,GAAG,CAAC;IACd,IAAM5D,MAAM,GAAG,IAAI6D,WAAW,CAAClH,KAAK,CAACuF,MAAM,GAAG,CAAC,CAAC;IAChD,IAAM4B,IAAI,GAAG,IAAIC,QAAQ,CAAC/D,MAAM,CAAC;IACjC,KAAK,IAAI8C,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGnG,KAAK,CAACuF,MAAM,EAAEY,CAAC,EAAE,EAAEc,MAAM,IAAI,CAAC,EAAE;MACnD,IAAMI,CAAC,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAExH,KAAK,CAACmG,CAAC,CAAC,CAAC,CAAC;MAC7CgB,IAAI,CAACM,QAAQ,CAACR,MAAM,EAAEI,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG,MAAM,GAAGA,CAAC,GAAG,MAAM,EAAE,IAAI,CAAC;;IAE7D,OAAOhE,MAAM;EACd,CAAC;EAKO/D,kCAAA,CAAAO,SAAA,CAAA+G,gBAAgB,GAAxB,UAAyBtG,EAAU;QAAR+C,MAAA,GAAA/C,EAAA,CAAA+C,MAAM;IAChC,IAAI,IAAI,CAACzD,gBAAgB,KAAK,IAAI,CAACD,eAAe,EAAE;MACnD,OAAO0D,MAAM;;IAGd,IAAMqE,eAAe,GAAG,IAAI,CAAC/H,eAAe,GAAG,IAAI,CAACC,gBAAgB;IACpE,IAAM+H,SAAS,GAAGL,IAAI,CAACM,KAAK,CAACvE,MAAM,CAACkC,MAAM,GAAGmC,eAAe,CAAC;IAC7D,IAAMG,MAAM,GAAG,IAAIC,YAAY,CAACH,SAAS,CAAC;IAC1C,IAAII,YAAY,GAAG,CAAC;IACpB,IAAIC,YAAY,GAAG,CAAC;IACpB,OAAOD,YAAY,GAAGF,MAAM,CAACtC,MAAM,EAAE;MACpC,IAAM0C,gBAAgB,GAAGX,IAAI,CAACM,KAAK,CAAC,CAACG,YAAY,GAAG,CAAC,IAAIL,eAAe,CAAC;MACzE,IAAIQ,KAAK,GAAG,CAAC;QACZC,KAAK,GAAG,CAAC;MACV,KACC,IAAIhC,CAAC,GAAG6B,YAAY,EACpB7B,CAAC,GAAG8B,gBAAgB,IAAI9B,CAAC,GAAG9C,MAAM,CAACkC,MAAM,EACzCY,CAAC,EAAE,EACF;QACD+B,KAAK,IAAI7E,MAAM,CAAC8C,CAAC,CAAC;QAClBgC,KAAK,EAAE;;MAERN,MAAM,CAACE,YAAY,CAAC,GAAGG,KAAK,GAAGC,KAAK;MACpCJ,YAAY,EAAE;MACdC,YAAY,GAAGC,gBAAgB;;IAGhC,OAAOJ,MAAM;EACd,CAAC;EAEOvI,kCAAA,CAAAO,SAAA,CAAA4D,4BAA4B,GAApC,UAAqCnD,EAIpC;IAJD,IAAAb,KAAA;QACC2I,eAAA,GAAA9H,EAAA,CAAAa,WAA4B;MAC5BF,MAAA,GAAAX,EAAA,CAAAW,MAAM;MACNuC,YAAA,GAAAlD,EAAA,CAAAkD,YAAY;IAEZ,OAAO,IAAItD,OAAO,CAAC,UAAOC,GAAG,EAAEC,GAAG;MAAA,OAAAC,SAAA,CAAAZ,KAAA;;;UAEnB4I,UAAU,GAGpBD,eAAe,CAAAE,WAHK,EACNC,UAAU,GAExBH,eAAe,CAAAI,eAFS,EACbC,aAAa,GACxBL,eAAe,CAAAM,YADS;UAGtBvH,WAAW,GAAG;YACnBkH,UAAU,EAAAA,UAAA;YACVE,UAAU,EAAAA,UAAA;YACVE,aAAa,EAAAA;WACb;UAEKE,SAAS,GAAG,IAAI,CAACC,qBAAqB,CAAC;YAC5CzH,WAAW,EAAAA,WAAA;YACXF,MAAM,EAAAA,MAAA;YACNuC,YAAY,EAAAA;WACZ,CAAC;UAEFpE,MAAM,CAACa,KAAK,CAAC,eAAe,CAAC;UACvByD,UAAU,GAAG,IAAImF,SAAS,CAACF,SAAS,CAAC;UAE3CjF,UAAU,CAACoF,UAAU,GAAG,aAAa;UACrCpF,UAAU,CAACqF,MAAM,GAAG;YACnB3J,MAAM,CAACa,KAAK,CAAC,WAAW,CAAC;YACzBE,GAAG,CAACuD,UAAU,CAAC;UAChB,CAAC;;;;KACD,CAAC;EACH,CAAC;;EAEOpE,kCAAA,CAAAO,SAAA,CAAA+I,qBAAqB,GAA7B,UAA8BtI,EAAqC;QAAnCa,WAAA,GAAAb,EAAA,CAAAa,WAAW;MAAEF,MAAA,GAAAX,EAAA,CAAAW,MAAM;MAAEuC,YAAA,GAAAlD,EAAA,CAAAkD,YAAY;IAChE,IAAMR,GAAG,GAAG,CACX,+BAA6B/B,MAAM,wBAAqB,EACxD,kCAAkC,EAClC,qBAAqB,EACrB,oBAAoB,EACpB,mBAAiBuC,YAAc,CAC/B,CAACwF,IAAI,CAAC,EAAE,CAAC;IAEV,IAAML,SAAS,GAAG3J,MAAM,CAACiK,OAAO,CAC/BjG,GAAG,EACH7B,WAAW,EACX;MAAEF,MAAM,EAAAA,MAAA;MAAEiI,OAAO,EAAE;IAAY,CAAE,EACjC,GAAG,CACH;IAED,OAAOP,SAAS;EACjB,CAAC;EACF,OAAArJ,kCAAC;AAAD,CAAC,CAlY+Db,kCAAkC"},"metadata":{},"sourceType":"module","externalDependencies":[]}