{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { ConsoleLogger as Logger } from './Logger';\nimport StorageHelper from './StorageHelper';\nimport { AWS } from './Facet';\nimport JS from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport Amplify from './Amplify';\nvar logger = new Logger('Credentials');\nvar Credentials = /** @class */function () {\n  function Credentials(config) {\n    this._gettingCredPromise = null;\n    this._refreshHandlers = {};\n    this.configure(config);\n    this._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n    this._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n  }\n  Credentials.prototype.getCredSource = function () {\n    return this._credentials_source;\n  };\n  Credentials.prototype.configure = function (config) {\n    if (!config) return this._config || {};\n    this._config = Object.assign({}, this._config, config);\n    var refreshHandlers = this._config.refreshHandlers;\n    // If the developer has provided an object of refresh handlers,\n    // then we can merge the provided handlers with the current handlers.\n    if (refreshHandlers) {\n      this._refreshHandlers = __assign(__assign({}, this._refreshHandlers), refreshHandlers);\n    }\n    this._storage = this._config.storage;\n    if (!this._storage) {\n      this._storage = new StorageHelper().getStorage();\n    }\n    this._storageSync = Promise.resolve();\n    if (typeof this._storage['sync'] === 'function') {\n      this._storageSync = this._storage['sync']();\n    }\n    return this._config;\n  };\n  Credentials.prototype.get = function () {\n    logger.debug('getting credentials');\n    return this._pickupCredentials();\n  };\n  Credentials.prototype._pickupCredentials = function () {\n    logger.debug('picking up credentials');\n    if (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n      logger.debug('getting new cred promise');\n      if (AWS.config && AWS.config.credentials && AWS.config.credentials instanceof AWS.Credentials) {\n        this._gettingCredPromise = JS.makeQuerablePromise(this._setCredentialsFromAWS());\n      } else {\n        this._gettingCredPromise = JS.makeQuerablePromise(this._keepAlive());\n      }\n    } else {\n      logger.debug('getting old cred promise');\n    }\n    return this._gettingCredPromise;\n  };\n  Credentials.prototype._keepAlive = function () {\n    logger.debug('checking if credentials exists and not expired');\n    var cred = this._credentials;\n    if (cred && !this._isExpired(cred)) {\n      logger.debug('credentials not changed and not expired, directly return');\n      return Promise.resolve(cred);\n    }\n    logger.debug('need to get a new credential or refresh the existing one');\n    if (Amplify.Auth && typeof Amplify.Auth.currentUserCredentials === 'function') {\n      return Amplify.Auth.currentUserCredentials();\n    } else {\n      return Promise.reject('No Auth module registered in Amplify');\n    }\n  };\n  Credentials.prototype.refreshFederatedToken = function (federatedInfo) {\n    var _this = this;\n    logger.debug('Getting federated credentials');\n    var provider = federatedInfo.provider,\n      user = federatedInfo.user;\n    var token = federatedInfo.token;\n    var expires_at = federatedInfo.expires_at;\n    var identity_id = federatedInfo.identity_id;\n    var that = this;\n    logger.debug('checking if federated jwt token expired');\n    if (expires_at > new Date().getTime()) {\n      // if not expired\n      logger.debug('token not expired');\n      return this._setCredentialsFromFederation({\n        provider: provider,\n        token: token,\n        user: user,\n        identity_id: identity_id,\n        expires_at: expires_at\n      });\n    } else {\n      // if refresh handler exists\n      if (that._refreshHandlers[provider] && typeof that._refreshHandlers[provider] === 'function') {\n        logger.debug('getting refreshed jwt token from federation provider');\n        return that._refreshHandlers[provider]().then(function (data) {\n          logger.debug('refresh federated token sucessfully', data);\n          token = data.token;\n          identity_id = data.identity_id;\n          expires_at = data.expires_at;\n          return that._setCredentialsFromFederation({\n            provider: provider,\n            token: token,\n            user: user,\n            identity_id: identity_id,\n            expires_at: expires_at\n          });\n        }).catch(function (e) {\n          logger.debug('refresh federated token failed', e);\n          _this.clear();\n          return Promise.reject('refreshing federation token failed: ' + e);\n        });\n      } else {\n        logger.debug('no refresh handler for provider:', provider);\n        this.clear();\n        return Promise.reject('no refresh handler for provider');\n      }\n    }\n  };\n  Credentials.prototype._isExpired = function (credentials) {\n    if (!credentials) {\n      logger.debug('no credentials for expiration check');\n      return true;\n    }\n    logger.debug('is this credentials expired?', credentials);\n    var ts = new Date().getTime();\n    var delta = 10 * 60 * 1000; // 10 minutes\n    var expired = credentials.expired,\n      expireTime = credentials.expireTime;\n    if (!expired && expireTime > ts + delta) {\n      return false;\n    }\n    return true;\n  };\n  Credentials.prototype._setCredentialsForGuest = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var attempted, _a, identityPoolId, region, mandatorySignIn, identityId, e_1, credentials, that;\n      var _this = this;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            attempted = false;\n            logger.debug('setting credentials for guest');\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region, mandatorySignIn = _a.mandatorySignIn;\n            if (mandatorySignIn) {\n              return [2 /*return*/, Promise.reject('cannot get guest credentials when mandatory signin enabled')];\n            }\n            if (!identityPoolId) {\n              logger.debug('No Cognito Federated Identity pool provided');\n              return [2 /*return*/, Promise.reject('No Cognito Federated Identity pool provided')];\n            }\n            identityId = undefined;\n            _b.label = 1;\n          case 1:\n            _b.trys.push([1, 3,, 4]);\n            return [4 /*yield*/, this._storageSync];\n          case 2:\n            _b.sent();\n            identityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n            return [3 /*break*/, 4];\n          case 3:\n            e_1 = _b.sent();\n            logger.debug('Failed to get the cached identityId', e_1);\n            return [3 /*break*/, 4];\n          case 4:\n            credentials = new AWS.CognitoIdentityCredentials({\n              IdentityPoolId: identityPoolId,\n              IdentityId: identityId ? identityId : undefined\n            }, {\n              region: region\n            });\n            that = this;\n            return [2 /*return*/, this._loadCredentials(credentials, 'guest', false, null).then(function (res) {\n              return res;\n            }).catch(function (e) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var newCredentials;\n                return __generator(this, function (_a) {\n                  // If identity id is deleted in the console, we make one attempt to recreate it\n                  // and remove existing id from cache.\n                  if (e.code === 'ResourceNotFoundException' && e.message === \"Identity '\" + identityId + \"' not found.\" && !attempted) {\n                    attempted = true;\n                    logger.debug('Failed to load guest credentials');\n                    this._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n                    credentials.clearCachedId();\n                    newCredentials = new AWS.CognitoIdentityCredentials({\n                      IdentityPoolId: identityPoolId,\n                      IdentityId: undefined\n                    }, {\n                      region: region\n                    });\n                    return [2 /*return*/, this._loadCredentials(newCredentials, 'guest', false, null)];\n                  } else {\n                    return [2 /*return*/, e];\n                  }\n                  return [2 /*return*/];\n                });\n              });\n            })];\n        }\n      });\n    });\n  };\n\n  Credentials.prototype._setCredentialsFromAWS = function () {\n    var credentials = AWS.config.credentials;\n    logger.debug('setting credentials from aws');\n    var that = this;\n    if (credentials instanceof AWS.Credentials) {\n      return Promise.resolve(credentials);\n    } else {\n      logger.debug('AWS.config.credentials is not an instance of AWS Credentials');\n      return Promise.reject('AWS.config.credentials is not an instance of AWS Credentials');\n    }\n  };\n  Credentials.prototype._setCredentialsFromFederation = function (params) {\n    var provider = params.provider,\n      token = params.token,\n      identity_id = params.identity_id,\n      user = params.user,\n      expires_at = params.expires_at;\n    var domains = {\n      google: 'accounts.google.com',\n      facebook: 'graph.facebook.com',\n      amazon: 'www.amazon.com',\n      developer: 'cognito-identity.amazonaws.com'\n    };\n    // Use custom provider url instead of the predefined ones\n    var domain = domains[provider] || provider;\n    if (!domain) {\n      return Promise.reject('You must specify a federated provider');\n    }\n    var logins = {};\n    logins[domain] = token;\n    var _a = this._config,\n      identityPoolId = _a.identityPoolId,\n      region = _a.region;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    var credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: identityPoolId,\n      IdentityId: identity_id,\n      Logins: logins\n    }, {\n      region: region\n    });\n    return this._loadCredentials(credentials, 'federated', true, params);\n  };\n  Credentials.prototype._setCredentialsFromSession = function (session) {\n    logger.debug('set credentials from session');\n    var idToken = session.getIdToken().getJwtToken();\n    var _a = this._config,\n      region = _a.region,\n      userPoolId = _a.userPoolId,\n      identityPoolId = _a.identityPoolId;\n    if (!identityPoolId) {\n      logger.debug('No Cognito Federated Identity pool provided');\n      return Promise.reject('No Cognito Federated Identity pool provided');\n    }\n    var key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n    var logins = {};\n    logins[key] = idToken;\n    var credentials = new AWS.CognitoIdentityCredentials({\n      IdentityPoolId: identityPoolId,\n      Logins: logins\n    }, {\n      region: region\n    });\n    return this._loadCredentials(credentials, 'userPool', true, null);\n  };\n  Credentials.prototype._loadCredentials = function (credentials, source, authenticated, info) {\n    var _this = this;\n    var that = this;\n    var identityPoolId = this._config.identityPoolId;\n    return new Promise(function (res, rej) {\n      credentials.get(function (err) {\n        return __awaiter(_this, void 0, void 0, function () {\n          var user, provider, token, expires_at, identity_id, e_2;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                if (err) {\n                  logger.debug('Failed to load credentials', credentials);\n                  rej(err);\n                  return [2 /*return*/];\n                }\n\n                logger.debug('Load credentials successfully', credentials);\n                that._credentials = credentials;\n                that._credentials.authenticated = authenticated;\n                that._credentials_source = source;\n                if (!(source === 'federated')) return [3 /*break*/, 3];\n                user = Object.assign({\n                  id: this._credentials.identityId\n                }, info.user);\n                provider = info.provider, token = info.token, expires_at = info.expires_at, identity_id = info.identity_id;\n                try {\n                  this._storage.setItem('aws-amplify-federatedInfo', JSON.stringify({\n                    provider: provider,\n                    token: token,\n                    user: user,\n                    expires_at: expires_at,\n                    identity_id: identity_id\n                  }));\n                } catch (e) {\n                  logger.debug('Failed to put federated info into auth storage', e);\n                }\n                if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3 /*break*/, 2];\n                return [4 /*yield*/, Amplify.Cache.setItem('federatedInfo', {\n                  provider: provider,\n                  token: token,\n                  user: user,\n                  expires_at: expires_at,\n                  identity_id: identity_id\n                }, {\n                  priority: 1\n                })];\n              case 1:\n                _a.sent();\n                return [3 /*break*/, 3];\n              case 2:\n                logger.debug('No Cache module registered in Amplify');\n                _a.label = 3;\n              case 3:\n                if (!(source === 'guest')) return [3 /*break*/, 7];\n                _a.label = 4;\n              case 4:\n                _a.trys.push([4, 6,, 7]);\n                return [4 /*yield*/, this._storageSync];\n              case 5:\n                _a.sent();\n                this._storage.setItem('CognitoIdentityId-' + identityPoolId, credentials.identityId);\n                return [3 /*break*/, 7];\n              case 6:\n                e_2 = _a.sent();\n                logger.debug('Failed to cache identityId', e_2);\n                return [3 /*break*/, 7];\n              case 7:\n                res(that._credentials);\n                return [2 /*return*/];\n            }\n          });\n        });\n      });\n    });\n  };\n\n  Credentials.prototype.set = function (params, source) {\n    if (source === 'session') {\n      return this._setCredentialsFromSession(params);\n    } else if (source === 'federation') {\n      return this._setCredentialsFromFederation(params);\n    } else if (source === 'guest') {\n      return this._setCredentialsForGuest();\n    } else {\n      logger.debug('no source specified for setting credentials');\n      return Promise.reject('invalid source');\n    }\n  };\n  Credentials.prototype.clear = function () {\n    return __awaiter(this, void 0, void 0, function () {\n      var _a, identityPoolId, region, credentials;\n      return __generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            _a = this._config, identityPoolId = _a.identityPoolId, region = _a.region;\n            if (identityPoolId) {\n              credentials = new AWS.CognitoIdentityCredentials({\n                IdentityPoolId: identityPoolId\n              }, {\n                region: region\n              });\n              credentials.clearCachedId();\n            }\n            this._credentials = null;\n            this._credentials_source = null;\n            this._storage.removeItem('aws-amplify-federatedInfo');\n            if (!(Amplify.Cache && typeof Amplify.Cache.setItem === 'function')) return [3 /*break*/, 2];\n            return [4 /*yield*/, Amplify.Cache.removeItem('federatedInfo')];\n          case 1:\n            _b.sent();\n            return [3 /*break*/, 3];\n          case 2:\n            logger.debug('No Cache module registered in Amplify');\n            _b.label = 3;\n          case 3:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Compact version of credentials\n   * @param {Object} credentials\n   * @return {Object} - Credentials\n   */\n  Credentials.prototype.shear = function (credentials) {\n    return {\n      accessKeyId: credentials.accessKeyId,\n      sessionToken: credentials.sessionToken,\n      secretAccessKey: credentials.secretAccessKey,\n      identityId: credentials.identityId,\n      authenticated: credentials.authenticated\n    };\n  };\n  return Credentials;\n}();\nexport { Credentials };\nvar instance = new Credentials(null);\nexport default instance;","map":{"version":3,"names":["ConsoleLogger","Logger","StorageHelper","AWS","JS","FacebookOAuth","GoogleOAuth","Amplify","logger","Credentials","config","_gettingCredPromise","_refreshHandlers","configure","refreshGoogleToken","refreshFacebookToken","prototype","getCredSource","_credentials_source","_config","Object","assign","refreshHandlers","__assign","_storage","storage","getStorage","_storageSync","Promise","resolve","get","debug","_pickupCredentials","isPending","credentials","makeQuerablePromise","_setCredentialsFromAWS","_keepAlive","cred","_credentials","_isExpired","Auth","currentUserCredentials","reject","refreshFederatedToken","federatedInfo","_this","provider","user","token","expires_at","identity_id","that","Date","getTime","_setCredentialsFromFederation","then","data","catch","e","clear","ts","delta","expired","expireTime","_setCredentialsForGuest","attempted","_a","identityPoolId","region","mandatorySignIn","identityId","undefined","_b","sent","getItem","e_1","CognitoIdentityCredentials","IdentityPoolId","IdentityId","_loadCredentials","res","__awaiter","code","message","removeItem","clearCachedId","newCredentials","params","domains","google","facebook","amazon","developer","domain","logins","Logins","_setCredentialsFromSession","session","idToken","getIdToken","getJwtToken","userPoolId","key","source","authenticated","info","rej","err","id","setItem","JSON","stringify","Cache","priority","e_2","set","shear","accessKeyId","sessionToken","secretAccessKey","instance"],"sources":["C:\\Study\\6805\\React\\reacthtml\\node_modules\\@aws-amplify\\core\\src\\Credentials.ts"],"sourcesContent":["import { ConsoleLogger as Logger } from './Logger';\nimport StorageHelper from './StorageHelper';\nimport { AWS } from './Facet';\nimport JS from './JS';\nimport { FacebookOAuth, GoogleOAuth } from './OAuthHelper';\nimport { ICredentials } from './types';\nimport Amplify from './Amplify';\n\nconst logger = new Logger('Credentials');\n\nexport class Credentials {\n\tprivate _config;\n\tprivate _credentials;\n\tprivate _credentials_source;\n\tprivate _gettingCredPromise = null;\n\tprivate _refreshHandlers = {};\n\tprivate _storage;\n\tprivate _storageSync;\n\n\tconstructor(config) {\n\t\tthis.configure(config);\n\t\tthis._refreshHandlers['google'] = GoogleOAuth.refreshGoogleToken;\n\t\tthis._refreshHandlers['facebook'] = FacebookOAuth.refreshFacebookToken;\n\t}\n\n\tpublic getCredSource() {\n\t\treturn this._credentials_source;\n\t}\n\n\tpublic configure(config) {\n\t\tif (!config) return this._config || {};\n\n\t\tthis._config = Object.assign({}, this._config, config);\n\t\tconst { refreshHandlers } = this._config;\n\t\t// If the developer has provided an object of refresh handlers,\n\t\t// then we can merge the provided handlers with the current handlers.\n\t\tif (refreshHandlers) {\n\t\t\tthis._refreshHandlers = { ...this._refreshHandlers, ...refreshHandlers };\n\t\t}\n\n\t\tthis._storage = this._config.storage;\n\t\tif (!this._storage) {\n\t\t\tthis._storage = new StorageHelper().getStorage();\n\t\t}\n\n\t\tthis._storageSync = Promise.resolve();\n\t\tif (typeof this._storage['sync'] === 'function') {\n\t\t\tthis._storageSync = this._storage['sync']();\n\t\t}\n\n\t\treturn this._config;\n\t}\n\n\tpublic get() {\n\t\tlogger.debug('getting credentials');\n\t\treturn this._pickupCredentials();\n\t}\n\n\tprivate _pickupCredentials() {\n\t\tlogger.debug('picking up credentials');\n\t\tif (!this._gettingCredPromise || !this._gettingCredPromise.isPending()) {\n\t\t\tlogger.debug('getting new cred promise');\n\t\t\tif (\n\t\t\t\tAWS.config &&\n\t\t\t\tAWS.config.credentials &&\n\t\t\t\tAWS.config.credentials instanceof AWS.Credentials\n\t\t\t) {\n\t\t\t\tthis._gettingCredPromise = JS.makeQuerablePromise(\n\t\t\t\t\tthis._setCredentialsFromAWS()\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tthis._gettingCredPromise = JS.makeQuerablePromise(this._keepAlive());\n\t\t\t}\n\t\t} else {\n\t\t\tlogger.debug('getting old cred promise');\n\t\t}\n\n\t\treturn this._gettingCredPromise;\n\t}\n\n\tprivate _keepAlive() {\n\t\tlogger.debug('checking if credentials exists and not expired');\n\t\tconst cred = this._credentials;\n\t\tif (cred && !this._isExpired(cred)) {\n\t\t\tlogger.debug('credentials not changed and not expired, directly return');\n\t\t\treturn Promise.resolve(cred);\n\t\t}\n\n\t\tlogger.debug('need to get a new credential or refresh the existing one');\n\t\tif (\n\t\t\tAmplify.Auth &&\n\t\t\ttypeof Amplify.Auth.currentUserCredentials === 'function'\n\t\t) {\n\t\t\treturn Amplify.Auth.currentUserCredentials();\n\t\t} else {\n\t\t\treturn Promise.reject('No Auth module registered in Amplify');\n\t\t}\n\t}\n\n\tpublic refreshFederatedToken(federatedInfo) {\n\t\tlogger.debug('Getting federated credentials');\n\t\tconst { provider, user } = federatedInfo;\n\t\tlet token = federatedInfo.token;\n\t\tlet expires_at = federatedInfo.expires_at;\n\t\tlet identity_id = federatedInfo.identity_id;\n\n\t\tconst that = this;\n\t\tlogger.debug('checking if federated jwt token expired');\n\t\tif (expires_at > new Date().getTime()) {\n\t\t\t// if not expired\n\t\t\tlogger.debug('token not expired');\n\t\t\treturn this._setCredentialsFromFederation({\n\t\t\t\tprovider,\n\t\t\t\ttoken,\n\t\t\t\tuser,\n\t\t\t\tidentity_id,\n\t\t\t\texpires_at,\n\t\t\t});\n\t\t} else {\n\t\t\t// if refresh handler exists\n\t\t\tif (\n\t\t\t\tthat._refreshHandlers[provider] &&\n\t\t\t\ttypeof that._refreshHandlers[provider] === 'function'\n\t\t\t) {\n\t\t\t\tlogger.debug('getting refreshed jwt token from federation provider');\n\t\t\t\treturn that._refreshHandlers[provider]()\n\t\t\t\t\t.then(data => {\n\t\t\t\t\t\tlogger.debug('refresh federated token sucessfully', data);\n\t\t\t\t\t\ttoken = data.token;\n\t\t\t\t\t\tidentity_id = data.identity_id;\n\t\t\t\t\t\texpires_at = data.expires_at;\n\n\t\t\t\t\t\treturn that._setCredentialsFromFederation({\n\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\tidentity_id,\n\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\tlogger.debug('refresh federated token failed', e);\n\t\t\t\t\t\tthis.clear();\n\t\t\t\t\t\treturn Promise.reject('refreshing federation token failed: ' + e);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlogger.debug('no refresh handler for provider:', provider);\n\t\t\t\tthis.clear();\n\t\t\t\treturn Promise.reject('no refresh handler for provider');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _isExpired(credentials): boolean {\n\t\tif (!credentials) {\n\t\t\tlogger.debug('no credentials for expiration check');\n\t\t\treturn true;\n\t\t}\n\t\tlogger.debug('is this credentials expired?', credentials);\n\t\tconst ts = new Date().getTime();\n\t\tconst delta = 10 * 60 * 1000; // 10 minutes\n\t\tconst { expired, expireTime } = credentials;\n\t\tif (!expired && expireTime > ts + delta) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\tprivate async _setCredentialsForGuest() {\n\t\tlet attempted = false;\n\t\tlogger.debug('setting credentials for guest');\n\t\tconst { identityPoolId, region, mandatorySignIn } = this._config;\n\t\tif (mandatorySignIn) {\n\t\t\treturn Promise.reject(\n\t\t\t\t'cannot get guest credentials when mandatory signin enabled'\n\t\t\t);\n\t\t}\n\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\n\t\tlet identityId = undefined;\n\t\ttry {\n\t\t\tawait this._storageSync;\n\t\t\tidentityId = this._storage.getItem('CognitoIdentityId-' + identityPoolId);\n\t\t} catch (e) {\n\t\t\tlogger.debug('Failed to get the cached identityId', e);\n\t\t}\n\n\t\tconst credentials = new AWS.CognitoIdentityCredentials(\n\t\t\t{\n\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\tIdentityId: identityId ? identityId : undefined,\n\t\t\t},\n\t\t\t{\n\t\t\t\tregion,\n\t\t\t}\n\t\t);\n\n\t\tconst that = this;\n\t\treturn this._loadCredentials(credentials, 'guest', false, null)\n\t\t\t.then(res => {\n\t\t\t\treturn res;\n\t\t\t})\n\t\t\t.catch(async e => {\n\t\t\t\t// If identity id is deleted in the console, we make one attempt to recreate it\n\t\t\t\t// and remove existing id from cache.\n\t\t\t\tif (\n\t\t\t\t\te.code === 'ResourceNotFoundException' &&\n\t\t\t\t\te.message === `Identity '${identityId}' not found.` &&\n\t\t\t\t\t!attempted\n\t\t\t\t) {\n\t\t\t\t\tattempted = true;\n\t\t\t\t\tlogger.debug('Failed to load guest credentials');\n\t\t\t\t\tthis._storage.removeItem('CognitoIdentityId-' + identityPoolId);\n\t\t\t\t\tcredentials.clearCachedId();\n\t\t\t\t\tconst newCredentials = new AWS.CognitoIdentityCredentials(\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t\t\t\tIdentityId: undefined,\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tregion,\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t\treturn this._loadCredentials(newCredentials, 'guest', false, null);\n\t\t\t\t} else {\n\t\t\t\t\treturn e;\n\t\t\t\t}\n\t\t\t});\n\t}\n\n\tprivate _setCredentialsFromAWS() {\n\t\tconst credentials = AWS.config.credentials;\n\t\tlogger.debug('setting credentials from aws');\n\t\tconst that = this;\n\t\tif (credentials instanceof AWS.Credentials) {\n\t\t\treturn Promise.resolve(credentials);\n\t\t} else {\n\t\t\tlogger.debug(\n\t\t\t\t'AWS.config.credentials is not an instance of AWS Credentials'\n\t\t\t);\n\t\t\treturn Promise.reject(\n\t\t\t\t'AWS.config.credentials is not an instance of AWS Credentials'\n\t\t\t);\n\t\t}\n\t}\n\n\tprivate _setCredentialsFromFederation(params) {\n\t\tconst { provider, token, identity_id, user, expires_at } = params;\n\t\tconst domains = {\n\t\t\tgoogle: 'accounts.google.com',\n\t\t\tfacebook: 'graph.facebook.com',\n\t\t\tamazon: 'www.amazon.com',\n\t\t\tdeveloper: 'cognito-identity.amazonaws.com',\n\t\t};\n\n\t\t// Use custom provider url instead of the predefined ones\n\t\tconst domain = domains[provider] || provider;\n\t\tif (!domain) {\n\t\t\treturn Promise.reject('You must specify a federated provider');\n\t\t}\n\n\t\tconst logins = {};\n\t\tlogins[domain] = token;\n\n\t\tconst { identityPoolId, region } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tconst credentials = new AWS.CognitoIdentityCredentials(\n\t\t\t{\n\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\tIdentityId: identity_id,\n\t\t\t\tLogins: logins,\n\t\t\t},\n\t\t\t{\n\t\t\t\tregion,\n\t\t\t}\n\t\t);\n\n\t\treturn this._loadCredentials(credentials, 'federated', true, params);\n\t}\n\n\tprivate _setCredentialsFromSession(session): Promise<ICredentials> {\n\t\tlogger.debug('set credentials from session');\n\t\tconst idToken = session.getIdToken().getJwtToken();\n\t\tconst { region, userPoolId, identityPoolId } = this._config;\n\t\tif (!identityPoolId) {\n\t\t\tlogger.debug('No Cognito Federated Identity pool provided');\n\t\t\treturn Promise.reject('No Cognito Federated Identity pool provided');\n\t\t}\n\t\tconst key = 'cognito-idp.' + region + '.amazonaws.com/' + userPoolId;\n\t\tconst logins = {};\n\t\tlogins[key] = idToken;\n\t\tconst credentials = new AWS.CognitoIdentityCredentials(\n\t\t\t{\n\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\tLogins: logins,\n\t\t\t},\n\t\t\t{\n\t\t\t\tregion,\n\t\t\t}\n\t\t);\n\n\t\treturn this._loadCredentials(credentials, 'userPool', true, null);\n\t}\n\n\tprivate _loadCredentials(\n\t\tcredentials,\n\t\tsource,\n\t\tauthenticated,\n\t\tinfo\n\t): Promise<ICredentials> {\n\t\tconst that = this;\n\t\tconst { identityPoolId } = this._config;\n\t\treturn new Promise((res, rej) => {\n\t\t\tcredentials.get(async err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.debug('Failed to load credentials', credentials);\n\t\t\t\t\trej(err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tlogger.debug('Load credentials successfully', credentials);\n\t\t\t\tthat._credentials = credentials;\n\t\t\t\tthat._credentials.authenticated = authenticated;\n\t\t\t\tthat._credentials_source = source;\n\t\t\t\tif (source === 'federated') {\n\t\t\t\t\tconst user = Object.assign(\n\t\t\t\t\t\t{ id: this._credentials.identityId },\n\t\t\t\t\t\tinfo.user\n\t\t\t\t\t);\n\t\t\t\t\tconst { provider, token, expires_at, identity_id } = info;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tthis._storage.setItem(\n\t\t\t\t\t\t\t'aws-amplify-federatedInfo',\n\t\t\t\t\t\t\tJSON.stringify({\n\t\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t\t\tidentity_id,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogger.debug('Failed to put federated info into auth storage', e);\n\t\t\t\t\t}\n\t\t\t\t\t// the Cache module no longer stores federated info\n\t\t\t\t\t// this is just for backward compatibility\n\t\t\t\t\tif (Amplify.Cache && typeof Amplify.Cache.setItem === 'function') {\n\t\t\t\t\t\tawait Amplify.Cache.setItem(\n\t\t\t\t\t\t\t'federatedInfo',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tprovider,\n\t\t\t\t\t\t\t\ttoken,\n\t\t\t\t\t\t\t\tuser,\n\t\t\t\t\t\t\t\texpires_at,\n\t\t\t\t\t\t\t\tidentity_id,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t{ priority: 1 }\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.debug('No Cache module registered in Amplify');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (source === 'guest') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tawait this._storageSync;\n\t\t\t\t\t\tthis._storage.setItem(\n\t\t\t\t\t\t\t'CognitoIdentityId-' + identityPoolId,\n\t\t\t\t\t\t\tcredentials.identityId\n\t\t\t\t\t\t);\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tlogger.debug('Failed to cache identityId', e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tres(that._credentials);\n\t\t\t\treturn;\n\t\t\t});\n\t\t});\n\t}\n\n\tpublic set(params, source): Promise<ICredentials> {\n\t\tif (source === 'session') {\n\t\t\treturn this._setCredentialsFromSession(params);\n\t\t} else if (source === 'federation') {\n\t\t\treturn this._setCredentialsFromFederation(params);\n\t\t} else if (source === 'guest') {\n\t\t\treturn this._setCredentialsForGuest();\n\t\t} else {\n\t\t\tlogger.debug('no source specified for setting credentials');\n\t\t\treturn Promise.reject('invalid source');\n\t\t}\n\t}\n\n\tpublic async clear() {\n\t\tconst { identityPoolId, region } = this._config;\n\t\tif (identityPoolId) {\n\t\t\t// work around for cognito js sdk to ensure clearCacheId works\n\t\t\tconst credentials = new AWS.CognitoIdentityCredentials(\n\t\t\t\t{\n\t\t\t\t\tIdentityPoolId: identityPoolId,\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tregion,\n\t\t\t\t}\n\t\t\t);\n\t\t\tcredentials.clearCachedId();\n\t\t}\n\t\tthis._credentials = null;\n\t\tthis._credentials_source = null;\n\t\tthis._storage.removeItem('aws-amplify-federatedInfo');\n\n\t\t// the Cache module no longer stores federated info\n\t\t// this is just for backward compatibility\n\t\tif (Amplify.Cache && typeof Amplify.Cache.setItem === 'function') {\n\t\t\tawait Amplify.Cache.removeItem('federatedInfo');\n\t\t} else {\n\t\t\tlogger.debug('No Cache module registered in Amplify');\n\t\t}\n\t}\n\n\t/**\n\t * Compact version of credentials\n\t * @param {Object} credentials\n\t * @return {Object} - Credentials\n\t */\n\tpublic shear(credentials) {\n\t\treturn {\n\t\t\taccessKeyId: credentials.accessKeyId,\n\t\t\tsessionToken: credentials.sessionToken,\n\t\t\tsecretAccessKey: credentials.secretAccessKey,\n\t\t\tidentityId: credentials.identityId,\n\t\t\tauthenticated: credentials.authenticated,\n\t\t};\n\t}\n}\n\nconst instance = new Credentials(null);\n\nexport default instance;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}