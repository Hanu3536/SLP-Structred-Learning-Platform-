{"ast":null,"code":"/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport { ConsoleLogger as Logger, ClientDevice, Platform, Credentials, Signer, JS, Hub } from '@aws-amplify/core';\nimport * as MobileAnalytics from 'aws-sdk/clients/mobileanalytics';\nimport * as Pinpoint from 'aws-sdk/clients/pinpoint';\nimport Cache from '@aws-amplify/cache';\nimport { v1 as uuid } from 'uuid';\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchAnalyticsEvent = function (event, data) {\n  Hub.dispatch('analytics', {\n    event: event,\n    data: data\n  }, 'Analytics', AMPLIFY_SYMBOL);\n};\nvar logger = new Logger('AWSPinpointProvider');\nvar RETRYABLE_CODES = [429, 500];\nvar ACCEPTED_CODES = [202];\nvar MOBILE_SERVICE_NAME = 'mobiletargeting';\nvar BEACON_SUPPORTED = navigator && typeof navigator.sendBeacon === 'function';\n// events buffer\nvar BUFFER_SIZE = 1000;\nvar FLUSH_SIZE = 100;\nvar FLUSH_INTERVAL = 5 * 1000; // 5s\nvar RESEND_LIMIT = 5;\n// params: { event: {name: , .... }, timeStamp, config, resendLimit }\nvar AWSPinpointProvider = /** @class */function () {\n  function AWSPinpointProvider(config) {\n    this._endpointGenerating = true;\n    this._buffer = [];\n    this._config = config ? config : {};\n    this._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n    this._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n    this._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n    this._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n    this._clientInfo = ClientDevice.clientInfo();\n  }\n  AWSPinpointProvider.prototype._setupTimer = function () {\n    var _this = this;\n    if (this._timer) {\n      clearInterval(this._timer);\n    }\n    var _a = this._config,\n      flushSize = _a.flushSize,\n      flushInterval = _a.flushInterval;\n    var that = this;\n    this._timer = setInterval(function () {\n      var size = _this._buffer.length < flushSize ? _this._buffer.length : flushSize;\n      for (var i = 0; i < size; i += 1) {\n        var _a = _this._buffer.shift(),\n          params = _a.params,\n          handlers = _a.handlers;\n        that._send(params, handlers);\n        // If this is the first request sent by Analytics module, we should stop sending remaining requests\n        // to prevent race condition of updating one endpoint when it's being created in the backend\n        if (_this._endpointGenerating) break;\n      }\n    }, flushInterval);\n  };\n  /**\n   * @private\n   * @param params - params for the event recording\n   * Put events into buffer\n   */\n  AWSPinpointProvider.prototype._putToBuffer = function (params, handlers) {\n    var bufferSize = this._config.bufferSize;\n    if (this._buffer.length < bufferSize) {\n      this._buffer.push({\n        params: params,\n        handlers: handlers\n      });\n    } else {\n      logger.debug('exceed analytics events buffer size');\n      return handlers.reject(new Error('Exceed the size of analytics events buffer'));\n    }\n  };\n  /**\n   * get the category of the plugin\n   */\n  AWSPinpointProvider.prototype.getCategory = function () {\n    return AWSPinpointProvider.category;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSPinpointProvider.prototype.getProviderName = function () {\n    return AWSPinpointProvider.providerName;\n  };\n  /**\n   * configure the plugin\n   * @param {Object} config - configuration\n   */\n  AWSPinpointProvider.prototype.configure = function (config) {\n    var _this = this;\n    logger.debug('configure Analytics', config);\n    var conf = config ? config : {};\n    this._config = Object.assign({}, this._config, conf);\n    if (this._config['appId'] && !this._config['disabled']) {\n      if (!this._config['endpointId']) {\n        var cacheKey = this.getProviderName() + '_' + this._config['appId'];\n        this._getEndpointId(cacheKey).then(function (endpointId) {\n          logger.debug('setting endpoint id from the cache', endpointId);\n          _this._config['endpointId'] = endpointId;\n          dispatchAnalyticsEvent('pinpointProvider_configured', null);\n        }).catch(function (e) {\n          logger.debug('Failed to generate endpointId', e);\n        });\n      } else {\n        dispatchAnalyticsEvent('pinpointProvider_configured', null);\n      }\n      this._setupTimer();\n    } else {\n      if (this._timer) {\n        clearInterval(this._timer);\n      }\n    }\n    return this._config;\n  };\n  /**\n   * record an event\n   * @param {Object} params - the params of an event\n   */\n  AWSPinpointProvider.prototype.record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentials, timestamp;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._getCredentials()];\n          case 1:\n            credentials = _a.sent();\n            if (!credentials || !this._config['appId'] || !this._config['region']) {\n              logger.debug('cannot send events without credentials, applicationId or region');\n              return [2 /*return*/, handlers.reject(new Error('No credentials, applicationId or region'))];\n            }\n            timestamp = new Date().getTime();\n            // attach the session and eventId\n            this._generateSession(params);\n            params.event.eventId = uuid();\n            Object.assign(params, {\n              timestamp: timestamp,\n              config: this._config,\n              credentials: credentials\n            });\n            if (params.event.immediate) {\n              return [2 /*return*/, this._send(params, handlers)];\n            } else {\n              this._putToBuffer(params, handlers);\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateSession = function (params) {\n    this._sessionId = this._sessionId || uuid();\n    var event = params.event;\n    switch (event.name) {\n      case '_session.start':\n        // refresh the session id and session start time\n        this._sessionStartTimestamp = new Date().getTime();\n        this._sessionId = uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n      case '_session.stop':\n        var stopTimestamp = new Date().getTime();\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          Duration: stopTimestamp - this._sessionStartTimestamp,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n          StopTimestamp: new Date(stopTimestamp).toISOString()\n        };\n        this._sessionId = undefined;\n        this._sessionStartTimestamp = undefined;\n        break;\n      default:\n        this._sessionStartTimestamp = this._sessionStartTimestamp || new Date().getTime();\n        this._sessionId = this._sessionId || uuid();\n        event.session = {\n          Id: this._sessionId,\n          StartTimestamp: new Date(this._sessionStartTimestamp).toISOString()\n        };\n        break;\n    }\n  };\n  AWSPinpointProvider.prototype._send = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event, config;\n      return __generator(this, function (_a) {\n        event = params.event, config = params.config;\n        switch (event.name) {\n          case '_update_endpoint':\n            return [2 /*return*/, this._updateEndpoint(params, handlers)];\n          case '_session.stop':\n            return [2 /*return*/, this._pinpointSendStopSession(params, handlers)];\n          default:\n            return [2 /*return*/, this._record(params, handlers)];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._generateBatchItemContext = function (params) {\n    var event = params.event,\n      timestamp = params.timestamp,\n      config = params.config,\n      credentials = params.credentials;\n    var name = event.name,\n      attributes = event.attributes,\n      metrics = event.metrics,\n      eventId = event.eventId,\n      session = event.session;\n    var appId = config.appId,\n      endpointId = config.endpointId;\n    var endpointContext = {};\n    var eventParams = {\n      ApplicationId: appId,\n      EventsRequest: {\n        BatchItem: {}\n      }\n    };\n    eventParams.EventsRequest.BatchItem[endpointId] = {};\n    var endpointObj = eventParams.EventsRequest.BatchItem[endpointId];\n    endpointObj['Endpoint'] = endpointContext;\n    endpointObj['Events'] = {};\n    endpointObj['Events'][eventId] = {\n      EventType: name,\n      Timestamp: new Date(timestamp).toISOString(),\n      Attributes: attributes,\n      Metrics: metrics,\n      Session: session\n    };\n    return eventParams;\n  };\n  AWSPinpointProvider.prototype._pinpointPutEvents = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var eventId, endpointId, eventParams, request;\n      var _this = this;\n      return __generator(this, function (_a) {\n        eventId = params.event.eventId, endpointId = params.config.endpointId;\n        eventParams = this._generateBatchItemContext(params);\n        request = this.pinpointClient.putEvents(eventParams);\n        // in order to keep backward compatiblity\n        // we are using a legacy api: /apps/{appid}/events/legacy\n        // so that users don't need to update their IAM Policy\n        // will use the formal one in the next break release\n        request.on('build', function () {\n          request.httpRequest.path = request.httpRequest.path + '/legacy';\n        });\n        request.send(function (err, data) {\n          if (err) {\n            logger.error('record event failed. ', err);\n            logger.warn('If you have not updated your Pinpoint IAM Policy' + ' with the Action: \"mobiletargeting:PutEvents\" yet, please do it.' + ' This action is not necessary for now' + ' but in order to avoid breaking changes in the future,' + ' please update it as soon as possible.');\n            return handlers.reject(err);\n          } else {\n            var _a = endpointId,\n              _b = eventId,\n              _c = data.EventsResponse.Results[_a].EventsItemResponse[_b],\n              StatusCode = _c.StatusCode,\n              Message = _c.Message;\n            if (ACCEPTED_CODES.includes(StatusCode)) {\n              _this._endpointGenerating = false;\n              logger.debug('record event success. ', data);\n              return handlers.resolve(data);\n            } else {\n              if (RETRYABLE_CODES.includes(StatusCode)) {\n                _this._retry(params, handlers);\n              } else {\n                logger.error(\"Event \" + eventId + \" is not accepted, the error is \" + Message);\n                return handlers.reject(data);\n              }\n            }\n          }\n        });\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._pinpointSendStopSession = function (params, handlers) {\n    if (!BEACON_SUPPORTED) {\n      this._record(params, handlers);\n      return;\n    }\n    var eventParams = this._generateBatchItemContext(params);\n    var region = this._config.region;\n    var ApplicationId = eventParams.ApplicationId,\n      EventsRequest = eventParams.EventsRequest;\n    var accessInfo = {\n      secret_key: this._config.credentials.secretAccessKey,\n      access_key: this._config.credentials.accessKeyId,\n      session_token: this._config.credentials.sessionToken\n    };\n    var url = \"https://pinpoint.\" + region + \".amazonaws.com/v1/apps/\" + ApplicationId + \"/events\";\n    var body = JSON.stringify(EventsRequest);\n    var method = 'POST';\n    var request = {\n      url: url,\n      body: body,\n      method: method\n    };\n    var serviceInfo = {\n      region: region,\n      service: MOBILE_SERVICE_NAME\n    };\n    var requestUrl = Signer.signUrl(request, accessInfo, serviceInfo, null);\n    var success = navigator.sendBeacon(requestUrl, body);\n    if (success) {\n      return handlers.resolve('sendBeacon success');\n    }\n    return handlers.reject('sendBeacon failure');\n  };\n  AWSPinpointProvider.prototype._retry = function (params, handlers) {\n    var resendLimit = params.config.resendLimit;\n    // For backward compatibility\n    params.resendLimit = typeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n    if (params.resendLimit-- > 0) {\n      logger.debug(\"resending event \" + params.eventName + \" with \" + params.resendLimit + \" retry times left\");\n      this._putToBuffer(params, handlers);\n    } else {\n      logger.debug(\"retry times used up for event \" + params.eventName);\n    }\n  };\n  AWSPinpointProvider.prototype._record = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var event, timestamp, config, credentials;\n      return __generator(this, function (_a) {\n        event = params.event, timestamp = params.timestamp, config = params.config, credentials = params.credentials;\n        this._initClients(config, credentials);\n        return [2 /*return*/, this._pinpointPutEvents(params, handlers)];\n      });\n    });\n  };\n  AWSPinpointProvider.prototype._updateEndpoint = function (params, handlers) {\n    return __awaiter(this, void 0, void 0, function () {\n      var timestamp, config, credentials, event, appId, region, endpointId, request, update_params, that;\n      var _this = this;\n      return __generator(this, function (_a) {\n        timestamp = params.timestamp, config = params.config, credentials = params.credentials, event = params.event;\n        appId = config.appId, region = config.region, endpointId = config.endpointId;\n        this._initClients(config, credentials);\n        request = this._endpointRequest(config, JS.transferKeyToLowerCase(event, [], ['attributes', 'userAttributes', 'Attributes', 'UserAttributes']));\n        update_params = {\n          ApplicationId: appId,\n          EndpointId: endpointId,\n          EndpointRequest: request\n        };\n        that = this;\n        logger.debug('updateEndpoint with params: ', update_params);\n        that.pinpointClient.updateEndpoint(update_params, function (err, data) {\n          if (err) {\n            logger.debug('updateEndpoint failed', err);\n            if (err.message.startsWith('Exceeded maximum endpoint per user count')) {\n              _this._removeUnusedEndpoints(appId, request.User.UserId).then(function () {\n                logger.debug('Remove the unused endpoints successfully');\n                _this._retry(params, handlers);\n              }).catch(function (e) {\n                logger.warn(\"Failed to remove unused endpoints with error: \" + e);\n                logger.warn(\"Please ensure you have updated your Pinpoint IAM Policy \" + \"with the Action: \\\"mobiletargeting:GetUserEndpoints\\\" \" + \"in order to get endpoints info of the user\");\n                return handlers.reject(err);\n              });\n            } else return handlers.reject(err);\n          } else {\n            logger.debug('updateEndpoint success', data);\n            _this._endpointGenerating = false;\n            return handlers.resolve(data);\n          }\n        });\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._removeUnusedEndpoints = function (appId, userId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var _this = this;\n      return __generator(this, function (_a) {\n        return [2 /*return*/, new Promise(function (res, rej) {\n          _this.pinpointClient.getUserEndpoints({\n            ApplicationId: appId,\n            UserId: userId\n          }, function (err, data) {\n            if (err) {\n              logger.debug(\"Failed to get endpoints associated with the userId: \" + userId + \" with error\", err);\n              return rej(err);\n            }\n            var endpoints = data.EndpointsResponse.Item;\n            logger.debug(\"get endpoints associated with the userId: \" + userId + \" with data\", endpoints);\n            var endpointToBeDeleted = endpoints[0];\n            for (var i = 1; i < endpoints.length; i++) {\n              var timeStamp1 = Date.parse(endpointToBeDeleted['EffectiveDate']);\n              var timeStamp2 = Date.parse(endpoints[i]['EffectiveDate']);\n              // delete the one with invalid effective date\n              if (isNaN(timeStamp1)) break;\n              if (isNaN(timeStamp2)) {\n                endpointToBeDeleted = endpoints[i];\n                break;\n              }\n              if (timeStamp2 < timeStamp1) {\n                endpointToBeDeleted = endpoints[i];\n              }\n            }\n            // update the endpoint's user id with an empty string\n            var update_params = {\n              ApplicationId: appId,\n              EndpointId: endpointToBeDeleted['Id'],\n              EndpointRequest: {\n                User: {\n                  UserId: ''\n                }\n              }\n            };\n            _this.pinpointClient.updateEndpoint(update_params, function (err, data) {\n              if (err) {\n                logger.debug('Failed to update the endpoint', err);\n                return rej(err);\n              }\n              logger.debug('The old endpoint is updated with an empty string for user id');\n              return res(data);\n            });\n          });\n        })];\n      });\n    });\n  };\n  /**\n   * @private\n   * @param config\n   * Init the clients\n   */\n  AWSPinpointProvider.prototype._initClients = function (config, credentials) {\n    return __awaiter(this, void 0, void 0, function () {\n      var region;\n      return __generator(this, function (_a) {\n        logger.debug('init clients');\n        if (this.mobileAnalytics && this.pinpointClient && this._config.credentials && this._config.credentials.sessionToken === credentials.sessionToken && this._config.credentials.identityId === credentials.identityId) {\n          logger.debug('no change for aws credentials, directly return from init');\n          return [2 /*return*/];\n        }\n\n        this._config.credentials = credentials;\n        region = config.region;\n        logger.debug('init clients with credentials', credentials);\n        this.mobileAnalytics = new MobileAnalytics({\n          credentials: credentials,\n          region: region\n        });\n        this.pinpointClient = new Pinpoint({\n          region: region,\n          credentials: credentials\n        });\n        if (Platform.isReactNative) {\n          this.pinpointClient.customizeRequests(function (request) {\n            request.on('build', function (req) {\n              req.httpRequest.headers['user-agent'] = Platform.userAgent;\n            });\n          });\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  AWSPinpointProvider.prototype._getEndpointId = function (cacheKey) {\n    return __awaiter(this, void 0, void 0, function () {\n      var endpointId;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Cache.getItem(cacheKey)];\n          case 1:\n            endpointId = _a.sent();\n            logger.debug('endpointId from cache', endpointId, 'type', typeof endpointId);\n            if (!endpointId) {\n              endpointId = uuid();\n              Cache.setItem(cacheKey, endpointId);\n            }\n            return [2 /*return*/, endpointId];\n        }\n      });\n    });\n  };\n  /**\n   * EndPoint request\n   * @return {Object} - The request of updating endpoint\n   */\n  AWSPinpointProvider.prototype._endpointRequest = function (config, event) {\n    var credentials = config.credentials;\n    var clientInfo = this._clientInfo || {};\n    var clientContext = config.clientContext || {};\n    // for now we have three different ways for default endpoint configurations\n    // clientInfo\n    // clientContext (deprecated)\n    // config.endpoint\n    var defaultEndpointConfig = config.endpoint || {};\n    var demographicByClientInfo = {\n      appVersion: clientInfo.appVersion,\n      make: clientInfo.make,\n      model: clientInfo.model,\n      modelVersion: clientInfo.version,\n      platform: clientInfo.platform\n    };\n    // for backward compatibility\n    var clientId = clientContext.clientId,\n      appTitle = clientContext.appTitle,\n      appVersionName = clientContext.appVersionName,\n      appVersionCode = clientContext.appVersionCode,\n      appPackageName = clientContext.appPackageName,\n      demographicByClientContext = __rest(clientContext, [\"clientId\", \"appTitle\", \"appVersionName\", \"appVersionCode\", \"appPackageName\"]);\n    var channelType = event.address ? clientInfo.platform === 'android' ? 'GCM' : 'APNS' : undefined;\n    var tmp = __assign(__assign(__assign({\n      channelType: channelType,\n      requestId: uuid(),\n      effectiveDate: new Date().toISOString()\n    }, defaultEndpointConfig), event), {\n      attributes: __assign(__assign({}, defaultEndpointConfig.attributes), event.attributes),\n      demographic: __assign(__assign(__assign(__assign({}, demographicByClientInfo), demographicByClientContext), defaultEndpointConfig.demographic), event.demographic),\n      location: __assign(__assign({}, defaultEndpointConfig.location), event.location),\n      metrics: __assign(__assign({}, defaultEndpointConfig.metrics), event.metrics),\n      user: {\n        userId: event.userId || defaultEndpointConfig.userId || credentials.identityId,\n        userAttributes: __assign(__assign({}, defaultEndpointConfig.userAttributes), event.userAttributes)\n      }\n    });\n    // eliminate unnecessary params\n    var userId = tmp.userId,\n      userAttributes = tmp.userAttributes,\n      name = tmp.name,\n      session = tmp.session,\n      eventId = tmp.eventId,\n      immediate = tmp.immediate,\n      ret = __rest(tmp, [\"userId\", \"userAttributes\", \"name\", \"session\", \"eventId\", \"immediate\"]);\n    return JS.transferKeyToUpperCase(ret, [], ['metrics', 'userAttributes', 'attributes']);\n  };\n  /**\n   * @private\n   * check if current credentials exists\n   */\n  AWSPinpointProvider.prototype._getCredentials = function () {\n    var that = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return null;\n      logger.debug('set credentials for analytics', credentials);\n      return Credentials.shear(credentials);\n    }).catch(function (err) {\n      logger.debug('ensure credentials error', err);\n      return null;\n    });\n  };\n  AWSPinpointProvider.category = 'Analytics';\n  AWSPinpointProvider.providerName = 'AWSPinpoint';\n  return AWSPinpointProvider;\n}();\nexport default AWSPinpointProvider;","map":{"version":3,"names":["ConsoleLogger","Logger","ClientDevice","Platform","Credentials","Signer","JS","Hub","MobileAnalytics","Pinpoint","Cache","v1","uuid","AMPLIFY_SYMBOL","Symbol","for","dispatchAnalyticsEvent","event","data","dispatch","logger","RETRYABLE_CODES","ACCEPTED_CODES","MOBILE_SERVICE_NAME","BEACON_SUPPORTED","navigator","sendBeacon","BUFFER_SIZE","FLUSH_SIZE","FLUSH_INTERVAL","RESEND_LIMIT","AWSPinpointProvider","config","_endpointGenerating","_buffer","_config","bufferSize","flushSize","flushInterval","resendLimit","_clientInfo","clientInfo","prototype","_setupTimer","_this","_timer","clearInterval","_a","that","setInterval","size","length","i","shift","params","handlers","_send","_putToBuffer","push","debug","reject","Error","getCategory","category","getProviderName","providerName","configure","conf","Object","assign","cacheKey","_getEndpointId","then","endpointId","catch","e","record","_getCredentials","credentials","sent","timestamp","Date","getTime","_generateSession","eventId","immediate","_sessionId","name","_sessionStartTimestamp","session","Id","StartTimestamp","toISOString","stopTimestamp","Duration","StopTimestamp","undefined","_updateEndpoint","_pinpointSendStopSession","_record","_generateBatchItemContext","attributes","metrics","appId","endpointContext","eventParams","ApplicationId","EventsRequest","BatchItem","endpointObj","EventType","Timestamp","Attributes","Metrics","Session","_pinpointPutEvents","request","pinpointClient","putEvents","on","httpRequest","path","send","err","error","warn","_b","_c","EventsResponse","Results","EventsItemResponse","StatusCode","Message","includes","resolve","_retry","region","accessInfo","secret_key","secretAccessKey","access_key","accessKeyId","session_token","sessionToken","url","body","JSON","stringify","method","serviceInfo","service","requestUrl","signUrl","success","eventName","_initClients","_endpointRequest","transferKeyToLowerCase","update_params","EndpointId","EndpointRequest","updateEndpoint","message","startsWith","_removeUnusedEndpoints","User","UserId","userId","Promise","res","rej","getUserEndpoints","endpoints","EndpointsResponse","Item","endpointToBeDeleted","timeStamp1","parse","timeStamp2","isNaN","mobileAnalytics","identityId","isReactNative","customizeRequests","req","headers","userAgent","getItem","setItem","clientContext","defaultEndpointConfig","endpoint","demographicByClientInfo","appVersion","make","model","modelVersion","version","platform","clientId","appTitle","appVersionName","appVersionCode","appPackageName","demographicByClientContext","__rest","channelType","address","tmp","__assign","requestId","effectiveDate","demographic","location","user","userAttributes","ret","transferKeyToUpperCase","get","shear"],"sources":["C:\\Study\\6805\\React\\reacthtml\\node_modules\\@aws-amplify\\analytics\\src\\Providers\\AWSPinpointProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\n\nimport {\n\tConsoleLogger as Logger,\n\tClientDevice,\n\tPlatform,\n\tCredentials,\n\tSigner,\n\tJS,\n\tHub,\n} from '@aws-amplify/core';\nimport * as MobileAnalytics from 'aws-sdk/clients/mobileanalytics';\nimport * as Pinpoint from 'aws-sdk/clients/pinpoint';\n\nimport Cache from '@aws-amplify/cache';\n\nimport { AnalyticsProvider, PromiseHandlers } from '../types';\nimport { v1 as uuid } from 'uuid';\n\nconst AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nconst dispatchAnalyticsEvent = (event, data) => {\n\tHub.dispatch('analytics', { event, data }, 'Analytics', AMPLIFY_SYMBOL);\n};\n\nconst logger = new Logger('AWSPinpointProvider');\nconst RETRYABLE_CODES = [429, 500];\nconst ACCEPTED_CODES = [202];\nconst MOBILE_SERVICE_NAME = 'mobiletargeting';\nconst BEACON_SUPPORTED =\n\tnavigator && typeof navigator.sendBeacon === 'function';\n\n// events buffer\nconst BUFFER_SIZE = 1000;\nconst FLUSH_SIZE = 100;\nconst FLUSH_INTERVAL = 5 * 1000; // 5s\nconst RESEND_LIMIT = 5;\n\n// params: { event: {name: , .... }, timeStamp, config, resendLimit }\nexport default class AWSPinpointProvider implements AnalyticsProvider {\n\tstatic category = 'Analytics';\n\tstatic providerName = 'AWSPinpoint';\n\n\tprivate _config;\n\tprivate mobileAnalytics;\n\tprivate pinpointClient;\n\tprivate _sessionId;\n\tprivate _sessionStartTimestamp;\n\tprivate _buffer;\n\tprivate _clientInfo;\n\tprivate _timer;\n\tprivate _endpointGenerating = true;\n\n\tconstructor(config?) {\n\t\tthis._buffer = [];\n\t\tthis._config = config ? config : {};\n\t\tthis._config.bufferSize = this._config.bufferSize || BUFFER_SIZE;\n\t\tthis._config.flushSize = this._config.flushSize || FLUSH_SIZE;\n\t\tthis._config.flushInterval = this._config.flushInterval || FLUSH_INTERVAL;\n\t\tthis._config.resendLimit = this._config.resendLimit || RESEND_LIMIT;\n\t\tthis._clientInfo = ClientDevice.clientInfo();\n\t}\n\n\tprivate _setupTimer() {\n\t\tif (this._timer) {\n\t\t\tclearInterval(this._timer);\n\t\t}\n\t\tconst { flushSize, flushInterval } = this._config;\n\t\tconst that = this;\n\t\tthis._timer = setInterval(() => {\n\t\t\tconst size =\n\t\t\t\tthis._buffer.length < flushSize ? this._buffer.length : flushSize;\n\t\t\tfor (let i = 0; i < size; i += 1) {\n\t\t\t\tconst { params, handlers } = this._buffer.shift();\n\t\t\t\tthat._send(params, handlers);\n\t\t\t\t// If this is the first request sent by Analytics module, we should stop sending remaining requests\n\t\t\t\t// to prevent race condition of updating one endpoint when it's being created in the backend\n\t\t\t\tif (this._endpointGenerating) break;\n\t\t\t}\n\t\t}, flushInterval);\n\t}\n\n\t/**\n\t * @private\n\t * @param params - params for the event recording\n\t * Put events into buffer\n\t */\n\tprivate _putToBuffer(params, handlers) {\n\t\tconst { bufferSize } = this._config;\n\t\tif (this._buffer.length < bufferSize) {\n\t\t\tthis._buffer.push({ params, handlers });\n\t\t} else {\n\t\t\tlogger.debug('exceed analytics events buffer size');\n\t\t\treturn handlers.reject(\n\t\t\t\tnew Error('Exceed the size of analytics events buffer')\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tgetCategory(): string {\n\t\treturn AWSPinpointProvider.category;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): string {\n\t\treturn AWSPinpointProvider.providerName;\n\t}\n\n\t/**\n\t * configure the plugin\n\t * @param {Object} config - configuration\n\t */\n\tpublic configure(config): object {\n\t\tlogger.debug('configure Analytics', config);\n\t\tconst conf = config ? config : {};\n\t\tthis._config = Object.assign({}, this._config, conf);\n\n\t\tif (this._config['appId'] && !this._config['disabled']) {\n\t\t\tif (!this._config['endpointId']) {\n\t\t\t\tconst cacheKey = this.getProviderName() + '_' + this._config['appId'];\n\t\t\t\tthis._getEndpointId(cacheKey)\n\t\t\t\t\t.then(endpointId => {\n\t\t\t\t\t\tlogger.debug('setting endpoint id from the cache', endpointId);\n\t\t\t\t\t\tthis._config['endpointId'] = endpointId;\n\t\t\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\tlogger.debug('Failed to generate endpointId', e);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tdispatchAnalyticsEvent('pinpointProvider_configured', null);\n\t\t\t}\n\t\t\tthis._setupTimer();\n\t\t} else {\n\t\t\tif (this._timer) {\n\t\t\t\tclearInterval(this._timer);\n\t\t\t}\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * record an event\n\t * @param {Object} params - the params of an event\n\t */\n\tpublic async record(params, handlers: PromiseHandlers) {\n\t\tconst credentials = await this._getCredentials();\n\t\tif (!credentials || !this._config['appId'] || !this._config['region']) {\n\t\t\tlogger.debug(\n\t\t\t\t'cannot send events without credentials, applicationId or region'\n\t\t\t);\n\t\t\treturn handlers.reject(\n\t\t\t\tnew Error('No credentials, applicationId or region')\n\t\t\t);\n\t\t}\n\t\tconst timestamp = new Date().getTime();\n\t\t// attach the session and eventId\n\t\tthis._generateSession(params);\n\t\tparams.event.eventId = uuid();\n\n\t\tObject.assign(params, { timestamp, config: this._config, credentials });\n\t\tif (params.event.immediate) {\n\t\t\treturn this._send(params, handlers);\n\t\t} else {\n\t\t\tthis._putToBuffer(params, handlers);\n\t\t}\n\t}\n\n\tprivate _generateSession(params) {\n\t\tthis._sessionId = this._sessionId || uuid();\n\t\tconst { event } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase '_session.start':\n\t\t\t\t// refresh the session id and session start time\n\t\t\t\tthis._sessionStartTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionId = uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t\tcase '_session.stop':\n\t\t\t\tconst stopTimestamp = new Date().getTime();\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tDuration: stopTimestamp - this._sessionStartTimestamp,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t\tStopTimestamp: new Date(stopTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tthis._sessionId = undefined;\n\t\t\t\tthis._sessionStartTimestamp = undefined;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis._sessionStartTimestamp =\n\t\t\t\t\tthis._sessionStartTimestamp || new Date().getTime();\n\t\t\t\tthis._sessionId = this._sessionId || uuid();\n\t\t\t\tevent.session = {\n\t\t\t\t\tId: this._sessionId,\n\t\t\t\t\tStartTimestamp: new Date(this._sessionStartTimestamp).toISOString(),\n\t\t\t\t};\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async _send(params, handlers) {\n\t\tconst { event, config } = params;\n\n\t\tswitch (event.name) {\n\t\t\tcase '_update_endpoint':\n\t\t\t\treturn this._updateEndpoint(params, handlers);\n\t\t\tcase '_session.stop':\n\t\t\t\treturn this._pinpointSendStopSession(params, handlers);\n\t\t\tdefault:\n\t\t\t\treturn this._record(params, handlers);\n\t\t}\n\t}\n\n\tprivate _generateBatchItemContext(params) {\n\t\tconst { event, timestamp, config, credentials } = params;\n\t\tconst { name, attributes, metrics, eventId, session } = event;\n\t\tconst { appId, endpointId } = config;\n\n\t\tconst endpointContext = {};\n\n\t\tconst eventParams = {\n\t\t\tApplicationId: appId,\n\t\t\tEventsRequest: {\n\t\t\t\tBatchItem: {},\n\t\t\t},\n\t\t};\n\n\t\teventParams.EventsRequest.BatchItem[endpointId] = {};\n\t\tconst endpointObj = eventParams.EventsRequest.BatchItem[endpointId];\n\t\tendpointObj['Endpoint'] = endpointContext;\n\t\tendpointObj['Events'] = {};\n\t\tendpointObj['Events'][eventId] = {\n\t\t\tEventType: name,\n\t\t\tTimestamp: new Date(timestamp).toISOString(),\n\t\t\tAttributes: attributes,\n\t\t\tMetrics: metrics,\n\t\t\tSession: session,\n\t\t};\n\n\t\treturn eventParams;\n\t}\n\n\tprivate async _pinpointPutEvents(params, handlers) {\n\t\tconst {\n\t\t\tevent: { eventId },\n\t\t\tconfig: { endpointId },\n\t\t} = params;\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\n\t\tconst request = this.pinpointClient.putEvents(eventParams);\n\t\t// in order to keep backward compatiblity\n\t\t// we are using a legacy api: /apps/{appid}/events/legacy\n\t\t// so that users don't need to update their IAM Policy\n\t\t// will use the formal one in the next break release\n\t\trequest.on('build', function() {\n\t\t\trequest.httpRequest.path = request.httpRequest.path + '/legacy';\n\t\t});\n\n\t\trequest.send((err, data) => {\n\t\t\tif (err) {\n\t\t\t\tlogger.error('record event failed. ', err);\n\t\t\t\tlogger.warn(\n\t\t\t\t\t'If you have not updated your Pinpoint IAM Policy' +\n\t\t\t\t\t\t' with the Action: \"mobiletargeting:PutEvents\" yet, please do it.' +\n\t\t\t\t\t\t' This action is not necessary for now' +\n\t\t\t\t\t\t' but in order to avoid breaking changes in the future,' +\n\t\t\t\t\t\t' please update it as soon as possible.'\n\t\t\t\t);\n\t\t\t\treturn handlers.reject(err);\n\t\t\t} else {\n\t\t\t\tconst {\n\t\t\t\t\tEventsResponse: {\n\t\t\t\t\t\tResults: {\n\t\t\t\t\t\t\t[endpointId]: {\n\t\t\t\t\t\t\t\tEventsItemResponse: {\n\t\t\t\t\t\t\t\t\t[eventId]: { StatusCode, Message },\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t} = data;\n\t\t\t\tif (ACCEPTED_CODES.includes(StatusCode)) {\n\t\t\t\t\tthis._endpointGenerating = false;\n\t\t\t\t\tlogger.debug('record event success. ', data);\n\t\t\t\t\treturn handlers.resolve(data);\n\t\t\t\t} else {\n\t\t\t\t\tif (RETRYABLE_CODES.includes(StatusCode)) {\n\t\t\t\t\t\tthis._retry(params, handlers);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.error(\n\t\t\t\t\t\t\t`Event ${eventId} is not accepted, the error is ${Message}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn handlers.reject(data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _pinpointSendStopSession(params, handlers): Promise<string> {\n\t\tif (!BEACON_SUPPORTED) {\n\t\t\tthis._record(params, handlers);\n\t\t\treturn;\n\t\t}\n\n\t\tconst eventParams = this._generateBatchItemContext(params);\n\n\t\tconst { region } = this._config;\n\t\tconst { ApplicationId, EventsRequest } = eventParams;\n\n\t\tconst accessInfo = {\n\t\t\tsecret_key: this._config.credentials.secretAccessKey,\n\t\t\taccess_key: this._config.credentials.accessKeyId,\n\t\t\tsession_token: this._config.credentials.sessionToken,\n\t\t};\n\n\t\tconst url = `https://pinpoint.${region}.amazonaws.com/v1/apps/${ApplicationId}/events`;\n\t\tconst body = JSON.stringify(EventsRequest);\n\t\tconst method = 'POST';\n\n\t\tconst request = {\n\t\t\turl,\n\t\t\tbody,\n\t\t\tmethod,\n\t\t};\n\n\t\tconst serviceInfo = { region, service: MOBILE_SERVICE_NAME };\n\n\t\tconst requestUrl: string = Signer.signUrl(\n\t\t\trequest,\n\t\t\taccessInfo,\n\t\t\tserviceInfo,\n\t\t\tnull\n\t\t);\n\n\t\tconst success: boolean = navigator.sendBeacon(requestUrl, body);\n\n\t\tif (success) {\n\t\t\treturn handlers.resolve('sendBeacon success');\n\t\t}\n\t\treturn handlers.reject('sendBeacon failure');\n\t}\n\n\tprivate _retry(params, handlers) {\n\t\tconst {\n\t\t\tconfig: { resendLimit },\n\t\t} = params;\n\t\t// For backward compatibility\n\t\tparams.resendLimit =\n\t\t\ttypeof params.resendLimit === 'number' ? params.resendLimit : resendLimit;\n\t\tif (params.resendLimit-- > 0) {\n\t\t\tlogger.debug(\n\t\t\t\t`resending event ${params.eventName} with ${\n\t\t\t\t\tparams.resendLimit\n\t\t\t\t} retry times left`\n\t\t\t);\n\t\t\tthis._putToBuffer(params, handlers);\n\t\t} else {\n\t\t\tlogger.debug(`retry times used up for event ${params.eventName}`);\n\t\t}\n\t}\n\n\tprivate async _record(params, handlers) {\n\t\t// credentials updated\n\t\tconst { event, timestamp, config, credentials } = params;\n\t\tthis._initClients(config, credentials);\n\t\treturn this._pinpointPutEvents(params, handlers);\n\t}\n\n\tprivate async _updateEndpoint(params, handlers) {\n\t\t// credentials updated\n\t\tconst { timestamp, config, credentials, event } = params;\n\t\tconst { appId, region, endpointId } = config;\n\n\t\tthis._initClients(config, credentials);\n\n\t\tconst request = this._endpointRequest(\n\t\t\tconfig,\n\t\t\tJS.transferKeyToLowerCase(\n\t\t\t\tevent,\n\t\t\t\t[],\n\t\t\t\t['attributes', 'userAttributes', 'Attributes', 'UserAttributes']\n\t\t\t)\n\t\t);\n\t\tconst update_params = {\n\t\t\tApplicationId: appId,\n\t\t\tEndpointId: endpointId,\n\t\t\tEndpointRequest: request,\n\t\t};\n\n\t\tconst that = this;\n\t\tlogger.debug('updateEndpoint with params: ', update_params);\n\n\t\tthat.pinpointClient.updateEndpoint(update_params, (err, data) => {\n\t\t\tif (err) {\n\t\t\t\tlogger.debug('updateEndpoint failed', err);\n\t\t\t\tif (\n\t\t\t\t\terr.message.startsWith('Exceeded maximum endpoint per user count')\n\t\t\t\t) {\n\t\t\t\t\tthis._removeUnusedEndpoints(appId, request.User.UserId)\n\t\t\t\t\t\t.then(() => {\n\t\t\t\t\t\t\tlogger.debug('Remove the unused endpoints successfully');\n\t\t\t\t\t\t\tthis._retry(params, handlers);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(e => {\n\t\t\t\t\t\t\tlogger.warn(`Failed to remove unused endpoints with error: ${e}`);\n\t\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t\t`Please ensure you have updated your Pinpoint IAM Policy ` +\n\t\t\t\t\t\t\t\t\t`with the Action: \"mobiletargeting:GetUserEndpoints\" ` +\n\t\t\t\t\t\t\t\t\t`in order to get endpoints info of the user`\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\treturn handlers.reject(err);\n\t\t\t\t\t\t});\n\t\t\t\t} else return handlers.reject(err);\n\t\t\t} else {\n\t\t\t\tlogger.debug('updateEndpoint success', data);\n\t\t\t\tthis._endpointGenerating = false;\n\t\t\t\treturn handlers.resolve(data);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _removeUnusedEndpoints(appId, userId) {\n\t\treturn new Promise((res, rej) => {\n\t\t\tthis.pinpointClient.getUserEndpoints(\n\t\t\t\t{\n\t\t\t\t\tApplicationId: appId,\n\t\t\t\t\tUserId: userId,\n\t\t\t\t},\n\t\t\t\t(err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t`Failed to get endpoints associated with the userId: ${userId} with error`,\n\t\t\t\t\t\t\terr\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t}\n\t\t\t\t\tconst endpoints = data.EndpointsResponse.Item;\n\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t`get endpoints associated with the userId: ${userId} with data`,\n\t\t\t\t\t\tendpoints\n\t\t\t\t\t);\n\t\t\t\t\tlet endpointToBeDeleted = endpoints[0];\n\t\t\t\t\tfor (let i = 1; i < endpoints.length; i++) {\n\t\t\t\t\t\tconst timeStamp1 = Date.parse(endpointToBeDeleted['EffectiveDate']);\n\t\t\t\t\t\tconst timeStamp2 = Date.parse(endpoints[i]['EffectiveDate']);\n\t\t\t\t\t\t// delete the one with invalid effective date\n\t\t\t\t\t\tif (isNaN(timeStamp1)) break;\n\t\t\t\t\t\tif (isNaN(timeStamp2)) {\n\t\t\t\t\t\t\tendpointToBeDeleted = endpoints[i];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (timeStamp2 < timeStamp1) {\n\t\t\t\t\t\t\tendpointToBeDeleted = endpoints[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// update the endpoint's user id with an empty string\n\t\t\t\t\tconst update_params = {\n\t\t\t\t\t\tApplicationId: appId,\n\t\t\t\t\t\tEndpointId: endpointToBeDeleted['Id'],\n\t\t\t\t\t\tEndpointRequest: {\n\t\t\t\t\t\t\tUser: {\n\t\t\t\t\t\t\t\tUserId: '',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t};\n\t\t\t\t\tthis.pinpointClient.updateEndpoint(update_params, (err, data) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tlogger.debug('Failed to update the endpoint', err);\n\t\t\t\t\t\t\treturn rej(err);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tlogger.debug(\n\t\t\t\t\t\t\t'The old endpoint is updated with an empty string for user id'\n\t\t\t\t\t\t);\n\t\t\t\t\t\treturn res(data);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t * @param config\n\t * Init the clients\n\t */\n\tprivate async _initClients(config, credentials) {\n\t\tlogger.debug('init clients');\n\n\t\tif (\n\t\t\tthis.mobileAnalytics &&\n\t\t\tthis.pinpointClient &&\n\t\t\tthis._config.credentials &&\n\t\t\tthis._config.credentials.sessionToken === credentials.sessionToken &&\n\t\t\tthis._config.credentials.identityId === credentials.identityId\n\t\t) {\n\t\t\tlogger.debug('no change for aws credentials, directly return from init');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._config.credentials = credentials;\n\t\tconst { region } = config;\n\t\tlogger.debug('init clients with credentials', credentials);\n\t\tthis.mobileAnalytics = new MobileAnalytics({ credentials, region });\n\t\tthis.pinpointClient = new Pinpoint({ region, credentials });\n\n\t\tif (Platform.isReactNative) {\n\t\t\tthis.pinpointClient.customizeRequests(function(request) {\n\t\t\t\trequest.on('build', function(req) {\n\t\t\t\t\treq.httpRequest.headers['user-agent'] = Platform.userAgent;\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t}\n\n\tprivate async _getEndpointId(cacheKey) {\n\t\t// try to get from cache\n\t\tlet endpointId = await Cache.getItem(cacheKey);\n\t\tlogger.debug(\n\t\t\t'endpointId from cache',\n\t\t\tendpointId,\n\t\t\t'type',\n\t\t\ttypeof endpointId\n\t\t);\n\t\tif (!endpointId) {\n\t\t\tendpointId = uuid();\n\t\t\tCache.setItem(cacheKey, endpointId);\n\t\t}\n\t\treturn endpointId;\n\t}\n\n\t/**\n\t * EndPoint request\n\t * @return {Object} - The request of updating endpoint\n\t */\n\tprivate _endpointRequest(config, event) {\n\t\tconst { credentials } = config;\n\t\tconst clientInfo = this._clientInfo || {};\n\t\tconst clientContext = config.clientContext || {};\n\t\t// for now we have three different ways for default endpoint configurations\n\t\t// clientInfo\n\t\t// clientContext (deprecated)\n\t\t// config.endpoint\n\t\tconst defaultEndpointConfig = config.endpoint || {};\n\t\tconst demographicByClientInfo = {\n\t\t\tappVersion: clientInfo.appVersion,\n\t\t\tmake: clientInfo.make,\n\t\t\tmodel: clientInfo.model,\n\t\t\tmodelVersion: clientInfo.version,\n\t\t\tplatform: clientInfo.platform,\n\t\t};\n\t\t// for backward compatibility\n\t\tconst {\n\t\t\tclientId,\n\t\t\tappTitle,\n\t\t\tappVersionName,\n\t\t\tappVersionCode,\n\t\t\tappPackageName,\n\t\t\t...demographicByClientContext\n\t\t} = clientContext;\n\t\tconst channelType = event.address\n\t\t\t? clientInfo.platform === 'android'\n\t\t\t\t? 'GCM'\n\t\t\t\t: 'APNS'\n\t\t\t: undefined;\n\t\tconst tmp = {\n\t\t\tchannelType,\n\t\t\trequestId: uuid(),\n\t\t\teffectiveDate: new Date().toISOString(),\n\t\t\t...defaultEndpointConfig,\n\t\t\t...event,\n\t\t\tattributes: {\n\t\t\t\t...defaultEndpointConfig.attributes,\n\t\t\t\t...event.attributes,\n\t\t\t},\n\t\t\tdemographic: {\n\t\t\t\t...demographicByClientInfo,\n\t\t\t\t...demographicByClientContext,\n\t\t\t\t...defaultEndpointConfig.demographic,\n\t\t\t\t...event.demographic,\n\t\t\t},\n\t\t\tlocation: {\n\t\t\t\t...defaultEndpointConfig.location,\n\t\t\t\t...event.location,\n\t\t\t},\n\t\t\tmetrics: {\n\t\t\t\t...defaultEndpointConfig.metrics,\n\t\t\t\t...event.metrics,\n\t\t\t},\n\t\t\tuser: {\n\t\t\t\tuserId:\n\t\t\t\t\tevent.userId ||\n\t\t\t\t\tdefaultEndpointConfig.userId ||\n\t\t\t\t\tcredentials.identityId,\n\t\t\t\tuserAttributes: {\n\t\t\t\t\t...defaultEndpointConfig.userAttributes,\n\t\t\t\t\t...event.userAttributes,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\n\t\t// eliminate unnecessary params\n\t\tconst {\n\t\t\tuserId,\n\t\t\tuserAttributes,\n\t\t\tname,\n\t\t\tsession,\n\t\t\teventId,\n\t\t\timmediate,\n\t\t\t...ret\n\t\t} = tmp;\n\t\treturn JS.transferKeyToUpperCase(\n\t\t\tret,\n\t\t\t[],\n\t\t\t['metrics', 'userAttributes', 'attributes']\n\t\t);\n\t}\n\n\t/**\n\t * @private\n\t * check if current credentials exists\n\t */\n\tprivate _getCredentials() {\n\t\tconst that = this;\n\t\treturn Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return null;\n\t\t\t\tlogger.debug('set credentials for analytics', credentials);\n\t\t\t\treturn Credentials.shear(credentials);\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.debug('ensure credentials error', err);\n\t\t\t\treturn null;\n\t\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}