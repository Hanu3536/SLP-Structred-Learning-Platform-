{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nvar randomBytes = function randomBytes(nBytes) {\n  return Buffer.from(CryptoJS.lib.WordArray.random(nBytes).toString(), 'hex');\n};\nimport BigInteger from './BigInteger';\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\n/** @class */\n\nvar AuthenticationHelper = function () {\n  /**\n   * Constructs a new AuthenticationHelper object\n   * @param {string} PoolName Cognito user pool name.\n   */\n  function AuthenticationHelper(PoolName) {\n    _classCallCheck(this, AuthenticationHelper);\n    this.N = new BigInteger(initN, 16);\n    this.g = new BigInteger('2', 16);\n    this.k = new BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n    this.smallAValue = this.generateRandomSmallA();\n    this.getLargeAValue(function () {});\n    this.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n    this.poolName = PoolName;\n  }\n\n  /**\n   * @returns {BigInteger} small A, a random number\n   */\n\n  AuthenticationHelper.prototype.getSmallAValue = function getSmallAValue() {\n    return this.smallAValue;\n  };\n\n  /**\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   */\n\n  AuthenticationHelper.prototype.getLargeAValue = function getLargeAValue(callback) {\n    var _this = this;\n    if (this.largeAValue) {\n      callback(null, this.largeAValue);\n    } else {\n      this.calculateA(this.smallAValue, function (err, largeAValue) {\n        if (err) {\n          callback(err, null);\n        }\n        _this.largeAValue = largeAValue;\n        callback(null, _this.largeAValue);\n      });\n    }\n  };\n\n  /**\n   * helper function to generate a random big integer\n   * @returns {BigInteger} a random value.\n   * @private\n   */\n\n  AuthenticationHelper.prototype.generateRandomSmallA = function generateRandomSmallA() {\n    var hexRandom = randomBytes(128).toString('hex');\n    var randomBigInt = new BigInteger(hexRandom, 16);\n    var smallABigInt = randomBigInt.mod(this.N);\n    return smallABigInt;\n  };\n\n  /**\n   * helper function to generate a random string\n   * @returns {string} a random value.\n   * @private\n   */\n\n  AuthenticationHelper.prototype.generateRandomString = function generateRandomString() {\n    return randomBytes(40).toString('base64');\n  };\n\n  /**\n   * @returns {string} Generated random value included in password hash.\n   */\n\n  AuthenticationHelper.prototype.getRandomPassword = function getRandomPassword() {\n    return this.randomPassword;\n  };\n\n  /**\n   * @returns {string} Generated random value included in devices hash.\n   */\n\n  AuthenticationHelper.prototype.getSaltDevices = function getSaltDevices() {\n    return this.SaltToHashDevices;\n  };\n\n  /**\n   * @returns {string} Value used to verify devices.\n   */\n\n  AuthenticationHelper.prototype.getVerifierDevices = function getVerifierDevices() {\n    return this.verifierDevices;\n  };\n\n  /**\n   * Generate salts and compute verifier.\n   * @param {string} deviceGroupKey Devices to generate verifier for.\n   * @param {string} username User to generate verifier for.\n   * @param {nodeCallback<null>} callback Called with (err, null)\n   * @returns {void}\n   */\n\n  AuthenticationHelper.prototype.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n    var _this2 = this;\n    this.randomPassword = this.generateRandomString();\n    var combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n    var hashedString = this.hash(combinedString);\n    var hexRandom = randomBytes(16).toString('hex');\n    this.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n    this.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n      if (err) {\n        callback(err, null);\n      }\n      _this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n      callback(null, null);\n    });\n  };\n\n  /**\n   * Calculate the client's public value A = g^a%N\n   * with the generated random number a\n   * @param {BigInteger} a Randomly generated small A.\n   * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n   * @returns {void}\n   * @private\n   */\n\n  AuthenticationHelper.prototype.calculateA = function calculateA(a, callback) {\n    var _this3 = this;\n    this.g.modPow(a, this.N, function (err, A) {\n      if (err) {\n        callback(err, null);\n      }\n      if (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n        callback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n      }\n      callback(null, A);\n    });\n  };\n\n  /**\n   * Calculate the client's value U which is the hash of A and B\n   * @param {BigInteger} A Large A value.\n   * @param {BigInteger} B Server B value.\n   * @returns {BigInteger} Computed U value.\n   * @private\n   */\n\n  AuthenticationHelper.prototype.calculateU = function calculateU(A, B) {\n    this.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n    var finalU = new BigInteger(this.UHexHash, 16);\n    return finalU;\n  };\n\n  /**\n   * Calculate a hash from a bitArray\n   * @param {Buffer} buf Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n\n  AuthenticationHelper.prototype.hash = function hash(buf) {\n    var str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n    var hashHex = SHA256(str).toString();\n    return new Array(64 - hashHex.length).join('0') + hashHex;\n  };\n\n  /**\n   * Calculate a hash from a hex string\n   * @param {String} hexStr Value to hash.\n   * @returns {String} Hex-encoded hash.\n   * @private\n   */\n\n  AuthenticationHelper.prototype.hexHash = function hexHash(hexStr) {\n    return this.hash(Buffer.from(hexStr, 'hex'));\n  };\n\n  /**\n   * Standard hkdf algorithm\n   * @param {Buffer} ikm Input key material.\n   * @param {Buffer} salt Salt value.\n   * @returns {Buffer} Strong key material.\n   * @private\n   */\n\n  AuthenticationHelper.prototype.computehkdf = function computehkdf(ikm, salt) {\n    var infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n    var ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n    var saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n    var prk = HmacSHA256(ikmWordArray, saltWordArray);\n    var hmac = HmacSHA256(infoBitsWordArray, prk);\n    return Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n  };\n\n  /**\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\n   * @param {String} username Username.\n   * @param {String} password Password.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {BigInteger} salt Generated salt.\n   * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n   * @returns {void}\n   */\n\n  AuthenticationHelper.prototype.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n    var _this4 = this;\n    if (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n      throw new Error('B cannot be zero.');\n    }\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\n    if (this.UValue.equals(BigInteger.ZERO)) {\n      throw new Error('U cannot be zero.');\n    }\n    var usernamePassword = '' + this.poolName + username + ':' + password;\n    var usernamePasswordHash = this.hash(usernamePassword);\n    var xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n    this.calculateS(xValue, serverBValue, function (err, sValue) {\n      if (err) {\n        callback(err, null);\n      }\n      var hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue.toString(16)), 'hex'));\n      callback(null, hkdf);\n    });\n  };\n\n  /**\n   * Calculates the S value used in getPasswordAuthenticationKey\n   * @param {BigInteger} xValue Salted password hash value.\n   * @param {BigInteger} serverBValue Server B value.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  AuthenticationHelper.prototype.calculateS = function calculateS(xValue, serverBValue, callback) {\n    var _this5 = this;\n    this.g.modPow(xValue, this.N, function (err, gModPowXN) {\n      if (err) {\n        callback(err, null);\n      }\n      var intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n      intValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n        if (err2) {\n          callback(err2, null);\n        }\n        callback(null, result.mod(_this5.N));\n      });\n    });\n  };\n\n  /**\n   * Return constant newPasswordRequiredChallengeUserAttributePrefix\n   * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n   */\n\n  AuthenticationHelper.prototype.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n    return newPasswordRequiredChallengeUserAttributePrefix;\n  };\n\n  /**\n   * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n   * @param {BigInteger|String} bigInt Number or string to pad.\n   * @returns {String} Padded hex string.\n   */\n\n  AuthenticationHelper.prototype.padHex = function padHex(bigInt) {\n    var hashStr = bigInt.toString(16);\n    if (hashStr.length % 2 === 1) {\n      hashStr = '0' + hashStr;\n    } else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n      hashStr = '00' + hashStr;\n    }\n    return hashStr;\n  };\n  return AuthenticationHelper;\n}();\nexport default AuthenticationHelper;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","Buffer","CryptoJS","SHA256","HmacSHA256","randomBytes","nBytes","from","lib","WordArray","random","toString","BigInteger","initN","newPasswordRequiredChallengeUserAttributePrefix","AuthenticationHelper","PoolName","N","g","k","hexHash","smallAValue","generateRandomSmallA","getLargeAValue","infoBits","poolName","prototype","getSmallAValue","callback","_this","largeAValue","calculateA","err","hexRandom","randomBigInt","smallABigInt","mod","generateRandomString","getRandomPassword","randomPassword","getSaltDevices","SaltToHashDevices","getVerifierDevices","verifierDevices","generateHashDevice","deviceGroupKey","username","_this2","combinedString","hashedString","hash","padHex","modPow","verifierDevicesNotPadded","a","_this3","A","equals","ZERO","Error","calculateU","B","UHexHash","finalU","buf","str","create","hashHex","Array","length","join","hexStr","computehkdf","ikm","salt","infoBitsWordArray","concat","String","fromCharCode","ikmWordArray","saltWordArray","prk","hmac","slice","getPasswordAuthenticationKey","password","serverBValue","_this4","UValue","usernamePassword","usernamePasswordHash","xValue","calculateS","sValue","hkdf","_this5","gModPowXN","intValue2","subtract","multiply","add","err2","result","getNewPasswordRequiredChallengeUserAttributePrefix","bigInt","hashStr","indexOf"],"sources":["C:/Study/6805/React/reacthtml/node_modules/amazon-cognito-identity-js/es/AuthenticationHelper.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport 'crypto-js/lib-typedarrays'; // necessary for crypto js\nimport SHA256 from 'crypto-js/sha256';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\n\nvar randomBytes = function randomBytes(nBytes) {\n\treturn Buffer.from(CryptoJS.lib.WordArray.random(nBytes).toString(), 'hex');\n};\n\nimport BigInteger from './BigInteger';\n\nvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\nvar newPasswordRequiredChallengeUserAttributePrefix = 'userAttributes.';\n\n/** @class */\n\nvar AuthenticationHelper = function () {\n\t/**\n  * Constructs a new AuthenticationHelper object\n  * @param {string} PoolName Cognito user pool name.\n  */\n\tfunction AuthenticationHelper(PoolName) {\n\t\t_classCallCheck(this, AuthenticationHelper);\n\n\t\tthis.N = new BigInteger(initN, 16);\n\t\tthis.g = new BigInteger('2', 16);\n\t\tthis.k = new BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n\n\t\tthis.smallAValue = this.generateRandomSmallA();\n\t\tthis.getLargeAValue(function () {});\n\n\t\tthis.infoBits = Buffer.from('Caldera Derived Key', 'utf8');\n\n\t\tthis.poolName = PoolName;\n\t}\n\n\t/**\n  * @returns {BigInteger} small A, a random number\n  */\n\n\n\tAuthenticationHelper.prototype.getSmallAValue = function getSmallAValue() {\n\t\treturn this.smallAValue;\n\t};\n\n\t/**\n  * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n  * @returns {void}\n  */\n\n\n\tAuthenticationHelper.prototype.getLargeAValue = function getLargeAValue(callback) {\n\t\tvar _this = this;\n\n\t\tif (this.largeAValue) {\n\t\t\tcallback(null, this.largeAValue);\n\t\t} else {\n\t\t\tthis.calculateA(this.smallAValue, function (err, largeAValue) {\n\t\t\t\tif (err) {\n\t\t\t\t\tcallback(err, null);\n\t\t\t\t}\n\n\t\t\t\t_this.largeAValue = largeAValue;\n\t\t\t\tcallback(null, _this.largeAValue);\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n  * helper function to generate a random big integer\n  * @returns {BigInteger} a random value.\n  * @private\n  */\n\n\n\tAuthenticationHelper.prototype.generateRandomSmallA = function generateRandomSmallA() {\n\t\tvar hexRandom = randomBytes(128).toString('hex');\n\n\t\tvar randomBigInt = new BigInteger(hexRandom, 16);\n\t\tvar smallABigInt = randomBigInt.mod(this.N);\n\n\t\treturn smallABigInt;\n\t};\n\n\t/**\n  * helper function to generate a random string\n  * @returns {string} a random value.\n  * @private\n  */\n\n\n\tAuthenticationHelper.prototype.generateRandomString = function generateRandomString() {\n\t\treturn randomBytes(40).toString('base64');\n\t};\n\n\t/**\n  * @returns {string} Generated random value included in password hash.\n  */\n\n\n\tAuthenticationHelper.prototype.getRandomPassword = function getRandomPassword() {\n\t\treturn this.randomPassword;\n\t};\n\n\t/**\n  * @returns {string} Generated random value included in devices hash.\n  */\n\n\n\tAuthenticationHelper.prototype.getSaltDevices = function getSaltDevices() {\n\t\treturn this.SaltToHashDevices;\n\t};\n\n\t/**\n  * @returns {string} Value used to verify devices.\n  */\n\n\n\tAuthenticationHelper.prototype.getVerifierDevices = function getVerifierDevices() {\n\t\treturn this.verifierDevices;\n\t};\n\n\t/**\n  * Generate salts and compute verifier.\n  * @param {string} deviceGroupKey Devices to generate verifier for.\n  * @param {string} username User to generate verifier for.\n  * @param {nodeCallback<null>} callback Called with (err, null)\n  * @returns {void}\n  */\n\n\n\tAuthenticationHelper.prototype.generateHashDevice = function generateHashDevice(deviceGroupKey, username, callback) {\n\t\tvar _this2 = this;\n\n\t\tthis.randomPassword = this.generateRandomString();\n\t\tvar combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n\t\tvar hashedString = this.hash(combinedString);\n\n\t\tvar hexRandom = randomBytes(16).toString('hex');\n\t\tthis.SaltToHashDevices = this.padHex(new BigInteger(hexRandom, 16));\n\n\t\tthis.g.modPow(new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N, function (err, verifierDevicesNotPadded) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err, null);\n\t\t\t}\n\n\t\t\t_this2.verifierDevices = _this2.padHex(verifierDevicesNotPadded);\n\t\t\tcallback(null, null);\n\t\t});\n\t};\n\n\t/**\n  * Calculate the client's public value A = g^a%N\n  * with the generated random number a\n  * @param {BigInteger} a Randomly generated small A.\n  * @param {nodeCallback<BigInteger>} callback Called with (err, largeAValue)\n  * @returns {void}\n  * @private\n  */\n\n\n\tAuthenticationHelper.prototype.calculateA = function calculateA(a, callback) {\n\t\tvar _this3 = this;\n\n\t\tthis.g.modPow(a, this.N, function (err, A) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err, null);\n\t\t\t}\n\n\t\t\tif (A.mod(_this3.N).equals(BigInteger.ZERO)) {\n\t\t\t\tcallback(new Error('Illegal paramater. A mod N cannot be 0.'), null);\n\t\t\t}\n\n\t\t\tcallback(null, A);\n\t\t});\n\t};\n\n\t/**\n  * Calculate the client's value U which is the hash of A and B\n  * @param {BigInteger} A Large A value.\n  * @param {BigInteger} B Server B value.\n  * @returns {BigInteger} Computed U value.\n  * @private\n  */\n\n\n\tAuthenticationHelper.prototype.calculateU = function calculateU(A, B) {\n\t\tthis.UHexHash = this.hexHash(this.padHex(A) + this.padHex(B));\n\t\tvar finalU = new BigInteger(this.UHexHash, 16);\n\n\t\treturn finalU;\n\t};\n\n\t/**\n  * Calculate a hash from a bitArray\n  * @param {Buffer} buf Value to hash.\n  * @returns {String} Hex-encoded hash.\n  * @private\n  */\n\n\n\tAuthenticationHelper.prototype.hash = function hash(buf) {\n\t\tvar str = buf instanceof Buffer ? CryptoJS.lib.WordArray.create(buf) : buf;\n\t\tvar hashHex = SHA256(str).toString();\n\n\t\treturn new Array(64 - hashHex.length).join('0') + hashHex;\n\t};\n\n\t/**\n  * Calculate a hash from a hex string\n  * @param {String} hexStr Value to hash.\n  * @returns {String} Hex-encoded hash.\n  * @private\n  */\n\n\n\tAuthenticationHelper.prototype.hexHash = function hexHash(hexStr) {\n\t\treturn this.hash(Buffer.from(hexStr, 'hex'));\n\t};\n\n\t/**\n  * Standard hkdf algorithm\n  * @param {Buffer} ikm Input key material.\n  * @param {Buffer} salt Salt value.\n  * @returns {Buffer} Strong key material.\n  * @private\n  */\n\n\n\tAuthenticationHelper.prototype.computehkdf = function computehkdf(ikm, salt) {\n\t\tvar infoBitsWordArray = CryptoJS.lib.WordArray.create(Buffer.concat([this.infoBits, Buffer.from(String.fromCharCode(1), 'utf8')]));\n\t\tvar ikmWordArray = ikm instanceof Buffer ? CryptoJS.lib.WordArray.create(ikm) : ikm;\n\t\tvar saltWordArray = salt instanceof Buffer ? CryptoJS.lib.WordArray.create(salt) : salt;\n\n\t\tvar prk = HmacSHA256(ikmWordArray, saltWordArray);\n\t\tvar hmac = HmacSHA256(infoBitsWordArray, prk);\n\t\treturn Buffer.from(hmac.toString(), 'hex').slice(0, 16);\n\t};\n\n\t/**\n  * Calculates the final hkdf based on computed S value, and computed U value and the key\n  * @param {String} username Username.\n  * @param {String} password Password.\n  * @param {BigInteger} serverBValue Server B value.\n  * @param {BigInteger} salt Generated salt.\n  * @param {nodeCallback<Buffer>} callback Called with (err, hkdfValue)\n  * @returns {void}\n  */\n\n\n\tAuthenticationHelper.prototype.getPasswordAuthenticationKey = function getPasswordAuthenticationKey(username, password, serverBValue, salt, callback) {\n\t\tvar _this4 = this;\n\n\t\tif (serverBValue.mod(this.N).equals(BigInteger.ZERO)) {\n\t\t\tthrow new Error('B cannot be zero.');\n\t\t}\n\n\t\tthis.UValue = this.calculateU(this.largeAValue, serverBValue);\n\n\t\tif (this.UValue.equals(BigInteger.ZERO)) {\n\t\t\tthrow new Error('U cannot be zero.');\n\t\t}\n\n\t\tvar usernamePassword = '' + this.poolName + username + ':' + password;\n\t\tvar usernamePasswordHash = this.hash(usernamePassword);\n\n\t\tvar xValue = new BigInteger(this.hexHash(this.padHex(salt) + usernamePasswordHash), 16);\n\t\tthis.calculateS(xValue, serverBValue, function (err, sValue) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err, null);\n\t\t\t}\n\n\t\t\tvar hkdf = _this4.computehkdf(Buffer.from(_this4.padHex(sValue), 'hex'), Buffer.from(_this4.padHex(_this4.UValue.toString(16)), 'hex'));\n\n\t\t\tcallback(null, hkdf);\n\t\t});\n\t};\n\n\t/**\n  * Calculates the S value used in getPasswordAuthenticationKey\n  * @param {BigInteger} xValue Salted password hash value.\n  * @param {BigInteger} serverBValue Server B value.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tAuthenticationHelper.prototype.calculateS = function calculateS(xValue, serverBValue, callback) {\n\t\tvar _this5 = this;\n\n\t\tthis.g.modPow(xValue, this.N, function (err, gModPowXN) {\n\t\t\tif (err) {\n\t\t\t\tcallback(err, null);\n\t\t\t}\n\n\t\t\tvar intValue2 = serverBValue.subtract(_this5.k.multiply(gModPowXN));\n\t\t\tintValue2.modPow(_this5.smallAValue.add(_this5.UValue.multiply(xValue)), _this5.N, function (err2, result) {\n\t\t\t\tif (err2) {\n\t\t\t\t\tcallback(err2, null);\n\t\t\t\t}\n\n\t\t\t\tcallback(null, result.mod(_this5.N));\n\t\t\t});\n\t\t});\n\t};\n\n\t/**\n  * Return constant newPasswordRequiredChallengeUserAttributePrefix\n  * @return {newPasswordRequiredChallengeUserAttributePrefix} constant prefix value\n  */\n\n\n\tAuthenticationHelper.prototype.getNewPasswordRequiredChallengeUserAttributePrefix = function getNewPasswordRequiredChallengeUserAttributePrefix() {\n\t\treturn newPasswordRequiredChallengeUserAttributePrefix;\n\t};\n\n\t/**\n  * Converts a BigInteger (or hex string) to hex format padded with zeroes for hashing\n  * @param {BigInteger|String} bigInt Number or string to pad.\n  * @returns {String} Padded hex string.\n  */\n\n\n\tAuthenticationHelper.prototype.padHex = function padHex(bigInt) {\n\t\tvar hashStr = bigInt.toString(16);\n\t\tif (hashStr.length % 2 === 1) {\n\t\t\thashStr = '0' + hashStr;\n\t\t} else if ('89ABCDEFabcdef'.indexOf(hashStr[0]) !== -1) {\n\t\t\thashStr = '00' + hashStr;\n\t\t}\n\t\treturn hashStr;\n\t};\n\n\treturn AuthenticationHelper;\n}();\n\nexport default AuthenticationHelper;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}