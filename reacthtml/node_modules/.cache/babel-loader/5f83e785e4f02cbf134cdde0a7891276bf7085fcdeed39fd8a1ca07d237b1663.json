{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n/** @class */\n\nvar CognitoUser = function () {\n  /**\n   * Constructs a new CognitoUser object\n   * @param {object} data Creation options\n   * @param {string} data.Username The user's username.\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\n   * @param {object} data.Storage Optional storage object.\n   */\n  function CognitoUser(data) {\n    _classCallCheck(this, CognitoUser);\n    if (data == null || data.Username == null || data.Pool == null) {\n      throw new Error('Username and pool information are required.');\n    }\n    this.username = data.Username || '';\n    this.pool = data.Pool;\n    this.Session = null;\n    this.client = data.Pool.client;\n    this.signInUserSession = null;\n    this.authenticationFlowType = 'USER_SRP_AUTH';\n    this.storage = data.Storage || new StorageHelper().getStorage();\n    this.keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    this.userDataKey = this.keyPrefix + '.' + this.username + '.userData';\n  }\n\n  /**\n   * Sets the session for this user\n   * @param {CognitoUserSession} signInUserSession the session\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n    this.clearCachedUserData();\n    this.signInUserSession = signInUserSession;\n    this.cacheTokens();\n  };\n\n  /**\n   * @returns {CognitoUserSession} the current session for this user\n   */\n\n  CognitoUser.prototype.getSignInUserSession = function getSignInUserSession() {\n    return this.signInUserSession;\n  };\n\n  /**\n   * @returns {string} the user's username\n   */\n\n  CognitoUser.prototype.getUsername = function getUsername() {\n    return this.username;\n  };\n\n  /**\n   * @returns {String} the authentication flow type\n   */\n\n  CognitoUser.prototype.getAuthenticationFlowType = function getAuthenticationFlowType() {\n    return this.authenticationFlowType;\n  };\n\n  /**\n   * sets authentication flow type\n   * @param {string} authenticationFlowType New value.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n    this.authenticationFlowType = authenticationFlowType;\n  };\n\n  /**\n   * This is used for authenticating the user through the custom authentication flow.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.initiateAuth = function initiateAuth(authDetails, callback) {\n    var _this = this;\n    var authParameters = authDetails.getAuthParameters();\n    authParameters.USERNAME = this.username;\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'CUSTOM_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('InitiateAuth', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      var challengeName = data.ChallengeName;\n      var challengeParameters = data.ChallengeParameters;\n      if (challengeName === 'CUSTOM_CHALLENGE') {\n        _this.Session = data.Session;\n        return callback.customChallenge(challengeParameters);\n      }\n      _this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n      _this.cacheTokens();\n      return callback.onSuccess(_this.signInUserSession);\n    });\n  };\n\n  /**\n   * This is used for authenticating the user.\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.authenticateUser = function authenticateUser(authDetails, callback) {\n    if (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n      return this.authenticateUserPlainUsernamePassword(authDetails, callback);\n    } else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n      return this.authenticateUserDefaultAuth(authDetails, callback);\n    }\n    return callback.onFailure(new Error('Authentication flow type is invalid.'));\n  };\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * It calls the AuthenticationHelper for SRP related\n   * stuff\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {newPasswordRequired} callback.newPasswordRequired new\n   *        password and any required attributes are required to continue\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *        response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n    var _this2 = this;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var dateHelper = new DateHelper();\n    var serverBValue = void 0;\n    var salt = void 0;\n    var authParameters = {};\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    authParameters.USERNAME = this.username;\n    authenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n      // getLargeAValue callback start\n      if (errOnAValue) {\n        callback.onFailure(errOnAValue);\n      }\n      authParameters.SRP_A = aValue.toString(16);\n      if (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n        authParameters.CHALLENGE_NAME = 'SRP_A';\n      }\n      var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n      var jsonReq = {\n        AuthFlow: _this2.authenticationFlowType,\n        ClientId: _this2.pool.getClientId(),\n        AuthParameters: authParameters,\n        ClientMetadata: clientMetaData\n      };\n      if (_this2.getUserContextData(_this2.username)) {\n        jsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n      }\n      _this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        var challengeParameters = data.ChallengeParameters;\n        _this2.username = challengeParameters.USER_ID_FOR_SRP;\n        serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        salt = new BigInteger(challengeParameters.SALT, 16);\n        _this2.getCachedDeviceKeyAndPassword();\n        authenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errOnHkdf) {\n            callback.onFailure(errOnHkdf);\n          }\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this2.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          if (_this2.deviceKey != null) {\n            challengeResponses.DEVICE_KEY = _this2.deviceKey;\n          }\n          var respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n            return _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n              if (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n                challengeResponses.DEVICE_KEY = null;\n                _this2.deviceKey = null;\n                _this2.randomPassword = null;\n                _this2.deviceGroupKey = null;\n                _this2.clearCachedDeviceKeyAndPassword();\n                return respondToAuthChallenge(challenge, challengeCallback);\n              }\n              return challengeCallback(errChallenge, dataChallenge);\n            });\n          };\n          var jsonReqResp = {\n            ChallengeName: 'PASSWORD_VERIFIER',\n            ClientId: _this2.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session,\n            ClientMetadata: clientMetaData\n          };\n          if (_this2.getUserContextData()) {\n            jsonReqResp.UserContextData = _this2.getUserContextData();\n          }\n          respondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n            return _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n          });\n          return undefined;\n          // getPasswordAuthenticationKey callback end\n        });\n\n        return undefined;\n      });\n      // getLargeAValue callback end\n    });\n  };\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {AuthenticationDetails} authDetails Contains the authentication data.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code\n   *        required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n    var _this3 = this;\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.PASSWORD = authDetails.getPassword();\n    if (!authParameters.PASSWORD) {\n      callback.onFailure(new Error('PASSWORD parameter is required'));\n      return;\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    var clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n    var jsonReq = {\n      AuthFlow: 'USER_PASSWORD_AUTH',\n      ClientId: this.pool.getClientId(),\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetaData\n    };\n    if (this.getUserContextData(this.username)) {\n      jsonReq.UserContextData = this.getUserContextData(this.username);\n    }\n    // USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n    // Cognito UserPools verifies password and returns tokens.\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n    });\n  };\n\n  /**\n   * PRIVATE ONLY: This is an internal only method and should not\n   * be directly called by the consumers.\n   * @param {object} dataAuthenticate authentication data\n   * @param {object} authenticationHelper helper created\n   * @param {callback} callback passed on from caller\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n    var _this4 = this;\n    var challengeName = dataAuthenticate.ChallengeName;\n    var challengeParameters = dataAuthenticate.ChallengeParameters;\n    if (challengeName === 'SMS_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaRequired(challengeName, challengeParameters);\n    }\n    if (challengeName === 'SELECT_MFA_TYPE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.selectMFAType(challengeName, challengeParameters);\n    }\n    if (challengeName === 'MFA_SETUP') {\n      this.Session = dataAuthenticate.Session;\n      return callback.mfaSetup(challengeName, challengeParameters);\n    }\n    if (challengeName === 'SOFTWARE_TOKEN_MFA') {\n      this.Session = dataAuthenticate.Session;\n      return callback.totpRequired(challengeName, challengeParameters);\n    }\n    if (challengeName === 'CUSTOM_CHALLENGE') {\n      this.Session = dataAuthenticate.Session;\n      return callback.customChallenge(challengeParameters);\n    }\n    if (challengeName === 'NEW_PASSWORD_REQUIRED') {\n      this.Session = dataAuthenticate.Session;\n      var userAttributes = null;\n      var rawRequiredAttributes = null;\n      var requiredAttributes = [];\n      var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n      if (challengeParameters) {\n        userAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n        rawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n      }\n      if (rawRequiredAttributes) {\n        for (var i = 0; i < rawRequiredAttributes.length; i++) {\n          requiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n        }\n      }\n      return callback.newPasswordRequired(userAttributes, requiredAttributes);\n    }\n    if (challengeName === 'DEVICE_SRP_AUTH') {\n      this.getDeviceResponse(callback);\n      return undefined;\n    }\n    this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n    this.challengeName = challengeName;\n    this.cacheTokens();\n    var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n    if (newDeviceMetadata == null) {\n      return callback.onSuccess(this.signInUserSession);\n    }\n    authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n      if (errGenHash) {\n        return callback.onFailure(errGenHash);\n      }\n      var deviceSecretVerifierConfig = {\n        Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n        PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n      };\n      _this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n      _this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n      _this4.randomPassword = authenticationHelper.getRandomPassword();\n      _this4.client.request('ConfirmDevice', {\n        DeviceKey: newDeviceMetadata.DeviceKey,\n        AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n        DeviceName: navigator.userAgent\n      }, function (errConfirm, dataConfirm) {\n        if (errConfirm) {\n          return callback.onFailure(errConfirm);\n        }\n        _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n        _this4.cacheDeviceKeyAndPassword();\n        if (dataConfirm.UserConfirmationNecessary === true) {\n          return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n        }\n        return callback.onSuccess(_this4.signInUserSession);\n      });\n      return undefined;\n    });\n    return undefined;\n  };\n\n  /**\n   * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n   * Pass the new password with any new user attributes to be updated.\n   * User attribute keys must be of format userAttributes.<attribute_name>.\n   * @param {string} newPassword new password for this user\n   * @param {object} requiredAttributeData map with values for all required attributes\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n   * @param {customChallenge} callback.customChallenge Custom challenge\n   *         response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n    var _this5 = this;\n    if (!newPassword) {\n      return callback.onFailure(new Error('New password is required.'));\n    }\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    var userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n    var finalUserAttributes = {};\n    if (requiredAttributeData) {\n      Object.keys(requiredAttributeData).forEach(function (key) {\n        finalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n      });\n    }\n    finalUserAttributes.NEW_PASSWORD = newPassword;\n    finalUserAttributes.USERNAME = this.username;\n    var jsonReq = {\n      ChallengeName: 'NEW_PASSWORD_REQUIRED',\n      ClientId: this.pool.getClientId(),\n      ChallengeResponses: finalUserAttributes,\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n      if (errAuthenticate) {\n        return callback.onFailure(errAuthenticate);\n      }\n      return _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to get a session using device authentication. It is called at the end of user\n   * authentication\n   *\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   * @private\n   */\n\n  CognitoUser.prototype.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n    var _this6 = this;\n    var authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n    var dateHelper = new DateHelper();\n    var authParameters = {};\n    authParameters.USERNAME = this.username;\n    authParameters.DEVICE_KEY = this.deviceKey;\n    authenticationHelper.getLargeAValue(function (errAValue, aValue) {\n      // getLargeAValue callback start\n      if (errAValue) {\n        callback.onFailure(errAValue);\n      }\n      authParameters.SRP_A = aValue.toString(16);\n      var jsonReq = {\n        ChallengeName: 'DEVICE_SRP_AUTH',\n        ClientId: _this6.pool.getClientId(),\n        ChallengeResponses: authParameters,\n        ClientMetadata: clientMetadata\n      };\n      if (_this6.getUserContextData()) {\n        jsonReq.UserContextData = _this6.getUserContextData();\n      }\n      _this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        var challengeParameters = data.ChallengeParameters;\n        var serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n        var salt = new BigInteger(challengeParameters.SALT, 16);\n        authenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n          // getPasswordAuthenticationKey callback start\n          if (errHkdf) {\n            return callback.onFailure(errHkdf);\n          }\n          var dateNow = dateHelper.getNowString();\n          var message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n          var key = CryptoJS.lib.WordArray.create(hkdf);\n          var signatureString = Base64.stringify(HmacSHA256(message, key));\n          var challengeResponses = {};\n          challengeResponses.USERNAME = _this6.username;\n          challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n          challengeResponses.TIMESTAMP = dateNow;\n          challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n          challengeResponses.DEVICE_KEY = _this6.deviceKey;\n          var jsonReqResp = {\n            ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n            ClientId: _this6.pool.getClientId(),\n            ChallengeResponses: challengeResponses,\n            Session: data.Session\n          };\n          if (_this6.getUserContextData()) {\n            jsonReqResp.UserContextData = _this6.getUserContextData();\n          }\n          _this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n            if (errAuthenticate) {\n              return callback.onFailure(errAuthenticate);\n            }\n            _this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n            _this6.cacheTokens();\n            return callback.onSuccess(_this6.signInUserSession);\n          });\n          return undefined;\n          // getPasswordAuthenticationKey callback end\n        });\n\n        return undefined;\n      });\n      // getLargeAValue callback end\n    });\n  };\n\n  /**\n   * This is used for a certain user to confirm the registration by using a confirmation code\n   * @param {string} confirmationCode Code entered by user.\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      ConfirmationCode: confirmationCode,\n      Username: this.username,\n      ForceAliasCreation: forceAliasCreation,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmSignUp', jsonReq, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n  };\n\n  /**\n   * This is used by the user once he has the responses to a custom challenge\n   * @param {string} answerChallenge The custom challenge answer.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {customChallenge} callback.customChallenge\n   *    Custom challenge response required to continue.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n    var _this7 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n    this.getCachedDeviceKeyAndPassword();\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ChallengeName: 'CUSTOM_CHALLENGE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return _this7.authenticateUserInternal(data, authenticationHelper, callback);\n    });\n  };\n\n  /**\n   * This is used by the user once he has an MFA code\n   * @param {string} confirmationCode The MFA code entered by the user.\n   * @param {object} callback Result callback map.\n   * @param {string} mfaType The mfa we are replying to.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n    var _this8 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\n    var mfaTypeSelection = mfaType || 'SMS_MFA';\n    if (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n      challengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n    }\n    if (this.deviceKey != null) {\n      challengeResponses.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ChallengeName: mfaTypeSelection,\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      var challengeName = dataAuthenticate.ChallengeName;\n      if (challengeName === 'DEVICE_SRP_AUTH') {\n        _this8.getDeviceResponse(callback);\n        return undefined;\n      }\n      _this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n      _this8.cacheTokens();\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n        return callback.onSuccess(_this8.signInUserSession);\n      }\n      var authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n      authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n        if (errGenHash) {\n          return callback.onFailure(errGenHash);\n        }\n        var deviceSecretVerifierConfig = {\n          Salt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n          PasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n        };\n        _this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n        _this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n        _this8.randomPassword = authenticationHelper.getRandomPassword();\n        _this8.client.request('ConfirmDevice', {\n          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n          AccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n          DeviceName: navigator.userAgent\n        }, function (errConfirm, dataConfirm) {\n          if (errConfirm) {\n            return callback.onFailure(errConfirm);\n          }\n          _this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n          _this8.cacheDeviceKeyAndPassword();\n          if (dataConfirm.UserConfirmationNecessary === true) {\n            return callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n          }\n          return callback.onSuccess(_this8.signInUserSession);\n        });\n        return undefined;\n      });\n      return undefined;\n    });\n  };\n\n  /**\n   * This is used by an authenticated user to change the current password\n   * @param {string} oldUserPassword The current password.\n   * @param {string} newUserPassword The requested new password.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('ChangePassword', {\n      PreviousPassword: oldUserPassword,\n      ProposedPassword: newUserPassword,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.enableMFA = function enableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var mfaOptions = [];\n    var mfaEnabled = {\n      DeliveryMedium: 'SMS',\n      AttributeName: 'phone_number'\n    };\n    mfaOptions.push(mfaEnabled);\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to enable MFA for itself\n   * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n   * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('SetUserMFAPreference', {\n      SMSMfaSettings: smsMfaSettings,\n      SoftwareTokenMfaSettings: softwareTokenMfaSettings,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to disable MFA for itself\n   * @deprecated\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.disableMFA = function disableMFA(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var mfaOptions = [];\n    this.client.request('SetUserSettings', {\n      MFAOptions: mfaOptions,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to delete itself\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.deleteUser = function deleteUser(callback, clientMetadata) {\n    var _this9 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('DeleteUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      _this9.clearCachedUser();\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n   */\n  /**\n   * This is used by an authenticated user to change a list of attributes\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('UpdateUserAttributes', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      UserAttributes: attributes,\n      ClientMetadata: clientMetadata\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to get a list of attributes\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.getUserAttributes = function getUserAttributes(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n      var attributeList = [];\n      for (var i = 0; i < userData.UserAttributes.length; i++) {\n        var attribute = {\n          Name: userData.UserAttributes[i].Name,\n          Value: userData.UserAttributes[i].Value\n        };\n        var userAttribute = new CognitoUserAttribute(attribute);\n        attributeList.push(userAttribute);\n      }\n      return callback(null, attributeList);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to get the MFAOptions\n   * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.getMFAOptions = function getMFAOptions(callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('GetUser', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err, userData) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, userData.MFAOptions);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated users to get the userData\n   * @param {nodeCallback<UserData>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.getUserData = function getUserData(callback, params) {\n    var _this10 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.clearCachedUserData();\n      return callback(new Error('User is not authenticated'), null);\n    }\n    var bypassCache = params ? params.bypassCache : false;\n    var userData = this.storage.getItem(this.userDataKey);\n    // get the cached user data\n\n    if (!userData || bypassCache) {\n      this.client.request('GetUser', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, latestUserData) {\n        if (err) {\n          return callback(err, null);\n        }\n        _this10.cacheUserData(latestUserData);\n        var refresh = _this10.signInUserSession.getRefreshToken();\n        if (refresh && refresh.getToken()) {\n          _this10.refreshSession(refresh, function (refreshError, data) {\n            if (refreshError) {\n              return callback(refreshError, null);\n            }\n            return callback(null, latestUserData);\n          });\n        } else {\n          return callback(null, latestUserData);\n        }\n      });\n    } else {\n      try {\n        return callback(null, JSON.parse(userData));\n      } catch (err) {\n        this.clearCachedUserData();\n        return callback(err, null);\n      }\n    }\n    return undefined;\n  };\n\n  /**\n   * This is used by an authenticated user to delete a list of attributes\n   * @param {string[]} attributeList Names of the attributes to delete.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.deleteAttributes = function deleteAttributes(attributeList, callback) {\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      return callback(new Error('User is not authenticated'), null);\n    }\n    this.client.request('DeleteUserAttributes', {\n      UserAttributeNames: attributeList,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, 'SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used by a user to resend a confirmation code\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    this.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n      if (err) {\n        return callback(err, null);\n      }\n      return callback(null, result);\n    });\n  };\n\n  /**\n   * This is used to get a session, either from the session object\n   * or from  the local storage, or by using a refresh token\n   *\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.getSession = function getSession(callback) {\n    if (this.username == null) {\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n    }\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n      return callback(null, this.signInUserSession);\n    }\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var idTokenKey = keyPrefix + '.idToken';\n    var accessTokenKey = keyPrefix + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.refreshToken';\n    var clockDriftKey = keyPrefix + '.clockDrift';\n    if (this.storage.getItem(idTokenKey)) {\n      var idToken = new CognitoIdToken({\n        IdToken: this.storage.getItem(idTokenKey)\n      });\n      var accessToken = new CognitoAccessToken({\n        AccessToken: this.storage.getItem(accessTokenKey)\n      });\n      var refreshToken = new CognitoRefreshToken({\n        RefreshToken: this.storage.getItem(refreshTokenKey)\n      });\n      var clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n      var sessionData = {\n        IdToken: idToken,\n        AccessToken: accessToken,\n        RefreshToken: refreshToken,\n        ClockDrift: clockDrift\n      };\n      var cachedSession = new CognitoUserSession(sessionData);\n      if (cachedSession.isValid()) {\n        this.signInUserSession = cachedSession;\n        return callback(null, this.signInUserSession);\n      }\n      if (!refreshToken.getToken()) {\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n      }\n      this.refreshSession(refreshToken, callback);\n    } else {\n      callback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n    }\n    return undefined;\n  };\n\n  /**\n   * This uses the refreshToken to retrieve a new session\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n    var _this11 = this;\n    var authParameters = {};\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    if (this.storage.getItem(lastUserKey)) {\n      this.username = this.storage.getItem(lastUserKey);\n      var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      authParameters.DEVICE_KEY = this.deviceKey;\n    }\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\n      AuthParameters: authParameters,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n      if (err) {\n        if (err.code === 'NotAuthorizedException') {\n          _this11.clearCachedUser();\n        }\n        return callback(err, null);\n      }\n      if (authResult) {\n        var authenticationResult = authResult.AuthenticationResult;\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n          authenticationResult.RefreshToken = refreshToken.getToken();\n        }\n        _this11.signInUserSession = _this11.getCognitoUserSession(authenticationResult);\n        _this11.cacheTokens();\n        return callback(null, _this11.signInUserSession);\n      }\n      return undefined;\n    });\n  };\n\n  /**\n   * This is used to save the session tokens to local storage\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.cacheTokens = function cacheTokens() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    this.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n    this.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n    this.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n    this.storage.setItem(clockDriftKey, '' + this.signInUserSession.getClockDrift());\n    this.storage.setItem(lastUserKey, this.username);\n  };\n\n  /**\n   * This is to cache user data\n   */\n\n  CognitoUser.prototype.cacheUserData = function cacheUserData(userData) {\n    this.storage.setItem(this.userDataKey, JSON.stringify(userData));\n  };\n\n  /**\n   * This is to remove cached user data\n   */\n\n  CognitoUser.prototype.clearCachedUserData = function clearCachedUserData() {\n    this.storage.removeItem(this.userDataKey);\n  };\n  CognitoUser.prototype.clearCachedUser = function clearCachedUser() {\n    this.clearCachedTokens();\n    this.clearCachedUserData();\n  };\n\n  /**\n   * This is used to cache the device key and device group and device password\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n    this.storage.setItem(deviceKeyKey, this.deviceKey);\n    this.storage.setItem(randomPasswordKey, this.randomPassword);\n    this.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n  };\n\n  /**\n   * This is used to get current device key and device group and device password\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n    if (this.storage.getItem(deviceKeyKey)) {\n      this.deviceKey = this.storage.getItem(deviceKeyKey);\n      this.randomPassword = this.storage.getItem(randomPasswordKey);\n      this.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n    }\n  };\n\n  /**\n   * This is used to clear the device key info from local storage\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n    var deviceKeyKey = keyPrefix + '.deviceKey';\n    var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n    var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n    this.storage.removeItem(deviceKeyKey);\n    this.storage.removeItem(randomPasswordKey);\n    this.storage.removeItem(deviceGroupKeyKey);\n  };\n\n  /**\n   * This is used to clear the session tokens from local storage\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.clearCachedTokens = function clearCachedTokens() {\n    var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n    var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n    var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n    var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n    var lastUserKey = keyPrefix + '.LastAuthUser';\n    var clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n    this.storage.removeItem(idTokenKey);\n    this.storage.removeItem(accessTokenKey);\n    this.storage.removeItem(refreshTokenKey);\n    this.storage.removeItem(lastUserKey);\n    this.storage.removeItem(clockDriftKey);\n  };\n\n  /**\n   * This is used to build a user session from tokens retrieved in the authentication result\n   * @param {object} authResult Successful auth response from server.\n   * @returns {CognitoUserSession} The new user session.\n   * @private\n   */\n\n  CognitoUser.prototype.getCognitoUserSession = function getCognitoUserSession(authResult) {\n    var idToken = new CognitoIdToken(authResult);\n    var accessToken = new CognitoAccessToken(authResult);\n    var refreshToken = new CognitoRefreshToken(authResult);\n    var sessionData = {\n      IdToken: idToken,\n      AccessToken: accessToken,\n      RefreshToken: refreshToken\n    };\n    return new CognitoUserSession(sessionData);\n  };\n\n  /**\n   * This is used to initiate a forgot password request\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode?} callback.inputVerificationCode\n   *    Optional callback raised instead of onSuccess with response data.\n   * @param {onSuccess} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.forgotPassword = function forgotPassword(callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ForgotPassword', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess(data);\n    });\n  };\n\n  /**\n   * This is used to confirm a new password using a confirmationCode\n   * @param {string} confirmationCode Code entered by user.\n   * @param {string} newPassword Confirm new password.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n    var jsonReq = {\n      ClientId: this.pool.getClientId(),\n      Username: this.username,\n      ConfirmationCode: confirmationCode,\n      Password: newPassword,\n      ClientMetadata: clientMetadata\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess();\n    });\n  };\n\n  /**\n   * This is used to initiate an attribute confirmation request\n   * @param {string} attributeName User attribute that needs confirmation.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n   * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GetUserAttributeVerificationCode', {\n      AttributeName: attributeName,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      ClientMetadata: clientMetadata\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      if (typeof callback.inputVerificationCode === 'function') {\n        return callback.inputVerificationCode(data);\n      }\n      return callback.onSuccess();\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to confirm an attribute using a confirmation code\n   * @param {string} attributeName Attribute being confirmed.\n   * @param {string} confirmationCode Code entered by user.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('VerifyUserAttribute', {\n      AttributeName: attributeName,\n      Code: confirmationCode,\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to get the device information using the current device key\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.getDevice = function getDevice(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to forget a specific device\n   * @param {string} deviceKey Device key.\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('ForgetDevice', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: deviceKey\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to forget the current device\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.forgetDevice = function forgetDevice(callback) {\n    var _this12 = this;\n    this.forgetSpecificDevice(this.deviceKey, {\n      onFailure: callback.onFailure,\n      onSuccess: function onSuccess(result) {\n        _this12.deviceKey = null;\n        _this12.deviceGroupKey = null;\n        _this12.randomPassword = null;\n        _this12.clearCachedDeviceKeyAndPassword();\n        return callback.onSuccess(result);\n      }\n    });\n  };\n\n  /**\n   * This is used to set the device status as remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to set the device status as not remembered\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('UpdateDeviceStatus', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      DeviceKey: this.deviceKey,\n      DeviceRememberedStatus: 'not_remembered'\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to list all devices for a user\n   *\n   * @param {int} limit the number of devices returned in a call\n   * @param {string} paginationToken the pagination token in case any was returned before\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.listDevices = function listDevices(limit, paginationToken, callback) {\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('ListDevices', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n      Limit: limit,\n      PaginationToken: paginationToken\n    }, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      return callback.onSuccess(data);\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used to globally revoke all tokens issued to a user\n   * @param {object} callback Result callback map.\n   * @param {onFailure} callback.onFailure Called on any error.\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.globalSignOut = function globalSignOut(callback) {\n    var _this13 = this;\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n      return callback.onFailure(new Error('User is not authenticated'));\n    }\n    this.client.request('GlobalSignOut', {\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n    }, function (err) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this13.clearCachedUser();\n      return callback.onSuccess('SUCCESS');\n    });\n    return undefined;\n  };\n\n  /**\n   * This is used for the user to signOut of the application and clear the cached tokens.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.signOut = function signOut() {\n    this.signInUserSession = null;\n    this.clearCachedUser();\n  };\n\n  /**\n   * This is used by a user trying to select a given MFA\n   * @param {string} answerChallenge the mfa the user wants\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n    var _this14 = this;\n    var challengeResponses = {};\n    challengeResponses.USERNAME = this.username;\n    challengeResponses.ANSWER = answerChallenge;\n    var jsonReq = {\n      ChallengeName: 'SELECT_MFA_TYPE',\n      ChallengeResponses: challengeResponses,\n      ClientId: this.pool.getClientId(),\n      Session: this.Session\n    };\n    if (this.getUserContextData()) {\n      jsonReq.UserContextData = this.getUserContextData();\n    }\n    this.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n      if (err) {\n        return callback.onFailure(err);\n      }\n      _this14.Session = data.Session;\n      if (answerChallenge === 'SMS_MFA') {\n        return callback.mfaRequired(data.challengeName, data.challengeParameters);\n      }\n      if (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n        return callback.totpRequired(data.challengeName, data.challengeParameters);\n      }\n      return undefined;\n    });\n  };\n\n  /**\n   * This returns the user context data for advanced security feature.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.getUserContextData = function getUserContextData() {\n    var pool = this.pool;\n    return pool.getUserContextData(this.username);\n  };\n\n  /**\n   * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.associateSoftwareToken = function associateSoftwareToken(callback) {\n    var _this15 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('AssociateSoftwareToken', {\n        Session: this.Session\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this15.Session = data.Session;\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    } else {\n      this.client.request('AssociateSoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.associateSecretCode(data.SecretCode);\n      });\n    }\n  };\n\n  /**\n   * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n   * @param {string} totpCode The MFA code entered by the user.\n   * @param {string} friendlyDeviceName The device name we are assigning to the device.\n   * @param {nodeCallback<string>} callback Called on success or error.\n   * @returns {void}\n   */\n\n  CognitoUser.prototype.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n    var _this16 = this;\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n      this.client.request('VerifySoftwareToken', {\n        Session: this.Session,\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        _this16.Session = data.Session;\n        var challengeResponses = {};\n        challengeResponses.USERNAME = _this16.username;\n        var jsonReq = {\n          ChallengeName: 'MFA_SETUP',\n          ClientId: _this16.pool.getClientId(),\n          ChallengeResponses: challengeResponses,\n          Session: _this16.Session\n        };\n        if (_this16.getUserContextData()) {\n          jsonReq.UserContextData = _this16.getUserContextData();\n        }\n        _this16.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n          if (errRespond) {\n            return callback.onFailure(errRespond);\n          }\n          _this16.signInUserSession = _this16.getCognitoUserSession(dataRespond.AuthenticationResult);\n          _this16.cacheTokens();\n          return callback.onSuccess(_this16.signInUserSession);\n        });\n        return undefined;\n      });\n    } else {\n      this.client.request('VerifySoftwareToken', {\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n        UserCode: totpCode,\n        FriendlyDeviceName: friendlyDeviceName\n      }, function (err, data) {\n        if (err) {\n          return callback.onFailure(err);\n        }\n        return callback.onSuccess(data);\n      });\n    }\n  };\n  return CognitoUser;\n}();\nexport default CognitoUser;","map":{"version":3,"names":["_classCallCheck","instance","Constructor","TypeError","Buffer","CryptoJS","TypedArrays","Base64","HmacSHA256","BigInteger","AuthenticationHelper","CognitoAccessToken","CognitoIdToken","CognitoRefreshToken","CognitoUserSession","DateHelper","CognitoUserAttribute","StorageHelper","CognitoUser","data","Username","Pool","Error","username","pool","Session","client","signInUserSession","authenticationFlowType","storage","Storage","getStorage","keyPrefix","getClientId","userDataKey","prototype","setSignInUserSession","clearCachedUserData","cacheTokens","getSignInUserSession","getUsername","getAuthenticationFlowType","setAuthenticationFlowType","initiateAuth","authDetails","callback","_this","authParameters","getAuthParameters","USERNAME","clientMetaData","Object","keys","getValidationData","length","getClientMetadata","jsonReq","AuthFlow","ClientId","AuthParameters","ClientMetadata","getUserContextData","UserContextData","request","err","onFailure","challengeName","ChallengeName","challengeParameters","ChallengeParameters","customChallenge","getCognitoUserSession","AuthenticationResult","onSuccess","authenticateUser","authenticateUserPlainUsernamePassword","authenticateUserDefaultAuth","_this2","authenticationHelper","getUserPoolId","split","dateHelper","serverBValue","salt","deviceKey","DEVICE_KEY","getLargeAValue","errOnAValue","aValue","SRP_A","toString","CHALLENGE_NAME","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","errOnHkdf","hkdf","dateNow","getNowString","message","lib","WordArray","create","concat","from","SECRET_BLOCK","key","signatureString","stringify","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","respondToAuthChallenge","challenge","challengeCallback","errChallenge","dataChallenge","code","toLowerCase","indexOf","randomPassword","deviceGroupKey","clearCachedDeviceKeyAndPassword","jsonReqResp","ChallengeResponses","errAuthenticate","dataAuthenticate","authenticateUserInternal","undefined","_this3","PASSWORD","authResult","_this4","mfaRequired","selectMFAType","mfaSetup","totpRequired","userAttributes","rawRequiredAttributes","requiredAttributes","userAttributesPrefix","getNewPasswordRequiredChallengeUserAttributePrefix","JSON","parse","i","substr","newPasswordRequired","getDeviceResponse","newDeviceMetadata","NewDeviceMetadata","generateHashDevice","DeviceGroupKey","DeviceKey","errGenHash","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","verifierDevices","getRandomPassword","AccessToken","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","completeNewPasswordChallenge","newPassword","requiredAttributeData","clientMetadata","_this5","finalUserAttributes","forEach","NEW_PASSWORD","_this6","errAValue","errHkdf","confirmRegistration","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","sendCustomChallengeAnswer","answerChallenge","_this7","ANSWER","sendMFACode","mfaType","_this8","SMS_MFA_CODE","mfaTypeSelection","SOFTWARE_TOKEN_MFA_CODE","changePassword","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","enableMFA","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","setUserMfaPreference","smsMfaSettings","softwareTokenMfaSettings","SMSMfaSettings","SoftwareTokenMfaSettings","disableMFA","deleteUser","_this9","clearCachedUser","updateAttributes","attributes","UserAttributes","getUserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","getMFAOptions","getUserData","params","_this10","bypassCache","getItem","latestUserData","cacheUserData","refresh","getRefreshToken","getToken","refreshSession","refreshError","deleteAttributes","UserAttributeNames","resendConfirmationCode","result","getSession","idTokenKey","accessTokenKey","refreshTokenKey","clockDriftKey","idToken","IdToken","accessToken","refreshToken","RefreshToken","clockDrift","parseInt","sessionData","ClockDrift","cachedSession","_this11","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authenticationResult","hasOwnProperty","call","setItem","getIdToken","getClockDrift","removeItem","clearCachedTokens","randomPasswordKey","deviceGroupKeyKey","forgotPassword","inputVerificationCode","confirmPassword","Password","getAttributeVerificationCode","attributeName","verifyAttribute","Code","getDevice","forgetSpecificDevice","forgetDevice","_this12","setDeviceStatusRemembered","DeviceRememberedStatus","setDeviceStatusNotRemembered","listDevices","limit","paginationToken","Limit","PaginationToken","globalSignOut","_this13","signOut","sendMFASelectionAnswer","_this14","associateSoftwareToken","_this15","associateSecretCode","SecretCode","verifySoftwareToken","totpCode","friendlyDeviceName","_this16","UserCode","FriendlyDeviceName","errRespond","dataRespond"],"sources":["C:/Study/6805/React/reacthtml/node_modules/amazon-cognito-identity-js/es/CognitoUser.js"],"sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/*!\n * Copyright 2016 Amazon.com,\n * Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Amazon Software License (the \"License\").\n * You may not use this file except in compliance with the\n * License. A copy of the License is located at\n *\n *     http://aws.amazon.com/asl/\n *\n * or in the \"license\" file accompanying this file. This file is\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, express or implied. See the License\n * for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Buffer } from 'buffer/';\nimport CryptoJS from 'crypto-js/core';\nimport TypedArrays from 'crypto-js/lib-typedarrays'; // necessary for crypto js\nimport Base64 from 'crypto-js/enc-base64';\nimport HmacSHA256 from 'crypto-js/hmac-sha256';\n\nimport BigInteger from './BigInteger';\nimport AuthenticationHelper from './AuthenticationHelper';\nimport CognitoAccessToken from './CognitoAccessToken';\nimport CognitoIdToken from './CognitoIdToken';\nimport CognitoRefreshToken from './CognitoRefreshToken';\nimport CognitoUserSession from './CognitoUserSession';\nimport DateHelper from './DateHelper';\nimport CognitoUserAttribute from './CognitoUserAttribute';\nimport StorageHelper from './StorageHelper';\n\n/**\n * @callback nodeCallback\n * @template T result\n * @param {*} err The operation failure reason, or null.\n * @param {T} result The operation result.\n */\n\n/**\n * @callback onFailure\n * @param {*} err Failure reason.\n */\n\n/**\n * @callback onSuccess\n * @template T result\n * @param {T} result The operation result.\n */\n\n/**\n * @callback mfaRequired\n * @param {*} details MFA challenge details.\n */\n\n/**\n * @callback customChallenge\n * @param {*} details Custom challenge details.\n */\n\n/**\n * @callback inputVerificationCode\n * @param {*} data Server response.\n */\n\n/**\n * @callback authSuccess\n * @param {CognitoUserSession} session The new session.\n * @param {bool=} userConfirmationNecessary User must be confirmed.\n */\n\n/** @class */\n\nvar CognitoUser = function () {\n\t/**\n  * Constructs a new CognitoUser object\n  * @param {object} data Creation options\n  * @param {string} data.Username The user's username.\n  * @param {CognitoUserPool} data.Pool Pool containing the user.\n  * @param {object} data.Storage Optional storage object.\n  */\n\tfunction CognitoUser(data) {\n\t\t_classCallCheck(this, CognitoUser);\n\n\t\tif (data == null || data.Username == null || data.Pool == null) {\n\t\t\tthrow new Error('Username and pool information are required.');\n\t\t}\n\n\t\tthis.username = data.Username || '';\n\t\tthis.pool = data.Pool;\n\t\tthis.Session = null;\n\n\t\tthis.client = data.Pool.client;\n\n\t\tthis.signInUserSession = null;\n\t\tthis.authenticationFlowType = 'USER_SRP_AUTH';\n\n\t\tthis.storage = data.Storage || new StorageHelper().getStorage();\n\n\t\tthis.keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t\tthis.userDataKey = this.keyPrefix + '.' + this.username + '.userData';\n\t}\n\n\t/**\n  * Sets the session for this user\n  * @param {CognitoUserSession} signInUserSession the session\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setSignInUserSession = function setSignInUserSession(signInUserSession) {\n\t\tthis.clearCachedUserData();\n\t\tthis.signInUserSession = signInUserSession;\n\t\tthis.cacheTokens();\n\t};\n\n\t/**\n  * @returns {CognitoUserSession} the current session for this user\n  */\n\n\n\tCognitoUser.prototype.getSignInUserSession = function getSignInUserSession() {\n\t\treturn this.signInUserSession;\n\t};\n\n\t/**\n  * @returns {string} the user's username\n  */\n\n\n\tCognitoUser.prototype.getUsername = function getUsername() {\n\t\treturn this.username;\n\t};\n\n\t/**\n  * @returns {String} the authentication flow type\n  */\n\n\n\tCognitoUser.prototype.getAuthenticationFlowType = function getAuthenticationFlowType() {\n\t\treturn this.authenticationFlowType;\n\t};\n\n\t/**\n  * sets authentication flow type\n  * @param {string} authenticationFlowType New value.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setAuthenticationFlowType = function setAuthenticationFlowType(authenticationFlowType) {\n\t\tthis.authenticationFlowType = authenticationFlowType;\n\t};\n\n\t/**\n  * This is used for authenticating the user through the custom authentication flow.\n  * @param {AuthenticationDetails} authDetails Contains the authentication data\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *        response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.initiateAuth = function initiateAuth(authDetails, callback) {\n\t\tvar _this = this;\n\n\t\tvar authParameters = authDetails.getAuthParameters();\n\t\tauthParameters.USERNAME = this.username;\n\n\t\tvar clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n\n\t\tvar jsonReq = {\n\t\t\tAuthFlow: 'CUSTOM_AUTH',\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tAuthParameters: authParameters,\n\t\t\tClientMetadata: clientMetaData\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\n\t\tthis.client.request('InitiateAuth', jsonReq, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\tvar challengeName = data.ChallengeName;\n\t\t\tvar challengeParameters = data.ChallengeParameters;\n\n\t\t\tif (challengeName === 'CUSTOM_CHALLENGE') {\n\t\t\t\t_this.Session = data.Session;\n\t\t\t\treturn callback.customChallenge(challengeParameters);\n\t\t\t}\n\t\t\t_this.signInUserSession = _this.getCognitoUserSession(data.AuthenticationResult);\n\t\t\t_this.cacheTokens();\n\t\t\treturn callback.onSuccess(_this.signInUserSession);\n\t\t});\n\t};\n\n\t/**\n  * This is used for authenticating the user.\n  * stuff\n  * @param {AuthenticationDetails} authDetails Contains the authentication data\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {newPasswordRequired} callback.newPasswordRequired new\n  *        password and any required attributes are required to continue\n  * @param {mfaRequired} callback.mfaRequired MFA code\n  *        required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *        response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.authenticateUser = function authenticateUser(authDetails, callback) {\n\t\tif (this.authenticationFlowType === 'USER_PASSWORD_AUTH') {\n\t\t\treturn this.authenticateUserPlainUsernamePassword(authDetails, callback);\n\t\t} else if (this.authenticationFlowType === 'USER_SRP_AUTH' || this.authenticationFlowType === 'CUSTOM_AUTH') {\n\t\t\treturn this.authenticateUserDefaultAuth(authDetails, callback);\n\t\t}\n\t\treturn callback.onFailure(new Error('Authentication flow type is invalid.'));\n\t};\n\n\t/**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * It calls the AuthenticationHelper for SRP related\n  * stuff\n  * @param {AuthenticationDetails} authDetails Contains the authentication data\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {newPasswordRequired} callback.newPasswordRequired new\n  *        password and any required attributes are required to continue\n  * @param {mfaRequired} callback.mfaRequired MFA code\n  *        required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *        response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.authenticateUserDefaultAuth = function authenticateUserDefaultAuth(authDetails, callback) {\n\t\tvar _this2 = this;\n\n\t\tvar authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n\t\tvar dateHelper = new DateHelper();\n\n\t\tvar serverBValue = void 0;\n\t\tvar salt = void 0;\n\t\tvar authParameters = {};\n\n\t\tif (this.deviceKey != null) {\n\t\t\tauthParameters.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tauthParameters.USERNAME = this.username;\n\t\tauthenticationHelper.getLargeAValue(function (errOnAValue, aValue) {\n\t\t\t// getLargeAValue callback start\n\t\t\tif (errOnAValue) {\n\t\t\t\tcallback.onFailure(errOnAValue);\n\t\t\t}\n\n\t\t\tauthParameters.SRP_A = aValue.toString(16);\n\n\t\t\tif (_this2.authenticationFlowType === 'CUSTOM_AUTH') {\n\t\t\t\tauthParameters.CHALLENGE_NAME = 'SRP_A';\n\t\t\t}\n\n\t\t\tvar clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n\n\t\t\tvar jsonReq = {\n\t\t\t\tAuthFlow: _this2.authenticationFlowType,\n\t\t\t\tClientId: _this2.pool.getClientId(),\n\t\t\t\tAuthParameters: authParameters,\n\t\t\t\tClientMetadata: clientMetaData\n\t\t\t};\n\t\t\tif (_this2.getUserContextData(_this2.username)) {\n\t\t\t\tjsonReq.UserContextData = _this2.getUserContextData(_this2.username);\n\t\t\t}\n\n\t\t\t_this2.client.request('InitiateAuth', jsonReq, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\n\t\t\t\tvar challengeParameters = data.ChallengeParameters;\n\n\t\t\t\t_this2.username = challengeParameters.USER_ID_FOR_SRP;\n\t\t\t\tserverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n\t\t\t\tsalt = new BigInteger(challengeParameters.SALT, 16);\n\t\t\t\t_this2.getCachedDeviceKeyAndPassword();\n\n\t\t\t\tauthenticationHelper.getPasswordAuthenticationKey(_this2.username, authDetails.getPassword(), serverBValue, salt, function (errOnHkdf, hkdf) {\n\t\t\t\t\t// getPasswordAuthenticationKey callback start\n\t\t\t\t\tif (errOnHkdf) {\n\t\t\t\t\t\tcallback.onFailure(errOnHkdf);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar dateNow = dateHelper.getNowString();\n\n\t\t\t\t\tvar message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this2.pool.getUserPoolId().split('_')[1], 'utf8'), Buffer.from(_this2.username, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n\t\t\t\t\tvar key = CryptoJS.lib.WordArray.create(hkdf);\n\t\t\t\t\tvar signatureString = Base64.stringify(HmacSHA256(message, key));\n\n\t\t\t\t\tvar challengeResponses = {};\n\n\t\t\t\t\tchallengeResponses.USERNAME = _this2.username;\n\t\t\t\t\tchallengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t\t\t\t\tchallengeResponses.TIMESTAMP = dateNow;\n\t\t\t\t\tchallengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\n\t\t\t\t\tif (_this2.deviceKey != null) {\n\t\t\t\t\t\tchallengeResponses.DEVICE_KEY = _this2.deviceKey;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar respondToAuthChallenge = function respondToAuthChallenge(challenge, challengeCallback) {\n\t\t\t\t\t\treturn _this2.client.request('RespondToAuthChallenge', challenge, function (errChallenge, dataChallenge) {\n\t\t\t\t\t\t\tif (errChallenge && errChallenge.code === 'ResourceNotFoundException' && errChallenge.message.toLowerCase().indexOf('device') !== -1) {\n\t\t\t\t\t\t\t\tchallengeResponses.DEVICE_KEY = null;\n\t\t\t\t\t\t\t\t_this2.deviceKey = null;\n\t\t\t\t\t\t\t\t_this2.randomPassword = null;\n\t\t\t\t\t\t\t\t_this2.deviceGroupKey = null;\n\t\t\t\t\t\t\t\t_this2.clearCachedDeviceKeyAndPassword();\n\t\t\t\t\t\t\t\treturn respondToAuthChallenge(challenge, challengeCallback);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\treturn challengeCallback(errChallenge, dataChallenge);\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\tvar jsonReqResp = {\n\t\t\t\t\t\tChallengeName: 'PASSWORD_VERIFIER',\n\t\t\t\t\t\tClientId: _this2.pool.getClientId(),\n\t\t\t\t\t\tChallengeResponses: challengeResponses,\n\t\t\t\t\t\tSession: data.Session,\n\t\t\t\t\t\tClientMetadata: clientMetaData\n\t\t\t\t\t};\n\t\t\t\t\tif (_this2.getUserContextData()) {\n\t\t\t\t\t\tjsonReqResp.UserContextData = _this2.getUserContextData();\n\t\t\t\t\t}\n\t\t\t\t\trespondToAuthChallenge(jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n\t\t\t\t\t\tif (errAuthenticate) {\n\t\t\t\t\t\t\treturn callback.onFailure(errAuthenticate);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn _this2.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t\t\t\t\t});\n\t\t\t\t\treturn undefined;\n\t\t\t\t\t// getPasswordAuthenticationKey callback end\n\t\t\t\t});\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\t// getLargeAValue callback end\n\t\t});\n\t};\n\n\t/**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * @param {AuthenticationDetails} authDetails Contains the authentication data.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {mfaRequired} callback.mfaRequired MFA code\n  *        required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.authenticateUserPlainUsernamePassword = function authenticateUserPlainUsernamePassword(authDetails, callback) {\n\t\tvar _this3 = this;\n\n\t\tvar authParameters = {};\n\t\tauthParameters.USERNAME = this.username;\n\t\tauthParameters.PASSWORD = authDetails.getPassword();\n\t\tif (!authParameters.PASSWORD) {\n\t\t\tcallback.onFailure(new Error('PASSWORD parameter is required'));\n\t\t\treturn;\n\t\t}\n\t\tvar authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n\t\tthis.getCachedDeviceKeyAndPassword();\n\t\tif (this.deviceKey != null) {\n\t\t\tauthParameters.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tvar clientMetaData = Object.keys(authDetails.getValidationData()).length !== 0 ? authDetails.getValidationData() : authDetails.getClientMetadata();\n\n\t\tvar jsonReq = {\n\t\t\tAuthFlow: 'USER_PASSWORD_AUTH',\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tAuthParameters: authParameters,\n\t\t\tClientMetadata: clientMetaData\n\t\t};\n\t\tif (this.getUserContextData(this.username)) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData(this.username);\n\t\t}\n\t\t// USER_PASSWORD_AUTH happens in a single round-trip: client sends userName and password,\n\t\t// Cognito UserPools verifies password and returns tokens.\n\t\tthis.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn _this3.authenticateUserInternal(authResult, authenticationHelper, callback);\n\t\t});\n\t};\n\n\t/**\n  * PRIVATE ONLY: This is an internal only method and should not\n  * be directly called by the consumers.\n  * @param {object} dataAuthenticate authentication data\n  * @param {object} authenticationHelper helper created\n  * @param {callback} callback passed on from caller\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.authenticateUserInternal = function authenticateUserInternal(dataAuthenticate, authenticationHelper, callback) {\n\t\tvar _this4 = this;\n\n\t\tvar challengeName = dataAuthenticate.ChallengeName;\n\t\tvar challengeParameters = dataAuthenticate.ChallengeParameters;\n\n\t\tif (challengeName === 'SMS_MFA') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.mfaRequired(challengeName, challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'SELECT_MFA_TYPE') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.selectMFAType(challengeName, challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'MFA_SETUP') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.mfaSetup(challengeName, challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'SOFTWARE_TOKEN_MFA') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.totpRequired(challengeName, challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'CUSTOM_CHALLENGE') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\t\t\treturn callback.customChallenge(challengeParameters);\n\t\t}\n\n\t\tif (challengeName === 'NEW_PASSWORD_REQUIRED') {\n\t\t\tthis.Session = dataAuthenticate.Session;\n\n\t\t\tvar userAttributes = null;\n\t\t\tvar rawRequiredAttributes = null;\n\t\t\tvar requiredAttributes = [];\n\t\t\tvar userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n\t\t\tif (challengeParameters) {\n\t\t\t\tuserAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.userAttributes);\n\t\t\t\trawRequiredAttributes = JSON.parse(dataAuthenticate.ChallengeParameters.requiredAttributes);\n\t\t\t}\n\n\t\t\tif (rawRequiredAttributes) {\n\t\t\t\tfor (var i = 0; i < rawRequiredAttributes.length; i++) {\n\t\t\t\t\trequiredAttributes[i] = rawRequiredAttributes[i].substr(userAttributesPrefix.length);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn callback.newPasswordRequired(userAttributes, requiredAttributes);\n\t\t}\n\n\t\tif (challengeName === 'DEVICE_SRP_AUTH') {\n\t\t\tthis.getDeviceResponse(callback);\n\t\t\treturn undefined;\n\t\t}\n\n\t\tthis.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t\tthis.challengeName = challengeName;\n\t\tthis.cacheTokens();\n\n\t\tvar newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\t\tif (newDeviceMetadata == null) {\n\t\t\treturn callback.onSuccess(this.signInUserSession);\n\t\t}\n\n\t\tauthenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n\t\t\tif (errGenHash) {\n\t\t\t\treturn callback.onFailure(errGenHash);\n\t\t\t}\n\n\t\t\tvar deviceSecretVerifierConfig = {\n\t\t\t\tSalt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n\t\t\t\tPasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n\t\t\t};\n\n\t\t\t_this4.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n\t\t\t_this4.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n\t\t\t_this4.randomPassword = authenticationHelper.getRandomPassword();\n\n\t\t\t_this4.client.request('ConfirmDevice', {\n\t\t\t\tDeviceKey: newDeviceMetadata.DeviceKey,\n\t\t\t\tAccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\t\tDeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t\t\t\tDeviceName: navigator.userAgent\n\t\t\t}, function (errConfirm, dataConfirm) {\n\t\t\t\tif (errConfirm) {\n\t\t\t\t\treturn callback.onFailure(errConfirm);\n\t\t\t\t}\n\n\t\t\t\t_this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t\t\t\t_this4.cacheDeviceKeyAndPassword();\n\t\t\t\tif (dataConfirm.UserConfirmationNecessary === true) {\n\t\t\t\t\treturn callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t\t\t\t}\n\t\t\t\treturn callback.onSuccess(_this4.signInUserSession);\n\t\t\t});\n\t\t\treturn undefined;\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This method is user to complete the NEW_PASSWORD_REQUIRED challenge.\n  * Pass the new password with any new user attributes to be updated.\n  * User attribute keys must be of format userAttributes.<attribute_name>.\n  * @param {string} newPassword new password for this user\n  * @param {object} requiredAttributeData map with values for all required attributes\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\n  * @param {customChallenge} callback.customChallenge Custom challenge\n  *         response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.completeNewPasswordChallenge = function completeNewPasswordChallenge(newPassword, requiredAttributeData, callback, clientMetadata) {\n\t\tvar _this5 = this;\n\n\t\tif (!newPassword) {\n\t\t\treturn callback.onFailure(new Error('New password is required.'));\n\t\t}\n\t\tvar authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n\t\tvar userAttributesPrefix = authenticationHelper.getNewPasswordRequiredChallengeUserAttributePrefix();\n\n\t\tvar finalUserAttributes = {};\n\t\tif (requiredAttributeData) {\n\t\t\tObject.keys(requiredAttributeData).forEach(function (key) {\n\t\t\t\tfinalUserAttributes[userAttributesPrefix + key] = requiredAttributeData[key];\n\t\t\t});\n\t\t}\n\n\t\tfinalUserAttributes.NEW_PASSWORD = newPassword;\n\t\tfinalUserAttributes.USERNAME = this.username;\n\t\tvar jsonReq = {\n\t\t\tChallengeName: 'NEW_PASSWORD_REQUIRED',\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tChallengeResponses: finalUserAttributes,\n\t\t\tSession: this.Session,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\n\t\tthis.client.request('RespondToAuthChallenge', jsonReq, function (errAuthenticate, dataAuthenticate) {\n\t\t\tif (errAuthenticate) {\n\t\t\t\treturn callback.onFailure(errAuthenticate);\n\t\t\t}\n\t\t\treturn _this5.authenticateUserInternal(dataAuthenticate, authenticationHelper, callback);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to get a session using device authentication. It is called at the end of user\n  * authentication\n  *\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  * @private\n  */\n\n\n\tCognitoUser.prototype.getDeviceResponse = function getDeviceResponse(callback, clientMetadata) {\n\t\tvar _this6 = this;\n\n\t\tvar authenticationHelper = new AuthenticationHelper(this.deviceGroupKey);\n\t\tvar dateHelper = new DateHelper();\n\n\t\tvar authParameters = {};\n\n\t\tauthParameters.USERNAME = this.username;\n\t\tauthParameters.DEVICE_KEY = this.deviceKey;\n\t\tauthenticationHelper.getLargeAValue(function (errAValue, aValue) {\n\t\t\t// getLargeAValue callback start\n\t\t\tif (errAValue) {\n\t\t\t\tcallback.onFailure(errAValue);\n\t\t\t}\n\n\t\t\tauthParameters.SRP_A = aValue.toString(16);\n\n\t\t\tvar jsonReq = {\n\t\t\t\tChallengeName: 'DEVICE_SRP_AUTH',\n\t\t\t\tClientId: _this6.pool.getClientId(),\n\t\t\t\tChallengeResponses: authParameters,\n\t\t\t\tClientMetadata: clientMetadata\n\t\t\t};\n\t\t\tif (_this6.getUserContextData()) {\n\t\t\t\tjsonReq.UserContextData = _this6.getUserContextData();\n\t\t\t}\n\t\t\t_this6.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\n\t\t\t\tvar challengeParameters = data.ChallengeParameters;\n\n\t\t\t\tvar serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\n\t\t\t\tvar salt = new BigInteger(challengeParameters.SALT, 16);\n\n\t\t\t\tauthenticationHelper.getPasswordAuthenticationKey(_this6.deviceKey, _this6.randomPassword, serverBValue, salt, function (errHkdf, hkdf) {\n\t\t\t\t\t// getPasswordAuthenticationKey callback start\n\t\t\t\t\tif (errHkdf) {\n\t\t\t\t\t\treturn callback.onFailure(errHkdf);\n\t\t\t\t\t}\n\n\t\t\t\t\tvar dateNow = dateHelper.getNowString();\n\n\t\t\t\t\tvar message = CryptoJS.lib.WordArray.create(Buffer.concat([Buffer.from(_this6.deviceGroupKey, 'utf8'), Buffer.from(_this6.deviceKey, 'utf8'), Buffer.from(challengeParameters.SECRET_BLOCK, 'base64'), Buffer.from(dateNow, 'utf8')]));\n\t\t\t\t\tvar key = CryptoJS.lib.WordArray.create(hkdf);\n\t\t\t\t\tvar signatureString = Base64.stringify(HmacSHA256(message, key));\n\n\t\t\t\t\tvar challengeResponses = {};\n\n\t\t\t\t\tchallengeResponses.USERNAME = _this6.username;\n\t\t\t\t\tchallengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t\t\t\t\tchallengeResponses.TIMESTAMP = dateNow;\n\t\t\t\t\tchallengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t\t\t\t\tchallengeResponses.DEVICE_KEY = _this6.deviceKey;\n\n\t\t\t\t\tvar jsonReqResp = {\n\t\t\t\t\t\tChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n\t\t\t\t\t\tClientId: _this6.pool.getClientId(),\n\t\t\t\t\t\tChallengeResponses: challengeResponses,\n\t\t\t\t\t\tSession: data.Session\n\t\t\t\t\t};\n\t\t\t\t\tif (_this6.getUserContextData()) {\n\t\t\t\t\t\tjsonReqResp.UserContextData = _this6.getUserContextData();\n\t\t\t\t\t}\n\n\t\t\t\t\t_this6.client.request('RespondToAuthChallenge', jsonReqResp, function (errAuthenticate, dataAuthenticate) {\n\t\t\t\t\t\tif (errAuthenticate) {\n\t\t\t\t\t\t\treturn callback.onFailure(errAuthenticate);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t_this6.signInUserSession = _this6.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t\t\t\t\t\t_this6.cacheTokens();\n\n\t\t\t\t\t\treturn callback.onSuccess(_this6.signInUserSession);\n\t\t\t\t\t});\n\t\t\t\t\treturn undefined;\n\t\t\t\t\t// getPasswordAuthenticationKey callback end\n\t\t\t\t});\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\t// getLargeAValue callback end\n\t\t});\n\t};\n\n\t/**\n  * This is used for a certain user to confirm the registration by using a confirmation code\n  * @param {string} confirmationCode Code entered by user.\n  * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.confirmRegistration = function confirmRegistration(confirmationCode, forceAliasCreation, callback, clientMetadata) {\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tConfirmationCode: confirmationCode,\n\t\t\tUsername: this.username,\n\t\t\tForceAliasCreation: forceAliasCreation,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('ConfirmSignUp', jsonReq, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t};\n\n\t/**\n  * This is used by the user once he has the responses to a custom challenge\n  * @param {string} answerChallenge The custom challenge answer.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {customChallenge} callback.customChallenge\n  *    Custom challenge response required to continue.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.sendCustomChallengeAnswer = function sendCustomChallengeAnswer(answerChallenge, callback, clientMetadata) {\n\t\tvar _this7 = this;\n\n\t\tvar challengeResponses = {};\n\t\tchallengeResponses.USERNAME = this.username;\n\t\tchallengeResponses.ANSWER = answerChallenge;\n\n\t\tvar authenticationHelper = new AuthenticationHelper(this.pool.getUserPoolId().split('_')[1]);\n\t\tthis.getCachedDeviceKeyAndPassword();\n\t\tif (this.deviceKey != null) {\n\t\t\tchallengeResponses.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tvar jsonReq = {\n\t\t\tChallengeName: 'CUSTOM_CHALLENGE',\n\t\t\tChallengeResponses: challengeResponses,\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tSession: this.Session,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\n\t\t\treturn _this7.authenticateUserInternal(data, authenticationHelper, callback);\n\t\t});\n\t};\n\n\t/**\n  * This is used by the user once he has an MFA code\n  * @param {string} confirmationCode The MFA code entered by the user.\n  * @param {object} callback Result callback map.\n  * @param {string} mfaType The mfa we are replying to.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {authSuccess} callback.onSuccess Called on success with the new session.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.sendMFACode = function sendMFACode(confirmationCode, callback, mfaType, clientMetadata) {\n\t\tvar _this8 = this;\n\n\t\tvar challengeResponses = {};\n\t\tchallengeResponses.USERNAME = this.username;\n\t\tchallengeResponses.SMS_MFA_CODE = confirmationCode;\n\t\tvar mfaTypeSelection = mfaType || 'SMS_MFA';\n\t\tif (mfaTypeSelection === 'SOFTWARE_TOKEN_MFA') {\n\t\t\tchallengeResponses.SOFTWARE_TOKEN_MFA_CODE = confirmationCode;\n\t\t}\n\n\t\tif (this.deviceKey != null) {\n\t\t\tchallengeResponses.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tvar jsonReq = {\n\t\t\tChallengeName: mfaTypeSelection,\n\t\t\tChallengeResponses: challengeResponses,\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tSession: this.Session,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\n\t\tthis.client.request('RespondToAuthChallenge', jsonReq, function (err, dataAuthenticate) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\n\t\t\tvar challengeName = dataAuthenticate.ChallengeName;\n\n\t\t\tif (challengeName === 'DEVICE_SRP_AUTH') {\n\t\t\t\t_this8.getDeviceResponse(callback);\n\t\t\t\treturn undefined;\n\t\t\t}\n\n\t\t\t_this8.signInUserSession = _this8.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t\t\t_this8.cacheTokens();\n\n\t\t\tif (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n\t\t\t\treturn callback.onSuccess(_this8.signInUserSession);\n\t\t\t}\n\n\t\t\tvar authenticationHelper = new AuthenticationHelper(_this8.pool.getUserPoolId().split('_')[1]);\n\t\t\tauthenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey, function (errGenHash) {\n\t\t\t\tif (errGenHash) {\n\t\t\t\t\treturn callback.onFailure(errGenHash);\n\t\t\t\t}\n\n\t\t\t\tvar deviceSecretVerifierConfig = {\n\t\t\t\t\tSalt: Buffer.from(authenticationHelper.getSaltDevices(), 'hex').toString('base64'),\n\t\t\t\t\tPasswordVerifier: Buffer.from(authenticationHelper.getVerifierDevices(), 'hex').toString('base64')\n\t\t\t\t};\n\n\t\t\t\t_this8.verifierDevices = deviceSecretVerifierConfig.PasswordVerifier;\n\t\t\t\t_this8.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n\t\t\t\t_this8.randomPassword = authenticationHelper.getRandomPassword();\n\n\t\t\t\t_this8.client.request('ConfirmDevice', {\n\t\t\t\t\tDeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n\t\t\t\t\tAccessToken: _this8.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\t\t\tDeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t\t\t\t\tDeviceName: navigator.userAgent\n\t\t\t\t}, function (errConfirm, dataConfirm) {\n\t\t\t\t\tif (errConfirm) {\n\t\t\t\t\t\treturn callback.onFailure(errConfirm);\n\t\t\t\t\t}\n\n\t\t\t\t\t_this8.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t\t\t\t\t_this8.cacheDeviceKeyAndPassword();\n\t\t\t\t\tif (dataConfirm.UserConfirmationNecessary === true) {\n\t\t\t\t\t\treturn callback.onSuccess(_this8.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t\t\t\t\t}\n\t\t\t\t\treturn callback.onSuccess(_this8.signInUserSession);\n\t\t\t\t});\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t\treturn undefined;\n\t\t});\n\t};\n\n\t/**\n  * This is used by an authenticated user to change the current password\n  * @param {string} oldUserPassword The current password.\n  * @param {string} newUserPassword The requested new password.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.changePassword = function changePassword(oldUserPassword, newUserPassword, callback, clientMetadata) {\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('ChangePassword', {\n\t\t\tPreviousPassword: oldUserPassword,\n\t\t\tProposedPassword: newUserPassword,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tClientMetadata: clientMetadata\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to enable MFA for itself\n  * @deprecated\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.enableMFA = function enableMFA(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tvar mfaOptions = [];\n\t\tvar mfaEnabled = {\n\t\t\tDeliveryMedium: 'SMS',\n\t\t\tAttributeName: 'phone_number'\n\t\t};\n\t\tmfaOptions.push(mfaEnabled);\n\n\t\tthis.client.request('SetUserSettings', {\n\t\t\tMFAOptions: mfaOptions,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to enable MFA for itself\n  * @param {IMfaSettings} smsMfaSettings the sms mfa settings\n  * @param {IMFASettings} softwareTokenMfaSettings the software token mfa settings\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setUserMfaPreference = function setUserMfaPreference(smsMfaSettings, softwareTokenMfaSettings, callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('SetUserMFAPreference', {\n\t\t\tSMSMfaSettings: smsMfaSettings,\n\t\t\tSoftwareTokenMfaSettings: softwareTokenMfaSettings,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to disable MFA for itself\n  * @deprecated\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.disableMFA = function disableMFA(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tvar mfaOptions = [];\n\n\t\tthis.client.request('SetUserSettings', {\n\t\t\tMFAOptions: mfaOptions,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to delete itself\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.deleteUser = function deleteUser(callback, clientMetadata) {\n\t\tvar _this9 = this;\n\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('DeleteUser', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tClientMetadata: clientMetadata\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\t_this9.clearCachedUser();\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\n  */\n\t/**\n  * This is used by an authenticated user to change a list of attributes\n  * @param {AttributeArg[]} attributes A list of the new user attributes.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.updateAttributes = function updateAttributes(attributes, callback, clientMetadata) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('UpdateUserAttributes', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tUserAttributes: attributes,\n\t\t\tClientMetadata: clientMetadata\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to get a list of attributes\n  * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getUserAttributes = function getUserAttributes(callback) {\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('GetUser', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err, userData) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\n\t\t\tvar attributeList = [];\n\n\t\t\tfor (var i = 0; i < userData.UserAttributes.length; i++) {\n\t\t\t\tvar attribute = {\n\t\t\t\t\tName: userData.UserAttributes[i].Name,\n\t\t\t\t\tValue: userData.UserAttributes[i].Value\n\t\t\t\t};\n\t\t\t\tvar userAttribute = new CognitoUserAttribute(attribute);\n\t\t\t\tattributeList.push(userAttribute);\n\t\t\t}\n\n\t\t\treturn callback(null, attributeList);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to get the MFAOptions\n  * @param {nodeCallback<MFAOptions>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getMFAOptions = function getMFAOptions(callback) {\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('GetUser', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err, userData) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\n\t\t\treturn callback(null, userData.MFAOptions);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated users to get the userData\n  * @param {nodeCallback<UserData>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getUserData = function getUserData(callback, params) {\n\t\tvar _this10 = this;\n\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\tthis.clearCachedUserData();\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tvar bypassCache = params ? params.bypassCache : false;\n\n\t\tvar userData = this.storage.getItem(this.userDataKey);\n\t\t// get the cached user data\n\n\t\tif (!userData || bypassCache) {\n\t\t\tthis.client.request('GetUser', {\n\t\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t\t}, function (err, latestUserData) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback(err, null);\n\t\t\t\t}\n\t\t\t\t_this10.cacheUserData(latestUserData);\n\t\t\t\tvar refresh = _this10.signInUserSession.getRefreshToken();\n\t\t\t\tif (refresh && refresh.getToken()) {\n\t\t\t\t\t_this10.refreshSession(refresh, function (refreshError, data) {\n\t\t\t\t\t\tif (refreshError) {\n\t\t\t\t\t\t\treturn callback(refreshError, null);\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn callback(null, latestUserData);\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturn callback(null, latestUserData);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\ttry {\n\t\t\t\treturn callback(null, JSON.parse(userData));\n\t\t\t} catch (err) {\n\t\t\t\tthis.clearCachedUserData();\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t}\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by an authenticated user to delete a list of attributes\n  * @param {string[]} attributeList Names of the attributes to delete.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.deleteAttributes = function deleteAttributes(attributeList, callback) {\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\treturn callback(new Error('User is not authenticated'), null);\n\t\t}\n\n\t\tthis.client.request('DeleteUserAttributes', {\n\t\t\tUserAttributeNames: attributeList,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, 'SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used by a user to resend a confirmation code\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.resendConfirmationCode = function resendConfirmationCode(callback, clientMetadata) {\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tUsername: this.username,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\n\t\tthis.client.request('ResendConfirmationCode', jsonReq, function (err, result) {\n\t\t\tif (err) {\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\treturn callback(null, result);\n\t\t});\n\t};\n\n\t/**\n  * This is used to get a session, either from the session object\n  * or from  the local storage, or by using a refresh token\n  *\n  * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getSession = function getSession(callback) {\n\t\tif (this.username == null) {\n\t\t\treturn callback(new Error('Username is null. Cannot retrieve a new session'), null);\n\t\t}\n\n\t\tif (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t\t\treturn callback(null, this.signInUserSession);\n\t\t}\n\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t\tvar idTokenKey = keyPrefix + '.idToken';\n\t\tvar accessTokenKey = keyPrefix + '.accessToken';\n\t\tvar refreshTokenKey = keyPrefix + '.refreshToken';\n\t\tvar clockDriftKey = keyPrefix + '.clockDrift';\n\n\t\tif (this.storage.getItem(idTokenKey)) {\n\t\t\tvar idToken = new CognitoIdToken({\n\t\t\t\tIdToken: this.storage.getItem(idTokenKey)\n\t\t\t});\n\t\t\tvar accessToken = new CognitoAccessToken({\n\t\t\t\tAccessToken: this.storage.getItem(accessTokenKey)\n\t\t\t});\n\t\t\tvar refreshToken = new CognitoRefreshToken({\n\t\t\t\tRefreshToken: this.storage.getItem(refreshTokenKey)\n\t\t\t});\n\t\t\tvar clockDrift = parseInt(this.storage.getItem(clockDriftKey), 0) || 0;\n\n\t\t\tvar sessionData = {\n\t\t\t\tIdToken: idToken,\n\t\t\t\tAccessToken: accessToken,\n\t\t\t\tRefreshToken: refreshToken,\n\t\t\t\tClockDrift: clockDrift\n\t\t\t};\n\t\t\tvar cachedSession = new CognitoUserSession(sessionData);\n\t\t\tif (cachedSession.isValid()) {\n\t\t\t\tthis.signInUserSession = cachedSession;\n\t\t\t\treturn callback(null, this.signInUserSession);\n\t\t\t}\n\n\t\t\tif (!refreshToken.getToken()) {\n\t\t\t\treturn callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n\t\t\t}\n\n\t\t\tthis.refreshSession(refreshToken, callback);\n\t\t} else {\n\t\t\tcallback(new Error('Local storage is missing an ID Token, Please authenticate'), null);\n\t\t}\n\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This uses the refreshToken to retrieve a new session\n  * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\n  * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.refreshSession = function refreshSession(refreshToken, callback, clientMetadata) {\n\t\tvar _this11 = this;\n\n\t\tvar authParameters = {};\n\t\tauthParameters.REFRESH_TOKEN = refreshToken.getToken();\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t\tvar lastUserKey = keyPrefix + '.LastAuthUser';\n\n\t\tif (this.storage.getItem(lastUserKey)) {\n\t\t\tthis.username = this.storage.getItem(lastUserKey);\n\t\t\tvar deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n\t\t\tthis.deviceKey = this.storage.getItem(deviceKeyKey);\n\t\t\tauthParameters.DEVICE_KEY = this.deviceKey;\n\t\t}\n\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tAuthFlow: 'REFRESH_TOKEN_AUTH',\n\t\t\tAuthParameters: authParameters,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('InitiateAuth', jsonReq, function (err, authResult) {\n\t\t\tif (err) {\n\t\t\t\tif (err.code === 'NotAuthorizedException') {\n\t\t\t\t\t_this11.clearCachedUser();\n\t\t\t\t}\n\t\t\t\treturn callback(err, null);\n\t\t\t}\n\t\t\tif (authResult) {\n\t\t\t\tvar authenticationResult = authResult.AuthenticationResult;\n\t\t\t\tif (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n\t\t\t\t\tauthenticationResult.RefreshToken = refreshToken.getToken();\n\t\t\t\t}\n\t\t\t\t_this11.signInUserSession = _this11.getCognitoUserSession(authenticationResult);\n\t\t\t\t_this11.cacheTokens();\n\t\t\t\treturn callback(null, _this11.signInUserSession);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t};\n\n\t/**\n  * This is used to save the session tokens to local storage\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.cacheTokens = function cacheTokens() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t\tvar idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t\tvar accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t\tvar refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t\tvar clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n\t\tvar lastUserKey = keyPrefix + '.LastAuthUser';\n\n\t\tthis.storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t\tthis.storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t\tthis.storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t\tthis.storage.setItem(clockDriftKey, '' + this.signInUserSession.getClockDrift());\n\t\tthis.storage.setItem(lastUserKey, this.username);\n\t};\n\n\t/**\n  * This is to cache user data\n  */\n\n\n\tCognitoUser.prototype.cacheUserData = function cacheUserData(userData) {\n\t\tthis.storage.setItem(this.userDataKey, JSON.stringify(userData));\n\t};\n\n\t/**\n  * This is to remove cached user data\n  */\n\n\n\tCognitoUser.prototype.clearCachedUserData = function clearCachedUserData() {\n\t\tthis.storage.removeItem(this.userDataKey);\n\t};\n\n\tCognitoUser.prototype.clearCachedUser = function clearCachedUser() {\n\t\tthis.clearCachedTokens();\n\t\tthis.clearCachedUserData();\n\t};\n\n\t/**\n  * This is used to cache the device key and device group and device password\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.cacheDeviceKeyAndPassword = function cacheDeviceKeyAndPassword() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t\tvar deviceKeyKey = keyPrefix + '.deviceKey';\n\t\tvar randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t\tvar deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n\t\tthis.storage.setItem(deviceKeyKey, this.deviceKey);\n\t\tthis.storage.setItem(randomPasswordKey, this.randomPassword);\n\t\tthis.storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n\t};\n\n\t/**\n  * This is used to get current device key and device group and device password\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getCachedDeviceKeyAndPassword = function getCachedDeviceKeyAndPassword() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t\tvar deviceKeyKey = keyPrefix + '.deviceKey';\n\t\tvar randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t\tvar deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n\t\tif (this.storage.getItem(deviceKeyKey)) {\n\t\t\tthis.deviceKey = this.storage.getItem(deviceKeyKey);\n\t\t\tthis.randomPassword = this.storage.getItem(randomPasswordKey);\n\t\t\tthis.deviceGroupKey = this.storage.getItem(deviceGroupKeyKey);\n\t\t}\n\t};\n\n\t/**\n  * This is used to clear the device key info from local storage\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.clearCachedDeviceKeyAndPassword = function clearCachedDeviceKeyAndPassword() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t\tvar deviceKeyKey = keyPrefix + '.deviceKey';\n\t\tvar randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t\tvar deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\n\t\tthis.storage.removeItem(deviceKeyKey);\n\t\tthis.storage.removeItem(randomPasswordKey);\n\t\tthis.storage.removeItem(deviceGroupKeyKey);\n\t};\n\n\t/**\n  * This is used to clear the session tokens from local storage\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.clearCachedTokens = function clearCachedTokens() {\n\t\tvar keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t\tvar idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t\tvar accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t\tvar refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t\tvar lastUserKey = keyPrefix + '.LastAuthUser';\n\t\tvar clockDriftKey = keyPrefix + '.' + this.username + '.clockDrift';\n\n\t\tthis.storage.removeItem(idTokenKey);\n\t\tthis.storage.removeItem(accessTokenKey);\n\t\tthis.storage.removeItem(refreshTokenKey);\n\t\tthis.storage.removeItem(lastUserKey);\n\t\tthis.storage.removeItem(clockDriftKey);\n\t};\n\n\t/**\n  * This is used to build a user session from tokens retrieved in the authentication result\n  * @param {object} authResult Successful auth response from server.\n  * @returns {CognitoUserSession} The new user session.\n  * @private\n  */\n\n\n\tCognitoUser.prototype.getCognitoUserSession = function getCognitoUserSession(authResult) {\n\t\tvar idToken = new CognitoIdToken(authResult);\n\t\tvar accessToken = new CognitoAccessToken(authResult);\n\t\tvar refreshToken = new CognitoRefreshToken(authResult);\n\n\t\tvar sessionData = {\n\t\t\tIdToken: idToken,\n\t\t\tAccessToken: accessToken,\n\t\t\tRefreshToken: refreshToken\n\t\t};\n\n\t\treturn new CognitoUserSession(sessionData);\n\t};\n\n\t/**\n  * This is used to initiate a forgot password request\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {inputVerificationCode?} callback.inputVerificationCode\n  *    Optional callback raised instead of onSuccess with response data.\n  * @param {onSuccess} callback.onSuccess Called on success.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.forgotPassword = function forgotPassword(callback, clientMetadata) {\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tUsername: this.username,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('ForgotPassword', jsonReq, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\tif (typeof callback.inputVerificationCode === 'function') {\n\t\t\t\treturn callback.inputVerificationCode(data);\n\t\t\t}\n\t\t\treturn callback.onSuccess(data);\n\t\t});\n\t};\n\n\t/**\n  * This is used to confirm a new password using a confirmationCode\n  * @param {string} confirmationCode Code entered by user.\n  * @param {string} newPassword Confirm new password.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<void>} callback.onSuccess Called on success.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.confirmPassword = function confirmPassword(confirmationCode, newPassword, callback, clientMetadata) {\n\t\tvar jsonReq = {\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tUsername: this.username,\n\t\t\tConfirmationCode: confirmationCode,\n\t\t\tPassword: newPassword,\n\t\t\tClientMetadata: clientMetadata\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('ConfirmForgotPassword', jsonReq, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess();\n\t\t});\n\t};\n\n\t/**\n  * This is used to initiate an attribute confirmation request\n  * @param {string} attributeName User attribute that needs confirmation.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\n  * @param {ClientMetadata} clientMetadata object which is passed from client to Cognito Lambda trigger\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getAttributeVerificationCode = function getAttributeVerificationCode(attributeName, callback, clientMetadata) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('GetUserAttributeVerificationCode', {\n\t\t\tAttributeName: attributeName,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tClientMetadata: clientMetadata\n\t\t}, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\tif (typeof callback.inputVerificationCode === 'function') {\n\t\t\t\treturn callback.inputVerificationCode(data);\n\t\t\t}\n\t\t\treturn callback.onSuccess();\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to confirm an attribute using a confirmation code\n  * @param {string} attributeName Attribute being confirmed.\n  * @param {string} confirmationCode Code entered by user.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.verifyAttribute = function verifyAttribute(attributeName, confirmationCode, callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('VerifyUserAttribute', {\n\t\t\tAttributeName: attributeName,\n\t\t\tCode: confirmationCode,\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to get the device information using the current device key\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getDevice = function getDevice(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('GetDevice', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tDeviceKey: this.deviceKey\n\t\t}, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess(data);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to forget a specific device\n  * @param {string} deviceKey Device key.\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.forgetSpecificDevice = function forgetSpecificDevice(deviceKey, callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('ForgetDevice', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tDeviceKey: deviceKey\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to forget the current device\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.forgetDevice = function forgetDevice(callback) {\n\t\tvar _this12 = this;\n\n\t\tthis.forgetSpecificDevice(this.deviceKey, {\n\t\t\tonFailure: callback.onFailure,\n\t\t\tonSuccess: function onSuccess(result) {\n\t\t\t\t_this12.deviceKey = null;\n\t\t\t\t_this12.deviceGroupKey = null;\n\t\t\t\t_this12.randomPassword = null;\n\t\t\t\t_this12.clearCachedDeviceKeyAndPassword();\n\t\t\t\treturn callback.onSuccess(result);\n\t\t\t}\n\t\t});\n\t};\n\n\t/**\n  * This is used to set the device status as remembered\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setDeviceStatusRemembered = function setDeviceStatusRemembered(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('UpdateDeviceStatus', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tDeviceKey: this.deviceKey,\n\t\t\tDeviceRememberedStatus: 'remembered'\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to set the device status as not remembered\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.setDeviceStatusNotRemembered = function setDeviceStatusNotRemembered(callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('UpdateDeviceStatus', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tDeviceKey: this.deviceKey,\n\t\t\tDeviceRememberedStatus: 'not_remembered'\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to list all devices for a user\n  *\n  * @param {int} limit the number of devices returned in a call\n  * @param {string} paginationToken the pagination token in case any was returned before\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.listDevices = function listDevices(limit, paginationToken, callback) {\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('ListDevices', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\tLimit: limit,\n\t\t\tPaginationToken: paginationToken\n\t\t}, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\treturn callback.onSuccess(data);\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used to globally revoke all tokens issued to a user\n  * @param {object} callback Result callback map.\n  * @param {onFailure} callback.onFailure Called on any error.\n  * @param {onSuccess<string>} callback.onSuccess Called on success.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.globalSignOut = function globalSignOut(callback) {\n\t\tvar _this13 = this;\n\n\t\tif (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t\t\treturn callback.onFailure(new Error('User is not authenticated'));\n\t\t}\n\n\t\tthis.client.request('GlobalSignOut', {\n\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t}, function (err) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\t_this13.clearCachedUser();\n\t\t\treturn callback.onSuccess('SUCCESS');\n\t\t});\n\t\treturn undefined;\n\t};\n\n\t/**\n  * This is used for the user to signOut of the application and clear the cached tokens.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.signOut = function signOut() {\n\t\tthis.signInUserSession = null;\n\t\tthis.clearCachedUser();\n\t};\n\n\t/**\n  * This is used by a user trying to select a given MFA\n  * @param {string} answerChallenge the mfa the user wants\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.sendMFASelectionAnswer = function sendMFASelectionAnswer(answerChallenge, callback) {\n\t\tvar _this14 = this;\n\n\t\tvar challengeResponses = {};\n\t\tchallengeResponses.USERNAME = this.username;\n\t\tchallengeResponses.ANSWER = answerChallenge;\n\n\t\tvar jsonReq = {\n\t\t\tChallengeName: 'SELECT_MFA_TYPE',\n\t\t\tChallengeResponses: challengeResponses,\n\t\t\tClientId: this.pool.getClientId(),\n\t\t\tSession: this.Session\n\t\t};\n\t\tif (this.getUserContextData()) {\n\t\t\tjsonReq.UserContextData = this.getUserContextData();\n\t\t}\n\t\tthis.client.request('RespondToAuthChallenge', jsonReq, function (err, data) {\n\t\t\tif (err) {\n\t\t\t\treturn callback.onFailure(err);\n\t\t\t}\n\t\t\t_this14.Session = data.Session;\n\t\t\tif (answerChallenge === 'SMS_MFA') {\n\t\t\t\treturn callback.mfaRequired(data.challengeName, data.challengeParameters);\n\t\t\t}\n\t\t\tif (answerChallenge === 'SOFTWARE_TOKEN_MFA') {\n\t\t\t\treturn callback.totpRequired(data.challengeName, data.challengeParameters);\n\t\t\t}\n\t\t\treturn undefined;\n\t\t});\n\t};\n\n\t/**\n  * This returns the user context data for advanced security feature.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.getUserContextData = function getUserContextData() {\n\t\tvar pool = this.pool;\n\t\treturn pool.getUserContextData(this.username);\n\t};\n\n\t/**\n  * This is used by an authenticated or a user trying to authenticate to associate a TOTP MFA\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.associateSoftwareToken = function associateSoftwareToken(callback) {\n\t\tvar _this15 = this;\n\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\tthis.client.request('AssociateSoftwareToken', {\n\t\t\t\tSession: this.Session\n\t\t\t}, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\t\t\t\t_this15.Session = data.Session;\n\t\t\t\treturn callback.associateSecretCode(data.SecretCode);\n\t\t\t});\n\t\t} else {\n\t\t\tthis.client.request('AssociateSoftwareToken', {\n\t\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t\t\t}, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\t\t\t\treturn callback.associateSecretCode(data.SecretCode);\n\t\t\t});\n\t\t}\n\t};\n\n\t/**\n  * This is used by an authenticated or a user trying to authenticate to verify a TOTP MFA\n  * @param {string} totpCode The MFA code entered by the user.\n  * @param {string} friendlyDeviceName The device name we are assigning to the device.\n  * @param {nodeCallback<string>} callback Called on success or error.\n  * @returns {void}\n  */\n\n\n\tCognitoUser.prototype.verifySoftwareToken = function verifySoftwareToken(totpCode, friendlyDeviceName, callback) {\n\t\tvar _this16 = this;\n\n\t\tif (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t\t\tthis.client.request('VerifySoftwareToken', {\n\t\t\t\tSession: this.Session,\n\t\t\t\tUserCode: totpCode,\n\t\t\t\tFriendlyDeviceName: friendlyDeviceName\n\t\t\t}, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\t\t\t\t_this16.Session = data.Session;\n\t\t\t\tvar challengeResponses = {};\n\t\t\t\tchallengeResponses.USERNAME = _this16.username;\n\t\t\t\tvar jsonReq = {\n\t\t\t\t\tChallengeName: 'MFA_SETUP',\n\t\t\t\t\tClientId: _this16.pool.getClientId(),\n\t\t\t\t\tChallengeResponses: challengeResponses,\n\t\t\t\t\tSession: _this16.Session\n\t\t\t\t};\n\t\t\t\tif (_this16.getUserContextData()) {\n\t\t\t\t\tjsonReq.UserContextData = _this16.getUserContextData();\n\t\t\t\t}\n\t\t\t\t_this16.client.request('RespondToAuthChallenge', jsonReq, function (errRespond, dataRespond) {\n\t\t\t\t\tif (errRespond) {\n\t\t\t\t\t\treturn callback.onFailure(errRespond);\n\t\t\t\t\t}\n\t\t\t\t\t_this16.signInUserSession = _this16.getCognitoUserSession(dataRespond.AuthenticationResult);\n\t\t\t\t\t_this16.cacheTokens();\n\t\t\t\t\treturn callback.onSuccess(_this16.signInUserSession);\n\t\t\t\t});\n\t\t\t\treturn undefined;\n\t\t\t});\n\t\t} else {\n\t\t\tthis.client.request('VerifySoftwareToken', {\n\t\t\t\tAccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t\t\t\tUserCode: totpCode,\n\t\t\t\tFriendlyDeviceName: friendlyDeviceName\n\t\t\t}, function (err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\treturn callback.onFailure(err);\n\t\t\t\t}\n\t\t\t\treturn callback.onSuccess(data);\n\t\t\t});\n\t\t}\n\t};\n\n\treturn CognitoUser;\n}();\n\nexport default CognitoUser;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}