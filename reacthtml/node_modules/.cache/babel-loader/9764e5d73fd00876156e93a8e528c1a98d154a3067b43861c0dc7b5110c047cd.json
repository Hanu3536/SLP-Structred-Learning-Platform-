{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\nvar logger = new Logger('XR');\nvar DEFAULT_PROVIDER_NAME = 'SumerianProvider';\nvar XR = /** @class */function () {\n  /**\n   * Initialize XR with AWS configurations\n   *\n   * @param {XROptions} options - Configuration object for XR\n   */\n  function XR(options) {\n    this._options = options;\n    logger.debug('XR Options', this._options);\n    this._defaultProvider = DEFAULT_PROVIDER_NAME;\n    this._pluggables = {};\n    // Add default provider\n    this.addPluggable(new SumerianProvider());\n  }\n  /**\n   * Configure XR part with configurations\n   *\n   * @param {XROptions} config - Configuration for XR\n   * @return {Object} - The current configuration\n   */\n  XR.prototype.configure = function (options) {\n    var _this = this;\n    var opt = options ? options.XR || options : {};\n    logger.debug('configure XR', {\n      opt: opt\n    });\n    this._options = Object.assign({}, this._options, opt);\n    Object.entries(this._pluggables).map(function (_a) {\n      var name = _a[0],\n        provider = _a[1];\n      if (name === _this._defaultProvider && !opt[_this._defaultProvider]) {\n        provider.configure(_this._options);\n      } else {\n        provider.configure(_this._options[name]);\n      }\n    });\n    return this._options;\n  };\n  /**\n   * add plugin into XR category\n   * @param {Object} pluggable - an instance of the plugin\n   */\n  XR.prototype.addPluggable = function (pluggable) {\n    return __awaiter(this, void 0, void 0, function () {\n      var config;\n      return __generator(this, function (_a) {\n        if (pluggable && pluggable.getCategory() === 'XR') {\n          this._pluggables[pluggable.getProviderName()] = pluggable;\n          config = pluggable.configure(this._options);\n          return [2 /*return*/, config];\n        }\n        return [2 /*return*/];\n      });\n    });\n  };\n\n  XR.prototype.loadScene = function (sceneName, domElementId, sceneOptions, provider) {\n    if (sceneOptions === void 0) {\n      sceneOptions = {};\n    }\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n            return [4 /*yield*/, this._pluggables[provider].loadScene(sceneName, domElementId, sceneOptions)];\n          case 1:\n            return [2 /*return*/, _a.sent()];\n        }\n      });\n    });\n  };\n  XR.prototype.isSceneLoaded = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isSceneLoaded(sceneName);\n  };\n  XR.prototype.getSceneController = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].getSceneController(sceneName);\n  };\n  XR.prototype.isVRCapable = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRCapable(sceneName);\n  };\n  XR.prototype.isVRPresentationActive = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isVRPresentationActive(sceneName);\n  };\n  XR.prototype.start = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].start(sceneName);\n  };\n  XR.prototype.enterVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enterVR(sceneName);\n  };\n  XR.prototype.exitVR = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].exitVR(sceneName);\n  };\n  XR.prototype.isMuted = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].isMuted(sceneName);\n  };\n  XR.prototype.setMuted = function (sceneName, muted, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].setMuted(sceneName, muted);\n  };\n  XR.prototype.onSceneEvent = function (sceneName, eventName, eventHandler, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].onSceneEvent(sceneName, eventName, eventHandler);\n  };\n  XR.prototype.enableAudio = function (sceneName, provider) {\n    if (provider === void 0) {\n      provider = this._defaultProvider;\n    }\n    if (!this._pluggables[provider]) throw new XRProviderNotConfigured(\"Provider '\" + provider + \"' not configured\");\n    return this._pluggables[provider].enableAudio(sceneName);\n  };\n  return XR;\n}();\nexport default XR;","map":{"version":3,"names":["ConsoleLogger","Logger","SumerianProvider","XRProviderNotConfigured","logger","DEFAULT_PROVIDER_NAME","XR","options","_options","debug","_defaultProvider","_pluggables","addPluggable","prototype","configure","_this","opt","Object","assign","entries","map","_a","name","provider","pluggable","getCategory","getProviderName","config","loadScene","sceneName","domElementId","sceneOptions","sent","isSceneLoaded","getSceneController","isVRCapable","isVRPresentationActive","start","enterVR","exitVR","isMuted","setMuted","muted","onSceneEvent","eventName","eventHandler","enableAudio"],"sources":["C:\\Study\\6805\\React\\reacthtml\\node_modules\\@aws-amplify\\xr\\src\\XR.ts"],"sourcesContent":["/*\n * Copyright 2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { XRProvider, XROptions, SceneOptions } from './types';\nimport { SumerianProvider } from './Providers/SumerianProvider';\nimport { XRProviderNotConfigured } from './Errors';\n\nconst logger = new Logger('XR');\n\nconst DEFAULT_PROVIDER_NAME = 'SumerianProvider';\n\nexport default class XR {\n\tprivate _options: XROptions;\n\n\tprivate _pluggables: { [key: string]: XRProvider };\n\tprivate _defaultProvider: string;\n\n\t/**\n\t * Initialize XR with AWS configurations\n\t *\n\t * @param {XROptions} options - Configuration object for XR\n\t */\n\tconstructor(options: XROptions) {\n\t\tthis._options = options;\n\t\tlogger.debug('XR Options', this._options);\n\t\tthis._defaultProvider = DEFAULT_PROVIDER_NAME;\n\t\tthis._pluggables = {};\n\n\t\t// Add default provider\n\t\tthis.addPluggable(new SumerianProvider());\n\t}\n\n\t/**\n\t * Configure XR part with configurations\n\t *\n\t * @param {XROptions} config - Configuration for XR\n\t * @return {Object} - The current configuration\n\t */\n\tconfigure(options: XROptions) {\n\t\tconst opt = options ? options.XR || options : {};\n\t\tlogger.debug('configure XR', { opt });\n\n\t\tthis._options = Object.assign({}, this._options, opt);\n\n\t\tObject.entries(this._pluggables).map(([name, provider]) => {\n\t\t\tif (name === this._defaultProvider && !opt[this._defaultProvider]) {\n\t\t\t\tprovider.configure(this._options);\n\t\t\t} else {\n\t\t\t\tprovider.configure(this._options[name]);\n\t\t\t}\n\t\t});\n\n\t\treturn this._options;\n\t}\n\n\t/**\n\t * add plugin into XR category\n\t * @param {Object} pluggable - an instance of the plugin\n\t */\n\tpublic async addPluggable(pluggable: XRProvider) {\n\t\tif (pluggable && pluggable.getCategory() === 'XR') {\n\t\t\tthis._pluggables[pluggable.getProviderName()] = pluggable;\n\t\t\tconst config = pluggable.configure(this._options);\n\n\t\t\treturn config;\n\t\t}\n\t}\n\n\tpublic async loadScene(\n\t\tsceneName: string,\n\t\tdomElementId: string,\n\t\tsceneOptions: SceneOptions = {},\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn await this._pluggables[provider].loadScene(\n\t\t\tsceneName,\n\t\t\tdomElementId,\n\t\t\tsceneOptions\n\t\t);\n\t}\n\n\tpublic isSceneLoaded(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isSceneLoaded(sceneName);\n\t}\n\n\tpublic getSceneController(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].getSceneController(sceneName);\n\t}\n\n\tpublic isVRCapable(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isVRCapable(sceneName);\n\t}\n\n\tpublic isVRPresentationActive(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isVRPresentationActive(sceneName);\n\t}\n\n\tpublic start(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].start(sceneName);\n\t}\n\n\tpublic enterVR(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].enterVR(sceneName);\n\t}\n\n\tpublic exitVR(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].exitVR(sceneName);\n\t}\n\n\tpublic isMuted(sceneName: string, provider: string = this._defaultProvider) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].isMuted(sceneName);\n\t}\n\n\tpublic setMuted(\n\t\tsceneName: string,\n\t\tmuted: boolean,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].setMuted(sceneName, muted);\n\t}\n\n\tpublic onSceneEvent(\n\t\tsceneName: string,\n\t\teventName: string,\n\t\teventHandler: Function,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].onSceneEvent(\n\t\t\tsceneName,\n\t\t\teventName,\n\t\t\teventHandler\n\t\t);\n\t}\n\n\tpublic enableAudio(\n\t\tsceneName: string,\n\t\tprovider: string = this._defaultProvider\n\t) {\n\t\tif (!this._pluggables[provider])\n\t\t\tthrow new XRProviderNotConfigured(\n\t\t\t\t`Provider '${provider}' not configured`\n\t\t\t);\n\t\treturn this._pluggables[provider].enableAudio(sceneName);\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;AAYA,SAASA,aAAa,IAAIC,MAAM,QAAQ,mBAAmB;AAE3D,SAASC,gBAAgB,QAAQ,8BAA8B;AAC/D,SAASC,uBAAuB,QAAQ,UAAU;AAElD,IAAMC,MAAM,GAAG,IAAIH,MAAM,CAAC,IAAI,CAAC;AAE/B,IAAMI,qBAAqB,GAAG,kBAAkB;AAEhD,IAAAC,EAAA;EAMC;;;;;EAKA,SAAAA,GAAYC,OAAkB;IAC7B,IAAI,CAACC,QAAQ,GAAGD,OAAO;IACvBH,MAAM,CAACK,KAAK,CAAC,YAAY,EAAE,IAAI,CAACD,QAAQ,CAAC;IACzC,IAAI,CAACE,gBAAgB,GAAGL,qBAAqB;IAC7C,IAAI,CAACM,WAAW,GAAG,EAAE;IAErB;IACA,IAAI,CAACC,YAAY,CAAC,IAAIV,gBAAgB,EAAE,CAAC;EAC1C;EAEA;;;;;;EAMAI,EAAA,CAAAO,SAAA,CAAAC,SAAS,GAAT,UAAUP,OAAkB;IAA5B,IAAAQ,KAAA;IACC,IAAMC,GAAG,GAAGT,OAAO,GAAGA,OAAO,CAACD,EAAE,IAAIC,OAAO,GAAG,EAAE;IAChDH,MAAM,CAACK,KAAK,CAAC,cAAc,EAAE;MAAEO,GAAG,EAAAA;IAAA,CAAE,CAAC;IAErC,IAAI,CAACR,QAAQ,GAAGS,MAAM,CAACC,MAAM,CAAC,EAAE,EAAE,IAAI,CAACV,QAAQ,EAAEQ,GAAG,CAAC;IAErDC,MAAM,CAACE,OAAO,CAAC,IAAI,CAACR,WAAW,CAAC,CAACS,GAAG,CAAC,UAACC,EAAgB;UAAfC,IAAA,GAAAD,EAAA,GAAI;QAAEE,QAAA,GAAAF,EAAA,GAAQ;MACpD,IAAIC,IAAI,KAAKP,KAAI,CAACL,gBAAgB,IAAI,CAACM,GAAG,CAACD,KAAI,CAACL,gBAAgB,CAAC,EAAE;QAClEa,QAAQ,CAACT,SAAS,CAACC,KAAI,CAACP,QAAQ,CAAC;OACjC,MAAM;QACNe,QAAQ,CAACT,SAAS,CAACC,KAAI,CAACP,QAAQ,CAACc,IAAI,CAAC,CAAC;;IAEzC,CAAC,CAAC;IAEF,OAAO,IAAI,CAACd,QAAQ;EACrB,CAAC;EAED;;;;EAIaF,EAAA,CAAAO,SAAA,CAAAD,YAAY,GAAzB,UAA0BY,SAAqB;;;;QAC9C,IAAIA,SAAS,IAAIA,SAAS,CAACC,WAAW,EAAE,KAAK,IAAI,EAAE;UAClD,IAAI,CAACd,WAAW,CAACa,SAAS,CAACE,eAAe,EAAE,CAAC,GAAGF,SAAS;UACnDG,MAAM,GAAGH,SAAS,CAACV,SAAS,CAAC,IAAI,CAACN,QAAQ,CAAC;UAEjD,sBAAOmB,MAAM;;;;;GAEd;;EAEYrB,EAAA,CAAAO,SAAA,CAAAe,SAAS,GAAtB,UACCC,SAAiB,EACjBC,YAAoB,EACpBC,YAA+B,EAC/BR,QAAwC;IADxC,IAAAQ,YAAA;MAAAA,YAAA,KAA+B;IAAA;IAC/B,IAAAR,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;;;;;YAExC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;YACK,qBAAM,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACK,SAAS,CAChDC,SAAS,EACTC,YAAY,EACZC,YAAY,CACZ;;YAJD,sBAAOV,EAAA,CAAAW,IAAA,EAIN;;;;GACD;EAEM1B,EAAA,CAAAO,SAAA,CAAAoB,aAAa,GAApB,UACCJ,SAAiB,EACjBN,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IAExC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACU,aAAa,CAACJ,SAAS,CAAC;EAC3D,CAAC;EAEMvB,EAAA,CAAAO,SAAA,CAAAqB,kBAAkB,GAAzB,UACCL,SAAiB,EACjBN,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IAExC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACW,kBAAkB,CAACL,SAAS,CAAC;EAChE,CAAC;EAEMvB,EAAA,CAAAO,SAAA,CAAAsB,WAAW,GAAlB,UACCN,SAAiB,EACjBN,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IAExC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACY,WAAW,CAACN,SAAS,CAAC;EACzD,CAAC;EAEMvB,EAAA,CAAAO,SAAA,CAAAuB,sBAAsB,GAA7B,UACCP,SAAiB,EACjBN,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IAExC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACa,sBAAsB,CAACP,SAAS,CAAC;EACpE,CAAC;EAEMvB,EAAA,CAAAO,SAAA,CAAAwB,KAAK,GAAZ,UAAaR,SAAiB,EAAEN,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IACvE,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACc,KAAK,CAACR,SAAS,CAAC;EACnD,CAAC;EAEMvB,EAAA,CAAAO,SAAA,CAAAyB,OAAO,GAAd,UAAeT,SAAiB,EAAEN,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IACzE,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACe,OAAO,CAACT,SAAS,CAAC;EACrD,CAAC;EAEMvB,EAAA,CAAAO,SAAA,CAAA0B,MAAM,GAAb,UAAcV,SAAiB,EAAEN,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IACxE,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACgB,MAAM,CAACV,SAAS,CAAC;EACpD,CAAC;EAEMvB,EAAA,CAAAO,SAAA,CAAA2B,OAAO,GAAd,UAAeX,SAAiB,EAAEN,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IACzE,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACiB,OAAO,CAACX,SAAS,CAAC;EACrD,CAAC;EAEMvB,EAAA,CAAAO,SAAA,CAAA4B,QAAQ,GAAf,UACCZ,SAAiB,EACjBa,KAAc,EACdnB,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IAExC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACkB,QAAQ,CAACZ,SAAS,EAAEa,KAAK,CAAC;EAC7D,CAAC;EAEMpC,EAAA,CAAAO,SAAA,CAAA8B,YAAY,GAAnB,UACCd,SAAiB,EACjBe,SAAiB,EACjBC,YAAsB,EACtBtB,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IAExC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACoB,YAAY,CAC7Cd,SAAS,EACTe,SAAS,EACTC,YAAY,CACZ;EACF,CAAC;EAEMvC,EAAA,CAAAO,SAAA,CAAAiC,WAAW,GAAlB,UACCjB,SAAiB,EACjBN,QAAwC;IAAxC,IAAAA,QAAA;MAAAA,QAAA,GAAmB,IAAI,CAACb,gBAAgB;IAAA;IAExC,IAAI,CAAC,IAAI,CAACC,WAAW,CAACY,QAAQ,CAAC,EAC9B,MAAM,IAAIpB,uBAAuB,CAChC,eAAaoB,QAAQ,qBAAkB,CACvC;IACF,OAAO,IAAI,CAACZ,WAAW,CAACY,QAAQ,CAAC,CAACuB,WAAW,CAACjB,SAAS,CAAC;EACzD,CAAC;EACF,OAAAvB,EAAC;AAAD,CAAC,CA7LD"},"metadata":{},"sourceType":"module","externalDependencies":[]}