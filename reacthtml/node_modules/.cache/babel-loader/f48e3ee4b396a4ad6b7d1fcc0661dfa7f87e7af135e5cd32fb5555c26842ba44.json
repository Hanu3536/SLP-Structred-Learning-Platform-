{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { ConsoleLogger as Logger, Hub, Credentials, Parser } from '@aws-amplify/core';\nimport * as S3 from 'aws-sdk/clients/s3';\nvar logger = new Logger('AWSS3Provider');\nvar AMPLIFY_SYMBOL = typeof Symbol !== 'undefined' && typeof Symbol.for === 'function' ? Symbol.for('amplify_default') : '@@amplify_default';\nvar dispatchStorageEvent = function (track, event, attrs, metrics, message) {\n  if (track) {\n    Hub.dispatch('storage', {\n      event: event,\n      data: {\n        attrs: attrs,\n        metrics: metrics\n      },\n      message: message\n    }, 'Storage', AMPLIFY_SYMBOL);\n  }\n};\nvar localTestingStorageEndpoint = 'http://localhost:20005';\n/**\n * Provide storage methods to use AWS S3\n */\nvar AWSS3Provider = /** @class */function () {\n  /**\n   * Initialize Storage with AWS configurations\n   * @param {Object} config - Configuration object for storage\n   */\n  function AWSS3Provider(config) {\n    this._config = config ? config : {};\n    logger.debug('Storage Options', this._config);\n  }\n  /**\n   * get the category of the plugin\n   */\n  AWSS3Provider.prototype.getCategory = function () {\n    return AWSS3Provider.CATEGORY;\n  };\n  /**\n   * get provider name of the plugin\n   */\n  AWSS3Provider.prototype.getProviderName = function () {\n    return AWSS3Provider.PROVIDER_NAME;\n  };\n  /**\n   * Configure Storage part with aws configuration\n   * @param {Object} config - Configuration of the Storage\n   * @return {Object} - Current configuration\n   */\n  AWSS3Provider.prototype.configure = function (config) {\n    logger.debug('configure Storage', config);\n    if (!config) return this._config;\n    var amplifyConfig = Parser.parseMobilehubConfig(config);\n    this._config = Object.assign({}, this._config, amplifyConfig.Storage);\n    if (!this._config.bucket) {\n      logger.debug('Do not have bucket yet');\n    }\n    return this._config;\n  };\n  /**\n   * Get a presigned URL of the file or the object data when download:true\n   *\n   * @param {String} key - key of the object\n   * @param {Object} [config] - { level : private|protected|public, download: true|false }\n   * @return - A promise resolves to Amazon S3 presigned URL on success\n   */\n  AWSS3Provider.prototype.get = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, download, track, expires, prefix, final_key, s3, params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, download = opt.download, track = opt.track, expires = opt.expires;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createS3(opt);\n            logger.debug('get ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            if (download === true) {\n              return [2 /*return*/, new Promise(function (res, rej) {\n                s3.getObject(params, function (err, data) {\n                  if (err) {\n                    dispatchStorageEvent(track, 'download', {\n                      method: 'get',\n                      result: 'failed'\n                    }, null, \"Download failed with \" + err.message);\n                    rej(err);\n                  } else {\n                    dispatchStorageEvent(track, 'download', {\n                      method: 'get',\n                      result: 'success'\n                    }, {\n                      fileSize: Number(data.Body['length'])\n                    }, \"Download success for \" + key);\n                    res(data);\n                  }\n                });\n              })];\n            }\n            if (expires) {\n              params.Expires = expires;\n            }\n            return [2 /*return*/, new Promise(function (res, rej) {\n              try {\n                var url = s3.getSignedUrl('getObject', params);\n                dispatchStorageEvent(track, 'getSignedUrl', {\n                  method: 'get',\n                  result: 'success'\n                }, null, \"Signed URL: \" + url);\n                res(url);\n              } catch (e) {\n                logger.warn('get signed url error', e);\n                dispatchStorageEvent(track, 'getSignedUrl', {\n                  method: 'get',\n                  result: 'failed'\n                }, null, \"Could not get a signed URL for \" + key);\n                rej(e);\n              }\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * Put a file in S3 bucket specified to configure method\n   * @param {String} key - key of the object\n   * @param {Object} object - File to be put in Amazon S3 bucket\n   * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n   *  progressCallback: function }\n   * @return - promise resolves to object on success\n   */\n  AWSS3Provider.prototype.put = function (key, object, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, progressCallback, contentType, contentDisposition, cacheControl, expires, metadata, tagging, serverSideEncryption, SSECustomerAlgorithm, SSECustomerKey, SSECustomerKeyMD5, SSEKMSKeyId, type, prefix, final_key, s3, params, upload, data, e_1;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track, progressCallback = opt.progressCallback;\n            contentType = opt.contentType, contentDisposition = opt.contentDisposition, cacheControl = opt.cacheControl, expires = opt.expires, metadata = opt.metadata, tagging = opt.tagging;\n            serverSideEncryption = opt.serverSideEncryption, SSECustomerAlgorithm = opt.SSECustomerAlgorithm, SSECustomerKey = opt.SSECustomerKey, SSECustomerKeyMD5 = opt.SSECustomerKeyMD5, SSEKMSKeyId = opt.SSEKMSKeyId;\n            type = contentType ? contentType : 'binary/octet-stream';\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createS3(opt);\n            logger.debug('put ' + key + ' to ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key,\n              Body: object,\n              ContentType: type\n            };\n            if (cacheControl) {\n              params.CacheControl = cacheControl;\n            }\n            if (contentDisposition) {\n              params.ContentDisposition = contentDisposition;\n            }\n            if (expires) {\n              params.Expires = expires;\n            }\n            if (metadata) {\n              params.Metadata = metadata;\n            }\n            if (tagging) {\n              params.Tagging = tagging;\n            }\n            if (serverSideEncryption) {\n              params.ServerSideEncryption = serverSideEncryption;\n              if (SSECustomerAlgorithm) {\n                params.SSECustomerAlgorithm = SSECustomerAlgorithm;\n              }\n              if (SSECustomerKey) {\n                params.SSECustomerKey = SSECustomerKey;\n              }\n              if (SSECustomerKeyMD5) {\n                params.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n              }\n              if (SSEKMSKeyId) {\n                params.SSEKMSKeyId = SSEKMSKeyId;\n              }\n            }\n            _a.label = 2;\n          case 2:\n            _a.trys.push([2, 4,, 5]);\n            upload = s3.upload(params).on('httpUploadProgress', function (progress) {\n              if (progressCallback) {\n                if (typeof progressCallback === 'function') {\n                  progressCallback(progress);\n                } else {\n                  logger.warn('progressCallback should be a function, not a ' + typeof progressCallback);\n                }\n              }\n            });\n            return [4 /*yield*/, upload.promise()];\n          case 3:\n            data = _a.sent();\n            logger.debug('upload result', data);\n            dispatchStorageEvent(track, 'upload', {\n              method: 'put',\n              result: 'success'\n            }, null, \"Upload success for \" + key);\n            return [2 /*return*/, {\n              key: data.Key.substr(prefix.length)\n            }];\n          case 4:\n            e_1 = _a.sent();\n            logger.warn('error uploading', e_1);\n            dispatchStorageEvent(track, 'upload', {\n              method: 'put',\n              result: 'failed'\n            }, null, \"Error uploading \" + key);\n            throw e_1;\n          case 5:\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n  /**\n   * Remove the object for specified key\n   * @param {String} key - key of the object\n   * @param {Object} [config] - { level : private|protected|public }\n   * @return - Promise resolves upon successful removal of the object\n   */\n  AWSS3Provider.prototype.remove = function (key, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, prefix, final_key, s3, params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track;\n            prefix = this._prefix(opt);\n            final_key = prefix + key;\n            s3 = this._createS3(opt);\n            logger.debug('remove ' + key + ' from ' + final_key);\n            params = {\n              Bucket: bucket,\n              Key: final_key\n            };\n            return [2 /*return*/, new Promise(function (res, rej) {\n              s3.deleteObject(params, function (err, data) {\n                if (err) {\n                  dispatchStorageEvent(track, 'delete', {\n                    method: 'remove',\n                    result: 'failed'\n                  }, null, \"Deletion of \" + key + \" failed with \" + err);\n                  rej(err);\n                } else {\n                  dispatchStorageEvent(track, 'delete', {\n                    method: 'remove',\n                    result: 'success'\n                  }, null, \"Deleted \" + key + \" successfully\");\n                  res(data);\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * List bucket objects relative to the level and prefix specified\n   * @param {String} path - the path that contains objects\n   * @param {Object} [config] - { level : private|protected|public }\n   * @return - Promise resolves to list of keys for all objects in path\n   */\n  AWSS3Provider.prototype.list = function (path, config) {\n    return __awaiter(this, void 0, void 0, function () {\n      var credentialsOK, opt, bucket, track, prefix, final_path, s3, params;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this._ensureCredentials()];\n          case 1:\n            credentialsOK = _a.sent();\n            if (!credentialsOK) {\n              return [2 /*return*/, Promise.reject('No credentials')];\n            }\n            opt = Object.assign({}, this._config, config);\n            bucket = opt.bucket, track = opt.track;\n            prefix = this._prefix(opt);\n            final_path = prefix + path;\n            s3 = this._createS3(opt);\n            logger.debug('list ' + path + ' from ' + final_path);\n            params = {\n              Bucket: bucket,\n              Prefix: final_path\n            };\n            return [2 /*return*/, new Promise(function (res, rej) {\n              s3.listObjects(params, function (err, data) {\n                if (err) {\n                  logger.warn('list error', err);\n                  dispatchStorageEvent(track, 'list', {\n                    method: 'list',\n                    result: 'failed'\n                  }, null, \"Listing items failed: \" + err.message);\n                  rej(err);\n                } else {\n                  var list = data.Contents.map(function (item) {\n                    return {\n                      key: item.Key.substr(prefix.length),\n                      eTag: item.ETag,\n                      lastModified: item.LastModified,\n                      size: item.Size\n                    };\n                  });\n                  dispatchStorageEvent(track, 'list', {\n                    method: 'list',\n                    result: 'success'\n                  }, null, list.length + \" items returned from list operation\");\n                  logger.debug('list', list);\n                  res(list);\n                }\n              });\n            })];\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n  AWSS3Provider.prototype._ensureCredentials = function () {\n    var _this = this;\n    return Credentials.get().then(function (credentials) {\n      if (!credentials) return false;\n      var cred = Credentials.shear(credentials);\n      logger.debug('set credentials for storage', cred);\n      _this._config.credentials = cred;\n      return true;\n    }).catch(function (err) {\n      logger.warn('ensure credentials error', err);\n      return false;\n    });\n  };\n  /**\n   * @private\n   */\n  AWSS3Provider.prototype._prefix = function (config) {\n    var credentials = config.credentials,\n      level = config.level;\n    var customPrefix = config.customPrefix || {};\n    var identityId = config.identityId || credentials.identityId;\n    var privatePath = (customPrefix.private !== undefined ? customPrefix.private : 'private/') + identityId + '/';\n    var protectedPath = (customPrefix.protected !== undefined ? customPrefix.protected : 'protected/') + identityId + '/';\n    var publicPath = customPrefix.public !== undefined ? customPrefix.public : 'public/';\n    switch (level) {\n      case 'private':\n        return privatePath;\n      case 'protected':\n        return protectedPath;\n      default:\n        return publicPath;\n    }\n  };\n  /**\n   * @private\n   */\n  AWSS3Provider.prototype._createS3 = function (config) {\n    var bucket = config.bucket,\n      region = config.region,\n      credentials = config.credentials,\n      dangerouslyConnectToHttpEndpointForTesting = config.dangerouslyConnectToHttpEndpointForTesting;\n    var localTestingConfig = {};\n    if (dangerouslyConnectToHttpEndpointForTesting) {\n      localTestingConfig = {\n        endpoint: localTestingStorageEndpoint,\n        s3BucketEndpoint: true,\n        s3ForcePathStyle: true\n      };\n    }\n    return new S3(__assign({\n      apiVersion: '2006-03-01',\n      params: {\n        Bucket: bucket\n      },\n      signatureVersion: 'v4',\n      region: region,\n      credentials: credentials\n    }, localTestingConfig));\n  };\n  AWSS3Provider.CATEGORY = 'Storage';\n  AWSS3Provider.PROVIDER_NAME = 'AWSS3';\n  return AWSS3Provider;\n}();\nexport default AWSS3Provider;","map":{"version":3,"names":["ConsoleLogger","Logger","Hub","Credentials","Parser","S3","logger","AMPLIFY_SYMBOL","Symbol","for","dispatchStorageEvent","track","event","attrs","metrics","message","dispatch","data","localTestingStorageEndpoint","AWSS3Provider","config","_config","debug","prototype","getCategory","CATEGORY","getProviderName","PROVIDER_NAME","configure","amplifyConfig","parseMobilehubConfig","Object","assign","Storage","bucket","get","key","_ensureCredentials","credentialsOK","_a","sent","Promise","reject","opt","download","expires","prefix","_prefix","final_key","s3","_createS3","params","Bucket","Key","res","rej","getObject","err","method","result","fileSize","Number","Body","Expires","url","getSignedUrl","e","warn","put","object","progressCallback","contentType","contentDisposition","cacheControl","metadata","tagging","serverSideEncryption","SSECustomerAlgorithm","SSECustomerKey","SSECustomerKeyMD5","SSEKMSKeyId","type","ContentType","CacheControl","ContentDisposition","Metadata","Tagging","ServerSideEncryption","upload","on","progress","promise","substr","length","e_1","remove","deleteObject","list","path","final_path","Prefix","listObjects","Contents","map","item","eTag","ETag","lastModified","LastModified","size","Size","_this","then","credentials","cred","shear","catch","level","customPrefix","identityId","privatePath","private","undefined","protectedPath","protected","publicPath","public","region","dangerouslyConnectToHttpEndpointForTesting","localTestingConfig","endpoint","s3BucketEndpoint","s3ForcePathStyle","__assign","apiVersion","signatureVersion"],"sources":["C:\\Study\\6805\\React\\reacthtml\\node_modules\\@aws-amplify\\storage\\src\\Providers\\AWSS3Provider.ts"],"sourcesContent":["/*\n * Copyright 2017-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport {\n\tConsoleLogger as Logger,\n\tHub,\n\tCredentials,\n\tParser,\n} from '@aws-amplify/core';\nimport * as S3 from 'aws-sdk/clients/s3';\nimport { StorageOptions, StorageProvider } from '../types';\n\nconst logger = new Logger('AWSS3Provider');\n\nconst AMPLIFY_SYMBOL = (typeof Symbol !== 'undefined' &&\ntypeof Symbol.for === 'function'\n\t? Symbol.for('amplify_default')\n\t: '@@amplify_default') as Symbol;\n\nconst dispatchStorageEvent = (\n\ttrack: boolean,\n\tevent: string,\n\tattrs: any,\n\tmetrics: any,\n\tmessage: string\n) => {\n\tif (track) {\n\t\tHub.dispatch(\n\t\t\t'storage',\n\t\t\t{\n\t\t\t\tevent,\n\t\t\t\tdata: { attrs, metrics },\n\t\t\t\tmessage,\n\t\t\t},\n\t\t\t'Storage',\n\t\t\tAMPLIFY_SYMBOL\n\t\t);\n\t}\n};\n\nconst localTestingStorageEndpoint = 'http://localhost:20005';\n\n/**\n * Provide storage methods to use AWS S3\n */\nexport default class AWSS3Provider implements StorageProvider {\n\tstatic CATEGORY = 'Storage';\n\tstatic PROVIDER_NAME = 'AWSS3';\n\n\t/**\n\t * @private\n\t */\n\tprivate _config;\n\n\t/**\n\t * Initialize Storage with AWS configurations\n\t * @param {Object} config - Configuration object for storage\n\t */\n\tconstructor(config?: StorageOptions) {\n\t\tthis._config = config ? config : {};\n\t\tlogger.debug('Storage Options', this._config);\n\t}\n\n\t/**\n\t * get the category of the plugin\n\t */\n\tpublic getCategory(): string {\n\t\treturn AWSS3Provider.CATEGORY;\n\t}\n\n\t/**\n\t * get provider name of the plugin\n\t */\n\tgetProviderName(): string {\n\t\treturn AWSS3Provider.PROVIDER_NAME;\n\t}\n\n\t/**\n\t * Configure Storage part with aws configuration\n\t * @param {Object} config - Configuration of the Storage\n\t * @return {Object} - Current configuration\n\t */\n\tpublic configure(config?): object {\n\t\tlogger.debug('configure Storage', config);\n\t\tif (!config) return this._config;\n\t\tconst amplifyConfig = Parser.parseMobilehubConfig(config);\n\t\tthis._config = Object.assign({}, this._config, amplifyConfig.Storage);\n\t\tif (!this._config.bucket) {\n\t\t\tlogger.debug('Do not have bucket yet');\n\t\t}\n\t\treturn this._config;\n\t}\n\n\t/**\n\t * Get a presigned URL of the file or the object data when download:true\n\t *\n\t * @param {String} key - key of the object\n\t * @param {Object} [config] - { level : private|protected|public, download: true|false }\n\t * @return - A promise resolves to Amazon S3 presigned URL on success\n\t */\n\tpublic async get(key: string, config?): Promise<String | Object> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, download, track, expires } = opt;\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createS3(opt);\n\t\tlogger.debug('get ' + key + ' from ' + final_key);\n\n\t\tconst params: any = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\tif (download === true) {\n\t\t\treturn new Promise<any>((res, rej) => {\n\t\t\t\ts3.getObject(params, (err, data) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\t\t\ttrack,\n\t\t\t\t\t\t\t'download',\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmethod: 'get',\n\t\t\t\t\t\t\t\tresult: 'failed',\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tnull,\n\t\t\t\t\t\t\t`Download failed with ${err.message}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\trej(err);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\t\t\ttrack,\n\t\t\t\t\t\t\t'download',\n\t\t\t\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\t\t\t\t{ fileSize: Number(data.Body['length']) },\n\t\t\t\t\t\t\t`Download success for ${key}`\n\t\t\t\t\t\t);\n\t\t\t\t\t\tres(data);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\tif (expires) {\n\t\t\tparams.Expires = expires;\n\t\t}\n\n\t\treturn new Promise<string>((res, rej) => {\n\t\t\ttry {\n\t\t\t\tconst url = s3.getSignedUrl('getObject', params);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'getSignedUrl',\n\t\t\t\t\t{ method: 'get', result: 'success' },\n\t\t\t\t\tnull,\n\t\t\t\t\t`Signed URL: ${url}`\n\t\t\t\t);\n\t\t\t\tres(url);\n\t\t\t} catch (e) {\n\t\t\t\tlogger.warn('get signed url error', e);\n\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\ttrack,\n\t\t\t\t\t'getSignedUrl',\n\t\t\t\t\t{ method: 'get', result: 'failed' },\n\t\t\t\t\tnull,\n\t\t\t\t\t`Could not get a signed URL for ${key}`\n\t\t\t\t);\n\t\t\t\trej(e);\n\t\t\t}\n\t\t});\n\t}\n\n\t/**\n\t * Put a file in S3 bucket specified to configure method\n\t * @param {String} key - key of the object\n\t * @param {Object} object - File to be put in Amazon S3 bucket\n\t * @param {Object} [config] - { level : private|protected|public, contentType: MIME Types,\n\t *  progressCallback: function }\n\t * @return - promise resolves to object on success\n\t */\n\tpublic async put(key: string, object, config?): Promise<Object> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track, progressCallback } = opt;\n\t\tconst {\n\t\t\tcontentType,\n\t\t\tcontentDisposition,\n\t\t\tcacheControl,\n\t\t\texpires,\n\t\t\tmetadata,\n\t\t\ttagging,\n\t\t} = opt;\n\t\tconst {\n\t\t\tserverSideEncryption,\n\t\t\tSSECustomerAlgorithm,\n\t\t\tSSECustomerKey,\n\t\t\tSSECustomerKeyMD5,\n\t\t\tSSEKMSKeyId,\n\t\t} = opt;\n\t\tconst type = contentType ? contentType : 'binary/octet-stream';\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createS3(opt);\n\t\tlogger.debug('put ' + key + ' to ' + final_key);\n\n\t\tconst params: any = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t\tBody: object,\n\t\t\tContentType: type,\n\t\t};\n\t\tif (cacheControl) {\n\t\t\tparams.CacheControl = cacheControl;\n\t\t}\n\t\tif (contentDisposition) {\n\t\t\tparams.ContentDisposition = contentDisposition;\n\t\t}\n\t\tif (expires) {\n\t\t\tparams.Expires = expires;\n\t\t}\n\t\tif (metadata) {\n\t\t\tparams.Metadata = metadata;\n\t\t}\n\t\tif (tagging) {\n\t\t\tparams.Tagging = tagging;\n\t\t}\n\t\tif (serverSideEncryption) {\n\t\t\tparams.ServerSideEncryption = serverSideEncryption;\n\t\t\tif (SSECustomerAlgorithm) {\n\t\t\t\tparams.SSECustomerAlgorithm = SSECustomerAlgorithm;\n\t\t\t}\n\t\t\tif (SSECustomerKey) {\n\t\t\t\tparams.SSECustomerKey = SSECustomerKey;\n\t\t\t}\n\t\t\tif (SSECustomerKeyMD5) {\n\t\t\t\tparams.SSECustomerKeyMD5 = SSECustomerKeyMD5;\n\t\t\t}\n\t\t\tif (SSEKMSKeyId) {\n\t\t\t\tparams.SSEKMSKeyId = SSEKMSKeyId;\n\t\t\t}\n\t\t}\n\n\t\ttry {\n\t\t\tconst upload = s3.upload(params).on('httpUploadProgress', progress => {\n\t\t\t\tif (progressCallback) {\n\t\t\t\t\tif (typeof progressCallback === 'function') {\n\t\t\t\t\t\tprogressCallback(progress);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tlogger.warn(\n\t\t\t\t\t\t\t'progressCallback should be a function, not a ' +\n\t\t\t\t\t\t\t\ttypeof progressCallback\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst data = await upload.promise();\n\n\t\t\tlogger.debug('upload result', data);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'upload',\n\t\t\t\t{ method: 'put', result: 'success' },\n\t\t\t\tnull,\n\t\t\t\t`Upload success for ${key}`\n\t\t\t);\n\n\t\t\treturn {\n\t\t\t\tkey: data.Key.substr(prefix.length),\n\t\t\t};\n\t\t} catch (e) {\n\t\t\tlogger.warn('error uploading', e);\n\t\t\tdispatchStorageEvent(\n\t\t\t\ttrack,\n\t\t\t\t'upload',\n\t\t\t\t{ method: 'put', result: 'failed' },\n\t\t\t\tnull,\n\t\t\t\t`Error uploading ${key}`\n\t\t\t);\n\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * Remove the object for specified key\n\t * @param {String} key - key of the object\n\t * @param {Object} [config] - { level : private|protected|public }\n\t * @return - Promise resolves upon successful removal of the object\n\t */\n\tpublic async remove(key: string, config?): Promise<any> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_key = prefix + key;\n\t\tconst s3 = this._createS3(opt);\n\t\tlogger.debug('remove ' + key + ' from ' + final_key);\n\n\t\tconst params = {\n\t\t\tBucket: bucket,\n\t\t\tKey: final_key,\n\t\t};\n\n\t\treturn new Promise<any>((res, rej) => {\n\t\t\ts3.deleteObject(params, (err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\t\ttrack,\n\t\t\t\t\t\t'delete',\n\t\t\t\t\t\t{ method: 'remove', result: 'failed' },\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t`Deletion of ${key} failed with ${err}`\n\t\t\t\t\t);\n\t\t\t\t\trej(err);\n\t\t\t\t} else {\n\t\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\t\ttrack,\n\t\t\t\t\t\t'delete',\n\t\t\t\t\t\t{ method: 'remove', result: 'success' },\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t`Deleted ${key} successfully`\n\t\t\t\t\t);\n\t\t\t\t\tres(data);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * List bucket objects relative to the level and prefix specified\n\t * @param {String} path - the path that contains objects\n\t * @param {Object} [config] - { level : private|protected|public }\n\t * @return - Promise resolves to list of keys for all objects in path\n\t */\n\tpublic async list(path, config?): Promise<any> {\n\t\tconst credentialsOK = await this._ensureCredentials();\n\t\tif (!credentialsOK) {\n\t\t\treturn Promise.reject('No credentials');\n\t\t}\n\n\t\tconst opt = Object.assign({}, this._config, config);\n\t\tconst { bucket, track } = opt;\n\n\t\tconst prefix = this._prefix(opt);\n\t\tconst final_path = prefix + path;\n\t\tconst s3 = this._createS3(opt);\n\t\tlogger.debug('list ' + path + ' from ' + final_path);\n\n\t\tconst params = {\n\t\t\tBucket: bucket,\n\t\t\tPrefix: final_path,\n\t\t};\n\n\t\treturn new Promise<any>((res, rej) => {\n\t\t\ts3.listObjects(params, (err, data) => {\n\t\t\t\tif (err) {\n\t\t\t\t\tlogger.warn('list error', err);\n\t\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\t\ttrack,\n\t\t\t\t\t\t'list',\n\t\t\t\t\t\t{ method: 'list', result: 'failed' },\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t`Listing items failed: ${err.message}`\n\t\t\t\t\t);\n\t\t\t\t\trej(err);\n\t\t\t\t} else {\n\t\t\t\t\tconst list = data.Contents.map(item => {\n\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\tkey: item.Key.substr(prefix.length),\n\t\t\t\t\t\t\teTag: item.ETag,\n\t\t\t\t\t\t\tlastModified: item.LastModified,\n\t\t\t\t\t\t\tsize: item.Size,\n\t\t\t\t\t\t};\n\t\t\t\t\t});\n\t\t\t\t\tdispatchStorageEvent(\n\t\t\t\t\t\ttrack,\n\t\t\t\t\t\t'list',\n\t\t\t\t\t\t{ method: 'list', result: 'success' },\n\t\t\t\t\t\tnull,\n\t\t\t\t\t\t`${list.length} items returned from list operation`\n\t\t\t\t\t);\n\t\t\t\t\tlogger.debug('list', list);\n\t\t\t\t\tres(list);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t}\n\n\t/**\n\t * @private\n\t */\n\t_ensureCredentials() {\n\t\treturn Credentials.get()\n\t\t\t.then(credentials => {\n\t\t\t\tif (!credentials) return false;\n\t\t\t\tconst cred = Credentials.shear(credentials);\n\t\t\t\tlogger.debug('set credentials for storage', cred);\n\t\t\t\tthis._config.credentials = cred;\n\n\t\t\t\treturn true;\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\tlogger.warn('ensure credentials error', err);\n\t\t\t\treturn false;\n\t\t\t});\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprivate _prefix(config) {\n\t\tconst { credentials, level } = config;\n\n\t\tconst customPrefix = config.customPrefix || {};\n\t\tconst identityId = config.identityId || credentials.identityId;\n\t\tconst privatePath =\n\t\t\t(customPrefix.private !== undefined ? customPrefix.private : 'private/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst protectedPath =\n\t\t\t(customPrefix.protected !== undefined\n\t\t\t\t? customPrefix.protected\n\t\t\t\t: 'protected/') +\n\t\t\tidentityId +\n\t\t\t'/';\n\t\tconst publicPath =\n\t\t\tcustomPrefix.public !== undefined ? customPrefix.public : 'public/';\n\n\t\tswitch (level) {\n\t\t\tcase 'private':\n\t\t\t\treturn privatePath;\n\t\t\tcase 'protected':\n\t\t\t\treturn protectedPath;\n\t\t\tdefault:\n\t\t\t\treturn publicPath;\n\t\t}\n\t}\n\n\t/**\n\t * @private\n\t */\n\tprivate _createS3(config) {\n\t\tconst {\n\t\t\tbucket,\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\tdangerouslyConnectToHttpEndpointForTesting,\n\t\t} = config;\n\t\tlet localTestingConfig = {};\n\n\t\tif (dangerouslyConnectToHttpEndpointForTesting) {\n\t\t\tlocalTestingConfig = {\n\t\t\t\tendpoint: localTestingStorageEndpoint,\n\t\t\t\ts3BucketEndpoint: true,\n\t\t\t\ts3ForcePathStyle: true,\n\t\t\t};\n\t\t}\n\n\t\treturn new S3({\n\t\t\tapiVersion: '2006-03-01',\n\t\t\tparams: { Bucket: bucket },\n\t\t\tsignatureVersion: 'v4',\n\t\t\tregion,\n\t\t\tcredentials,\n\t\t\t...localTestingConfig,\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}