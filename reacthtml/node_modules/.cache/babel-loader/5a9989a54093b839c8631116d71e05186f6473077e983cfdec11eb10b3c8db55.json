{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nvar __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n  return r;\n};\nimport * as Observable from 'zen-observable';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\nvar logger = new Logger('AWSAppSyncProvider');\nvar AWSAppSyncProvider = /** @class */function (_super) {\n  __extends(AWSAppSyncProvider, _super);\n  function AWSAppSyncProvider() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    _this._topicClient = new Map();\n    _this._topicAlias = new Map();\n    return _this;\n  }\n  Object.defineProperty(AWSAppSyncProvider.prototype, \"endpoint\", {\n    get: function () {\n      throw new Error('Not supported');\n    },\n    enumerable: true,\n    configurable: true\n  });\n  AWSAppSyncProvider.prototype.getProviderName = function () {\n    return 'AWSAppSyncProvider';\n  };\n  AWSAppSyncProvider.prototype.publish = function (topics, msg, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        throw new Error('Operation not supported');\n      });\n    });\n  };\n  AWSAppSyncProvider.prototype._cleanUp = function (clientId) {\n    var _this = this;\n    var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n      var c = _a[1];\n      return c.clientId === clientId;\n    }).map(function (_a) {\n      var t = _a[0];\n      return t;\n    });\n    topicsForClient.forEach(function (t) {\n      return _this._cleanUpForTopic(t);\n    });\n  };\n  AWSAppSyncProvider.prototype._cleanUpForTopic = function (topic) {\n    this._topicClient.delete(topic);\n    this._topicAlias.delete(topic);\n  };\n  AWSAppSyncProvider.prototype.onDisconnect = function (_a) {\n    var _this = this;\n    var clientId = _a.clientId,\n      errorCode = _a.errorCode,\n      args = __rest(_a, [\"clientId\", \"errorCode\"]);\n    if (errorCode !== 0) {\n      var topicsForClient = Array.from(this._topicClient.entries()).filter(function (_a) {\n        var c = _a[1];\n        return c.clientId === clientId;\n      }).map(function (_a) {\n        var t = _a[0];\n        return t;\n      });\n      topicsForClient.forEach(function (topic) {\n        if (_this._topicObservers.has(topic)) {\n          _this._topicObservers.get(topic).forEach(function (obs) {\n            if (!obs.closed) {\n              obs.error(args);\n            }\n          });\n          _this._topicObservers.delete(topic);\n        }\n      });\n      this._cleanUp(clientId);\n    }\n  };\n  AWSAppSyncProvider.prototype.disconnect = function (clientId) {\n    return __awaiter(this, void 0, void 0, function () {\n      var client;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, this.clientsQueue.get(clientId, function () {\n              return null;\n            })];\n          case 1:\n            client = _a.sent();\n            return [4 /*yield*/, _super.prototype.disconnect.call(this, clientId)];\n          case 2:\n            _a.sent();\n            this._cleanUp(clientId);\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  AWSAppSyncProvider.prototype.subscribe = function (topics, options) {\n    var _this = this;\n    if (options === void 0) {\n      options = {};\n    }\n    var result = new Observable(function (observer) {\n      var targetTopics = [].concat(topics);\n      logger.debug('Subscribing to topic(s)', targetTopics.join(','));\n      (function () {\n        return __awaiter(_this, void 0, void 0, function () {\n          var _a, mqttConnections, newSubscriptions, newAliases, map;\n          var _this = this;\n          return __generator(this, function (_b) {\n            switch (_b.label) {\n              case 0:\n                // Add these topics to map\n                targetTopics.forEach(function (t) {\n                  if (!_this._topicObservers.has(t)) {\n                    _this._topicObservers.set(t, new Set());\n                  }\n                  _this._topicObservers.get(t).add(observer);\n                });\n                _a = options.mqttConnections, mqttConnections = _a === void 0 ? [] : _a, newSubscriptions = options.newSubscriptions;\n                newAliases = Object.entries(newSubscriptions).map(function (_a) {\n                  var alias = _a[0],\n                    v = _a[1];\n                  return [v.topic, alias];\n                });\n                // Merge new aliases with old ones\n                this._topicAlias = new Map(__spreadArrays(Array.from(this._topicAlias.entries()), newAliases));\n                map = Object.entries(targetTopics.reduce(function (acc, elem) {\n                  var connectionInfoForTopic = mqttConnections.find(function (c) {\n                    return c.topics.indexOf(elem) > -1;\n                  });\n                  if (connectionInfoForTopic) {\n                    var clientId = connectionInfoForTopic.client,\n                      url = connectionInfoForTopic.url;\n                    if (!acc[clientId]) {\n                      acc[clientId] = {\n                        url: url,\n                        topics: new Set()\n                      };\n                    }\n                    acc[clientId].topics.add(elem);\n                  }\n                  return acc;\n                }, {}));\n                // reconnect everything we have in the map\n                return [4 /*yield*/, Promise.all(map.map(function (_a) {\n                  var clientId = _a[0],\n                    _b = _a[1],\n                    url = _b.url,\n                    topics = _b.topics;\n                  return __awaiter(_this, void 0, void 0, function () {\n                    var client, err_1;\n                    var _this = this;\n                    return __generator(this, function (_c) {\n                      switch (_c.label) {\n                        case 0:\n                          client = null;\n                          _c.label = 1;\n                        case 1:\n                          _c.trys.push([1, 3,, 4]);\n                          return [4 /*yield*/, this.connect(clientId, {\n                            clientId: clientId,\n                            url: url\n                          })];\n                        case 2:\n                          client = _c.sent();\n                          return [3 /*break*/, 4];\n                        case 3:\n                          err_1 = _c.sent();\n                          observer.error({\n                            message: 'Failed to connect',\n                            error: err_1\n                          });\n                          observer.complete();\n                          return [2 /*return*/, undefined];\n                        case 4:\n                          // subscribe to all topics for this client\n                          // store topic-client mapping\n                          topics.forEach(function (topic) {\n                            if (client.isConnected()) {\n                              client.subscribe(topic);\n                              _this._topicClient.set(topic, client);\n                            }\n                          });\n                          return [2 /*return*/, client];\n                      }\n                    });\n                  });\n                }))];\n              case 1:\n                // reconnect everything we have in the map\n                _b.sent();\n                return [2 /*return*/];\n            }\n          });\n        });\n      })();\n\n      return function () {\n        logger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n        targetTopics.forEach(function (t) {\n          var client = _this._topicClient.get(t);\n          if (client && client.isConnected()) {\n            client.unsubscribe(t);\n            _this._topicClient.delete(t);\n            if (!Array.from(_this._topicClient.values()).some(function (c) {\n              return c === client;\n            })) {\n              _this.disconnect(client.clientId);\n            }\n          }\n          _this._topicObservers.delete(t);\n        });\n      };\n    });\n    return Observable.from(result).map(function (value) {\n      var topic = _this.getTopicForValue(value);\n      var alias = _this._topicAlias.get(topic);\n      value.data = Object.entries(value.data).reduce(function (obj, _a) {\n        var origKey = _a[0],\n          val = _a[1];\n        return obj[alias || origKey] = val, obj;\n      }, {});\n      return value;\n    });\n  };\n  return AWSAppSyncProvider;\n}(MqttOverWSProvider);\nexport { AWSAppSyncProvider };","map":{"version":3,"names":["Observable","ConsoleLogger","Logger","MqttOverWSProvider","logger","AWSAppSyncProvider","_super","__extends","_this","apply","arguments","_topicClient","Map","_topicAlias","Object","defineProperty","prototype","get","Error","getProviderName","publish","topics","msg","options","_cleanUp","clientId","topicsForClient","Array","from","entries","filter","_a","c","map","t","forEach","_cleanUpForTopic","topic","delete","onDisconnect","errorCode","args","__rest","_topicObservers","has","obs","closed","error","disconnect","clientsQueue","client","sent","call","subscribe","result","observer","targetTopics","concat","debug","join","__awaiter","set","Set","add","mqttConnections","newSubscriptions","newAliases","alias","v","__spreadArrays","reduce","acc","elem","connectionInfoForTopic","find","indexOf","url","Promise","all","_b","connect","_c","message","err_1","complete","undefined","isConnected","unsubscribe","values","some","value","getTopicForValue","data","obj","origKey","val"],"sources":["C:\\Study\\6805\\React\\reacthtml\\node_modules\\@aws-amplify\\pubsub\\src\\Providers\\AWSAppSyncProvider.ts"],"sourcesContent":["/*\n * Copyright 2017-2018 Amazon.com, Inc. or its affiliates. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"). You may not use this file except in compliance with\n * the License. A copy of the License is located at\n *\n *     http://aws.amazon.com/apache2.0/\n *\n * or in the \"license\" file accompanying this file. This file is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\n * CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions\n * and limitations under the License.\n */\nimport { Client } from 'paho-mqtt';\nimport * as Observable from 'zen-observable';\nimport { ConsoleLogger as Logger } from '@aws-amplify/core';\n\nimport { MqttOverWSProvider } from './MqttOverWSProvider';\n\nconst logger = new Logger('AWSAppSyncProvider');\n\nexport class AWSAppSyncProvider extends MqttOverWSProvider {\n\tprotected get endpoint() {\n\t\tthrow new Error('Not supported');\n\t}\n\n\tgetProviderName() {\n\t\treturn 'AWSAppSyncProvider';\n\t}\n\n\tpublic async publish(topics: string[] | string, msg: any, options?: any) {\n\t\tthrow new Error('Operation not supported');\n\t}\n\n\tprivate _cleanUp(clientId: string) {\n\t\tconst topicsForClient = Array.from(this._topicClient.entries())\n\t\t\t.filter(([, c]) => c.clientId === clientId)\n\t\t\t.map(([t]) => t);\n\n\t\ttopicsForClient.forEach(t => this._cleanUpForTopic(t));\n\t}\n\n\tprivate _cleanUpForTopic(topic) {\n\t\tthis._topicClient.delete(topic);\n\t\tthis._topicAlias.delete(topic);\n\t}\n\n\tpublic onDisconnect({ clientId, errorCode, ...args }) {\n\t\tif (errorCode !== 0) {\n\t\t\tconst topicsForClient = Array.from(this._topicClient.entries())\n\t\t\t\t.filter(([, c]) => c.clientId === clientId)\n\t\t\t\t.map(([t]) => t);\n\n\t\t\ttopicsForClient.forEach(topic => {\n\t\t\t\tif (this._topicObservers.has(topic)) {\n\t\t\t\t\tthis._topicObservers.get(topic).forEach(obs => {\n\t\t\t\t\t\tif (!obs.closed) {\n\t\t\t\t\t\t\tobs.error(args);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tthis._topicObservers.delete(topic);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tthis._cleanUp(clientId);\n\t\t}\n\t}\n\n\tprivate _topicClient: Map<string, Client> = new Map();\n\n\tprivate _topicAlias: Map<string, string> = new Map();\n\n\tprotected async disconnect(clientId: string): Promise<void> {\n\t\tconst client = await this.clientsQueue.get(clientId, () => null);\n\n\t\tawait super.disconnect(clientId);\n\n\t\tthis._cleanUp(clientId);\n\t}\n\n\tsubscribe(topics: string[] | string, options: any = {}): Observable<any> {\n\t\tconst result = new Observable<any>(observer => {\n\t\t\tconst targetTopics = ([] as string[]).concat(topics);\n\t\t\tlogger.debug('Subscribing to topic(s)', targetTopics.join(','));\n\n\t\t\t(async () => {\n\t\t\t\t// Add these topics to map\n\t\t\t\ttargetTopics.forEach(t => {\n\t\t\t\t\tif (!this._topicObservers.has(t)) {\n\t\t\t\t\t\tthis._topicObservers.set(t, new Set());\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._topicObservers.get(t).add(observer);\n\t\t\t\t});\n\n\t\t\t\tconst { mqttConnections = [], newSubscriptions } = options;\n\n\t\t\t\t// creates a map of {\"topic\": \"alias\"}\n\t\t\t\tconst newAliases = Object.entries(newSubscriptions).map(\n\t\t\t\t\t([alias, v]: [string, { topic: string }]) => [v.topic, alias]\n\t\t\t\t);\n\n\t\t\t\t// Merge new aliases with old ones\n\t\t\t\tthis._topicAlias = new Map([\n\t\t\t\t\t...Array.from(this._topicAlias.entries()),\n\t\t\t\t\t...(newAliases as [string, string][]),\n\t\t\t\t]);\n\n\t\t\t\t// group by urls\n\t\t\t\tconst map: [\n\t\t\t\t\tstring,\n\t\t\t\t\t{ url: string; topics: Set<string> }\n\t\t\t\t][] = Object.entries(\n\t\t\t\t\ttargetTopics.reduce((acc, elem) => {\n\t\t\t\t\t\tconst connectionInfoForTopic = mqttConnections.find(\n\t\t\t\t\t\t\tc => c.topics.indexOf(elem) > -1\n\t\t\t\t\t\t);\n\n\t\t\t\t\t\tif (connectionInfoForTopic) {\n\t\t\t\t\t\t\tconst { client: clientId, url } = connectionInfoForTopic;\n\n\t\t\t\t\t\t\tif (!acc[clientId]) {\n\t\t\t\t\t\t\t\tacc[clientId] = {\n\t\t\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\t\t\ttopics: new Set(),\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tacc[clientId].topics.add(elem);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn acc;\n\t\t\t\t\t}, {})\n\t\t\t\t);\n\n\t\t\t\t// reconnect everything we have in the map\n\t\t\t\tawait Promise.all(\n\t\t\t\t\tmap.map(async ([clientId, { url, topics }]) => {\n\t\t\t\t\t\t// connect to new client\n\t\t\t\t\t\tlet client = null;\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tclient = await this.connect(clientId, {\n\t\t\t\t\t\t\t\tclientId,\n\t\t\t\t\t\t\t\turl,\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} catch (err) {\n\t\t\t\t\t\t\tobserver.error({ message: 'Failed to connect', error: err });\n\t\t\t\t\t\t\tobserver.complete();\n\t\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// subscribe to all topics for this client\n\t\t\t\t\t\t// store topic-client mapping\n\t\t\t\t\t\ttopics.forEach(topic => {\n\t\t\t\t\t\t\tif (client.isConnected()) {\n\t\t\t\t\t\t\t\tclient.subscribe(topic);\n\n\t\t\t\t\t\t\t\tthis._topicClient.set(topic, client);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\treturn client;\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t\t})();\n\n\t\t\treturn () => {\n\t\t\t\tlogger.debug('Unsubscribing from topic(s)', targetTopics.join(','));\n\n\t\t\t\ttargetTopics.forEach(t => {\n\t\t\t\t\tconst client = this._topicClient.get(t);\n\n\t\t\t\t\tif (client && client.isConnected()) {\n\t\t\t\t\t\tclient.unsubscribe(t);\n\t\t\t\t\t\tthis._topicClient.delete(t);\n\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t!Array.from(this._topicClient.values()).some(c => c === client)\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tthis.disconnect(client.clientId);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._topicObservers.delete(t);\n\t\t\t\t});\n\t\t\t};\n\t\t});\n\n\t\treturn Observable.from(result).map(value => {\n\t\t\tconst topic = this.getTopicForValue(value);\n\t\t\tconst alias = this._topicAlias.get(topic);\n\n\t\t\tvalue.data = Object.entries(value.data).reduce(\n\t\t\t\t(obj, [origKey, val]) => (\n\t\t\t\t\t(obj[(alias || origKey) as string] = val), obj\n\t\t\t\t),\n\t\t\t\t{}\n\t\t\t);\n\n\t\t\treturn value;\n\t\t});\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}