{"ast":null,"code":"var AWS = require('../core');\nrequire('../rds/signer');\n/**\n * @api private\n */\nvar crossRegionOperations = ['copyDBSnapshot', 'createDBInstanceReadReplica', 'createDBCluster', 'copyDBClusterSnapshot'];\nAWS.util.update(AWS.RDS.prototype, {\n  /**\n   * @api private\n   */\n  setupRequestListeners: function setupRequestListeners(request) {\n    if (crossRegionOperations.indexOf(request.operation) !== -1 && request.params.SourceRegion) {\n      request.params = AWS.util.copy(request.params);\n      if (request.params.PreSignedUrl || request.params.SourceRegion === this.config.region) {\n        delete request.params.SourceRegion;\n      } else {\n        var doesParamValidation = !!this.config.paramValidation;\n        // remove the validate parameters listener so we can re-add it after we build the URL\n        if (doesParamValidation) {\n          request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n        request.onAsync('validate', this.buildCrossRegionPresignedUrl);\n        if (doesParamValidation) {\n          request.addListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n        }\n      }\n    }\n  },\n  /**\n   * @api private\n   */\n  buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {\n    var config = AWS.util.copy(req.service.config);\n    config.region = req.params.SourceRegion;\n    delete req.params.SourceRegion;\n    delete config.endpoint;\n    // relevant params for the operation will already be in req.params\n    delete config.params;\n    config.signatureVersion = 'v4';\n    var destinationRegion = req.service.config.region;\n    var svc = new req.service.constructor(config);\n    var newReq = svc[req.operation](AWS.util.copy(req.params));\n    newReq.on('build', function addDestinationRegionParam(request) {\n      var httpRequest = request.httpRequest;\n      httpRequest.params.DestinationRegion = destinationRegion;\n      httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);\n    });\n    newReq.presign(function (err, url) {\n      if (err) done(err);else {\n        req.params.PreSignedUrl = url;\n        done();\n      }\n    });\n  }\n});","map":{"version":3,"names":["AWS","require","crossRegionOperations","util","update","RDS","prototype","setupRequestListeners","request","indexOf","operation","params","SourceRegion","copy","PreSignedUrl","config","region","doesParamValidation","paramValidation","removeListener","EventListeners","Core","VALIDATE_PARAMETERS","onAsync","buildCrossRegionPresignedUrl","addListener","req","done","service","endpoint","signatureVersion","destinationRegion","svc","constructor","newReq","on","addDestinationRegionParam","httpRequest","DestinationRegion","body","queryParamsToString","presign","err","url"],"sources":["C:/Study/6805/React/reacthtml/node_modules/aws-sdk/lib/services/rds.js"],"sourcesContent":["var AWS = require('../core');\nrequire('../rds/signer');\n /**\n  * @api private\n  */\n var crossRegionOperations = ['copyDBSnapshot', 'createDBInstanceReadReplica', 'createDBCluster', 'copyDBClusterSnapshot'];\n\n AWS.util.update(AWS.RDS.prototype, {\n   /**\n    * @api private\n    */\n   setupRequestListeners: function setupRequestListeners(request) {\n     if (crossRegionOperations.indexOf(request.operation) !== -1 &&\n         request.params.SourceRegion) {\n       request.params = AWS.util.copy(request.params);\n       if (request.params.PreSignedUrl ||\n           request.params.SourceRegion === this.config.region) {\n         delete request.params.SourceRegion;\n       } else {\n         var doesParamValidation = !!this.config.paramValidation;\n         // remove the validate parameters listener so we can re-add it after we build the URL\n         if (doesParamValidation) {\n           request.removeListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n         }\n         request.onAsync('validate', this.buildCrossRegionPresignedUrl);\n         if (doesParamValidation) {\n           request.addListener('validate', AWS.EventListeners.Core.VALIDATE_PARAMETERS);\n         }\n       }\n     }\n   },\n\n   /**\n    * @api private\n    */\n   buildCrossRegionPresignedUrl: function buildCrossRegionPresignedUrl(req, done) {\n     var config = AWS.util.copy(req.service.config);\n     config.region = req.params.SourceRegion;\n     delete req.params.SourceRegion;\n     delete config.endpoint;\n     // relevant params for the operation will already be in req.params\n     delete config.params;\n     config.signatureVersion = 'v4';\n     var destinationRegion = req.service.config.region;\n\n     var svc = new req.service.constructor(config);\n     var newReq = svc[req.operation](AWS.util.copy(req.params));\n     newReq.on('build', function addDestinationRegionParam(request) {\n       var httpRequest = request.httpRequest;\n       httpRequest.params.DestinationRegion = destinationRegion;\n       httpRequest.body = AWS.util.queryParamsToString(httpRequest.params);\n     });\n     newReq.presign(function(err, url) {\n       if (err) done(err);\n       else {\n         req.params.PreSignedUrl = url;\n         done();\n       }\n     });\n   }\n });\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}